<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 height="60"
		 borderStyle="solid">

	<mx:Script>
        <![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.HRule;
			import mx.core.EdgeMetrics;
			import mx.core.IUITextField;
			import mx.core.UITextField;
			import mx.events.FlexEvent;
			
			import net.vdombox.powerpack.managers.BuilderContextManager;
			import net.vdombox.powerpack.template.BuilderTemplate;

		// Define a property for returning the new value to the item.
		[Bindable]
		public var returnText : String;

		public var labelTextField : IUITextField;

		private var graphNameWatcher : ChangeWatcher;
		private var initialGraphWatcher : ChangeWatcher;
		private var selProjectWatcher : ChangeWatcher;

		//--------------------------------------------------------------------------
		//
		//  Properties
		//
		//--------------------------------------------------------------------------

		//----------------------------------
		//  editable
		//----------------------------------

		private var _editable : Boolean;

		[Bindable("editableChange")]
		public function set editable( value : Boolean ) : void
		{
			if ( _editable != value )
			{
				_editable = value;

				if ( _editable )
				{
					labelTextField.visible = false;
					labelTextField.includeInLayout = false;

					txtThumb.visible = true;
					txtThumb.includeInLayout = true;
				}
				else
				{
					txtThumb.includeInLayout = false;
					txtThumb.visible = false;

					labelTextField.visible = true;
					labelTextField.includeInLayout = true;
				}

				invalidateDisplayList();

				dispatchEvent( new Event( "editableChange" ) );
			}
		}

		public function get editable() : Boolean
		{
			return _editable;
		}

		//--------------------------------------------------------------------------
		//
		//  Overridden methods
		//
		//--------------------------------------------------------------------------

		override protected function createChildren() : void
		{
			super.createChildren();

			if ( !labelTextField )
			{
				labelTextField = IUITextField( createInFontContext( UITextField ) );
				labelTextField.text = txtThumb.text;
				labelTextField.styleName = getStyle( "labelTextStyleName" );
				labelTextField.enabled = true;
				labelTextField.visible = true;
				labelTextField.includeInLayout = true;

				addChild( DisplayObject( labelTextField ) );
			}
			
		}
			
		override public function set data(value:Object):void
		{
			if (data == value)
				return;
			
			super.data = value;
			
			if ( data )
			{
				if ( graphNameWatcher )
					graphNameWatcher.unwatch();
				
				if ( initialGraphWatcher )
					initialGraphWatcher.unwatch();
				
				if ( selProjectWatcher )
					selProjectWatcher.unwatch();
				
				graphNameWatcher = BindingUtils.bindSetter( onLabelChange, data, 'name' );
				
				initialGraphWatcher = BindingUtils.bindSetter( onInitialChange, data, 'initial' );
				
				selProjectWatcher = BindingUtils.bindSetter( onSelectedProjectChange, currentTemplate, 'selectedProject' );
			}
			else
			{
				txtThumb.text = '';
				invalidateDisplayList();
			}
			
		}
			
		private function onLabelChange( label : String ) : void
		{
			txtThumb.text = label;
			invalidateDisplayList();
		}

		private function onInitialChange( init : Boolean ) : void
		{
			if (init)
			{
				if (currentTemplate.selectedProject.initialGraphName == data.name)
					updateInitialGraphViewState(STATE_INITIAL_AND_CURRENT)
				else
					updateInitialGraphViewState(STATE_INITIAL)
			}
			else
				updateInitialGraphViewState(STATE_USUAL)
		}
	
		private function onSelectedProjectChange( obj : Object ) : void
		{
			
			if (obj && obj.initialGraphName == data.name)
				updateInitialGraphViewState(STATE_INITIAL_AND_CURRENT)
			else
				onInitialChange(data.initial);
		}
			
		private static const STATE_USUAL				: String = "stateUsual";
		private static const STATE_INITIAL				: String = "stateInitial";
		private static const STATE_INITIAL_AND_CURRENT	: String = "stateInitialAndCurrent";
		
		private function updateInitialGraphViewState (viewState : String = STATE_USUAL) : void
		{
			switch(viewState)
			{
				case STATE_INITIAL_AND_CURRENT:
				{
					setStyle("backgroundColor", getStyle("backgroundCurrentInitialColor"));
					break;
				}
				case STATE_INITIAL:
				{
					setStyle("backgroundColor", getStyle("backgroundInitialColor"));
					break;
				}
				case STATE_USUAL:
				default:
				{
					setStyle("backgroundColor", getStyle("backgroundUsualColor"));
					break;
				}
			}
		}
		
		private function get currentTemplate() : BuilderTemplate
		{
			return BuilderContextManager.currentTemplate;
		}
		
		/**
		 *  @private
		 */
		override protected function updateDisplayList( unscaledWidth : Number, unscaledHeight : Number ) : void
		{
			var edges : EdgeMetrics = viewMetricsAndPadding;
			var contentAreaWidth : int = width - edges.left - edges.right;
			var labelWidth : int = contentAreaWidth - 6;

			if ( editable )
			{
				txtThumb.width = labelWidth;
				txtThumb.x = 3;
			}
			else
			{
				labelTextField.text = txtThumb.text;
				labelTextField.width = labelWidth;

				labelTextField.x = 3;

				if ( labelTextField.textWidth > labelWidth )
				{
					labelTextField.truncateToFit( "..." );
				}
			}
			
			super.updateDisplayList( unscaledWidth, unscaledHeight );
		}
		
			
		]]>
    </mx:Script>

	<mx:Image id="imgThumb" scaleContent="true" autoLoad="true" source="@Embed('/assets/images/Tree.png')" width="24"
			  height="24" />

	<mx:TextInput id="txtThumb"
				  styleName="inputTextStyleName" textAlign="center" visible="false" includeInLayout="false"
				  change="returnText=txtThumb.text;"
				  updateComplete="returnText=txtThumb.text;" />

</mx:VBox>
