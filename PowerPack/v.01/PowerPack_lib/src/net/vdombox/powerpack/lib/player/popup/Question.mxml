<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:popup="net.vdombox.powerpack.lib.player.popup.*" 
				xmlns:control="net.vdombox.powerpack.lib.player.control.*"
				creationComplete="completeHandler(event)"
				keyDown="keyDown_Handler(event)">
	
	<mx:Script>
		<![CDATA[
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.controls.HRule;
			import mx.controls.Image;
			import mx.controls.Text;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import net.vdombox.powerpack.lib.player.control.BrowseButton;
			import net.vdombox.powerpack.lib.player.customize.skins.PopupBackgroundSkin;
			import net.vdombox.powerpack.lib.player.events.TemplateLibEvent;
			import net.vdombox.powerpack.lib.player.events.TemplateTransition;
			import net.vdombox.powerpack.lib.player.gen.parse.ListParser;
			import net.vdombox.powerpack.lib.player.popup.Answers.Answer;
			import net.vdombox.powerpack.lib.player.popup.Answers.AnswerCreator;
			import net.vdombox.powerpack.lib.player.popup.Answers.BrowseFileAnswer;
			
			[Bindable]
			public var question : String = "";
			
			public var strAnswer : String = "";
			
			private var _dataProvider : Array;
			
			public var context : Array;
			
			[Bindable]
			public var cancelable : Boolean = false;
			
			public function set dataProvider(value:Array):void
			{
				_dataProvider = QuestionParamsConvertor.convertToArrayOfLists(value);
			}
			
			override protected function createChildren () : void
			{
				super.createChildren();
				
				if (!_dataProvider)
				{
					throw Error("Possible answers are not declared!");
					return;
				}
				
				var answer : Answer;
				Answer.context = context;
				
				for each (var value : * in _dataProvider) 
				{
					try
					{
						answer = AnswerCreator.create( value);
					}
					catch (e:Error)
					{
						trace ("error");
						continue;
					}
					answerBox.addChild( answer );
				}
			}
						
			private function get answersList () : String
			{
				var resultArray : Array = [];
				
				for each(var answer : Answer in answerBox.getChildren())
				{
					resultArray.push( answer.value);
				}
				
				return ListParser.array2List( resultArray );
			}
			
			protected function closeDialog (closeDetail : String = TemplateTransition.OK) : void
			{
				var qResult : Object;
				
				if (closeDetail == TemplateTransition.CANCEL)
					qResult = "";
				else
				{
					var answers : Array =  answerBox.getChildren();
					
					if (!answers)
						qResult = "";
					else
					{
						if (answers.length == 1)
						{
//							qResult = answers[0] is BrowseFileAnswer ? BrowseFileAnswer(answers[0]).selectedFile : answers[0].value;
							qResult =  answers[0].value 
						}
						else
							qResult = answersList;
					}
				}
				
				var evt : TemplateLibEvent = new TemplateLibEvent( TemplateLibEvent.COMPLETE, qResult, closeDetail );
				dispatchEvent( evt );
				
				removeListeners();
				PopUpManager.removePopUp(this);
			}
			
			protected function completeHandler(event:FlexEvent):void
			{
				width = 400;
				PopUpManager.centerPopUp(this);
				
				if (answerBox.numChildren > 0)
					Answer(answerBox.getChildAt(0)).setFocus();
			}
			
			private function get borderThickness () : Number
			{
				return getStyle("borderThickness");
			}
			
			protected function btnOkClickHandler(evt:MouseEvent) : void
			{
				closeDialog();
			}
			
			protected function keyDown_Handler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER)
				{
					event.stopPropagation();
					
					if (event.target == btnCancel && btnCancel.enabled)
						closeDialog(TemplateTransition.CANCEL);
					else if (btnOk.enabled)
						closeDialog();
					
					return;
				}
				
				if (event.keyCode == Keyboard.ESCAPE)
				{
					event.stopPropagation();
					
					if (btnCancel.enabled)
						closeDialog(TemplateTransition.CANCEL);
				}
					
			}
			
			protected function btnCancel_clickHandler(event:MouseEvent):void
			{
				closeDialog(TemplateTransition.CANCEL);
			}
			
			private function removeListeners () : void
			{
				btnOk.removeEventListener(MouseEvent.CLICK, btnOkClickHandler);
				btnCancel.removeEventListener(MouseEvent.CLICK, btnCancel_clickHandler);
				
				removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler)
			}
			
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" id="mainBox" 
			 left="{borderThickness}" right="{borderThickness}" 
			 top="{borderThickness}" bottom="{borderThickness}">
		
		<mx:Canvas width="100%" id="topPart">
			<mx:HBox width="100%"
					 paddingLeft="16" paddingTop="16" paddingRight="16" 
					 horizontalGap="10" id="topH">
				<mx:Image source="@Embed('/assets/images/question.png')" autoLoad="true" id="qImg"/>
				<mx:Text width="100%" maxHeight="188"
						 paddingTop="5" paddingBottom="5"
						 styleName="infoTextStyle"
						 text="{question}"
						 selectable="false"
						 id="qText"/>
			</mx:HBox>
		</mx:Canvas>
		
		<popup:PopupBottomPart width="100%" id="bottomPart">
			<mx:VBox  verticalGap="12" id="t1" width="100%"
					  paddingLeft="16" paddingTop="16" paddingRight="16" paddingBottom="16">
				<mx:HBox width="100%" height="100%" id="t2">
 					<mx:Image source="@Embed('/assets/images/user.png')" autoLoad="true" id="t3"/>
					<mx:VBox width="100%"  id="answerBox"  maxHeight="200" verticalGap="20" />
					
				</mx:HBox>
				<mx:HBox width="100%" bottom="0" right="0"
						 horizontalAlign="right" verticalAlign="middle">
					<control:RoundButton label="Ok" id="btnOk" 
							   							click="btnOkClickHandler(event)"/>
					<control:RoundButton label="Cancel" id="btnCancel" 
										 click="btnCancel_clickHandler(event)"
										 visible="{cancelable}"
										 enabled="{cancelable}"
										 includeInLayout="{cancelable}"/>
				</mx:HBox>
			</mx:VBox>
		</popup:PopupBottomPart>
		
	</mx:VBox>
	
</mx:Canvas>
