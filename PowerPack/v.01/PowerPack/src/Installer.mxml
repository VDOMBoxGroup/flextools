<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:customize="net.vdombox.powerpack.customize.*"
	width="750" height="400" verticalAlign="middle" horizontalAlign="center" layout="absolute"
	showStatusBar="false" showGripper="false"
	title="{LanguageManager.sentences.app_title}"
	titleIcon="@Embed(source='assets/icons/icon_16.png')"
	titleBarFactory="net.vdombox.powerpack.customize.core.windowClasses.GeneratorTitleBar"
	statusBarFactory="net.vdombox.powerpack.customize.core.windowClasses.SuperStatusBar"
	initialize="init()"
	applicationComplete="show()"
	updateComplete="complete()"
	xmlns:controls="net.vdombox.powerpack.lib.extendedapi.controls.*"
	creationComplete="windowedapplication1_creationCompleteHandler(event)"
	backgroundImage="assets/images/texture_ide_sidebar.png"
	
	xmlns:control="net.vdombox.powerpack.control.*"
	showTitleBar="false"
	mouseDown="window_mouseDownHandler(event)">
	
	<mx:Style source="assets/style/installer.css" />
	
	
	<mx:Fade alphaFrom="0.0" alphaTo="1.0" duration="300" id="canvasShow" />
	<mx:Fade alphaFrom="1.0" alphaTo="0.0" duration="300" id="canvasHide" />
	
	<mx:Parallel id="picShow">
		<mx:Move xBy="20" xTo="{tplPic.x}" duration="400" />
		<mx:Fade alphaFrom="0" alphaTo="1" duration="400" />
	</mx:Parallel>
	
	<customize:GeneratorResources id="resources" />
	
	<mx:XML format="e4x" id="fileMenuData">
		<root>
			<menuitem label="{LanguageManager.sentences.menu_file}" id="file">
				<menuitem label="{LanguageManager.sentences.menu_open_file}" id="open_file" />
				<!--menuitem label="{LanguageManager.sentences.menu_run_template}" id="run_template" enabled="false"/-->
				<!--menuitem label="{LanguageManager.sentences.menu_install_app}" id="install_app" enabled="false"/-->
				<menuitem type="separator" />
				<menuitem label="{LanguageManager.sentences.menu_exit}" id="exit" />
			</menuitem>
			<menuitem label="{LanguageManager.sentences.menu_parameters}" id="parameters">
				<menuitem label="{LanguageManager.sentences.menu_language}" id="language" />
				<menuitem label="{LanguageManager.sentences.menu_connection}" id="connection" />
				<menuitem label="{LanguageManager.sentences.menu_properties}" id="properties" />
			</menuitem>
			<menuitem label="?" id="help" />
		</root>
	</mx:XML>
	
	<mx:Script>
		<![CDATA[
			import generated.webservices.Close_sessionResultEvent;
			import generated.webservices.Install_applicationResultEvent;
			import generated.webservices.List_applicationsResultEvent;
			import generated.webservices.Open_sessionResultEvent;
			import generated.webservices.Vdom;
			
			import mx.controls.Alert;
			import mx.controls.ProgressBarMode;
			import mx.core.FlexLoader;
			import mx.events.CloseEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.FaultEvent;
			import mx.utils.StringUtil;
			
			import net.vdombox.powerpack.BasicError;
			import net.vdombox.powerpack.Template;
			import net.vdombox.powerpack.customize.skins.CloseButtonSkin;
			import net.vdombox.powerpack.customize.skins.GradientButtonSkin;
			import net.vdombox.powerpack.customize.skins.MaximizeButtonSkin;
			import net.vdombox.powerpack.customize.skins.MinimizeButtonSkin;
			import net.vdombox.powerpack.dialog.GenConnection;
			import net.vdombox.powerpack.dialog.GenProperties;
			import net.vdombox.powerpack.events.TemplateLibEvents.TemplateLibEvent;
			import net.vdombox.powerpack.gen.TemplateStruct;
			import net.vdombox.powerpack.lib.extendedapi.containers.SuperAlert;
			import net.vdombox.powerpack.lib.extendedapi.utils.FileUtils;
			import net.vdombox.powerpack.lib.extendedapi.utils.Utils;
			import net.vdombox.powerpack.managers.ConnectionManager;
			import net.vdombox.powerpack.managers.ContextManager;
			import net.vdombox.powerpack.managers.LanguageManager;
			import net.vdombox.powerpack.managers.ProgressManager;
			import net.vdombox.powerpack.menu.MenuGeneral;
			
			import vdom.connection.protect.Code;
			import vdom.connection.protect.MD5;
			
			private var vsLastChanged : DisplayObject;
			private var appGenerated : Boolean;
			private var appInstalled : Boolean;
			private var timer : Number;
			
			private function init() : void
			{
				var defaultCaptions : Object = {
					
					app_title : "Power Pack Installer",
					msg_input_template_key : "Please, input valid template key",
					msg_exit_app : "Are you sure want to exit?",
					msg_tpl_proceed_with_errs : "Error(s) exist in template\nProceed with launch?",
					msg_gen_welcome : "Lorem ipsum dolor sit amet",
					msg_gen_finish : "Installation is complete",
					
					msg_save_appxml_to_server : "Save application xml to server.",
					msg_connecting_fault : "A fault occured contacting the server. Fault message is:",
					msg_try_to_reconnect : "Try to reconnect.",
					msg_save_appxml_to_file : "Save application xml to file.",
					msg_saving_appxml_fault : "A fault occured saving application xml. Fault message is:",
					msg_proceed_interrupt_app_installing : "Are you sure want to interrupt process?",
					msg_creation_app_interrupted : "Application creation process has been interrupted by user.",
					
					prgrs_gen_tpl : "Generating application xml. Progress %3%%",
					prgrs_save_to_server_tpl : "Saving to server. Progress %3%%",
					prgrs_save_to_file_tpl : "Saving to file. Progress %3%%",
					prgrs_launch_app : "Launching %3%%",
					
					errs_in_tpl : "Errors in template",
					menu_run_template : "_Run",
					gen_result : "Result",
					virtual_host_name : "Virtual host name",
					save_to_server : "Save to server",
					save_to_file : "Save to file"
				};
				
				LanguageManager.setSentences( defaultCaptions );
				
				if ( File.applicationDirectory.resolvePath( 'style/generator.swf' ).exists )
					StyleManager.loadStyleDeclarations( "style/generator.swf" );

			}
			
			private function show() : void
			{
				addEventListener( Event.CLOSING, closingApplicationHandler );
				
				function closingApplicationHandler( event : Event ) : void
				{
					event.preventDefault();
					exitApplication();
				}
				
				
				var file : File;
				var fileStream : FileStream;
				
				for each ( file in [ContextManager.instance.dataStorage, ContextManager.instance.settingStorage] )
				{
					if ( !file.exists ) file.createDirectory();
				}
				
				// Load application settings
				ContextManager.loadSettings();
				
				
				// Load language file
				file = File.applicationDirectory.resolvePath( MenuGeneral.LANG_FOLDER + ContextManager.instance.lang.file );
				if ( file && file.exists )
				{
					fileStream = new FileStream();
					fileStream.addEventListener( Event.COMPLETE, onLanguageLoad );
					fileStream.openAsync( file, FileMode.READ );
				}
				
			}
			
			private function complete() : void
			{
			}
			
			private function exitApplication( event : Event = null ) : void
			{
			
				ContextManager.saveSettings();
				exit();
			}
			
			private function labelFunction( item : Object ) : String
			{
				var _item : XML = XML( item );
				return _item.@label.toString().replace( "_", "" );
			}
			
			//--------------------------------------------------------------------------
			//
			//  Event handlers
			//
			//--------------------------------------------------------------------------
			
			private function onLanguageLoad( event : Event ) : void
			{
				var fileStream : FileStream = event.target as FileStream;
				var xml : XML = XML( fileStream.readUTFBytes( fileStream.bytesAvailable ) );
				fileStream.close();
				
				LanguageManager.languageXML = xml;
				
				ContextManager.instance.lang.label = LanguageManager.languageXML.@label.toLowerCase();
				ContextManager.instance.lang.file = LanguageManager.languageXML.@data;
			}
			
			private function onTemplateLoad( event : Event ) : void
			{
				var fileStream : FileStream = event.target as FileStream;
				var xml : XML = XML( fileStream.readUTFBytes( fileStream.bytesAvailable ) );
				
				fileStream.close();
				
				var template : Template = new Template( xml );
				
				if ( ContextManager.templates.length == 0 )
					ContextManager.templates.addItemAt( template, 0 );
				else
					ContextManager.templates[0] = template;
				
				showTemplateLogo(getLogo());
				
				if ( template.isEncoded )
				{
					processStep( cKeyRequest );
				}
				else
				{
					openTemplate();
				}
				
				function getLogo() : *
				{
					return xml.picture[0] && Utils.getStringOrDefault( xml.picture[0], '' ) || resources.strLogo;
				}
			}
			
			private function showTemplateLogo(sourceLogo : String):void
			{
				if (tplPic.visible && tplPic.value == sourceLogo)
					return;
				
				tplPic.visible = false;
				
				tplPic.addEventListener("sourceChanged", onLogoScaleContentChanged);
				
				tplPic.width = 220;
				tplPic.percentHeight = 100;
				
				tplPic.value = sourceLogo;
				tplPic.visible = true;
			}
			
			private function onLogoScaleContentChanged(evt:Event):void
			{
				if (tplPic.source && tplPic.source is Bitmap)
				{
					tplPic.removeEventListener("sourceChanged", onLogoScaleContentChanged);
					
					var sourceBitmapData : BitmapData = tplPic.source.bitmapData; 
					
					if (sourceBitmapData.width < tplPic.width && sourceBitmapData.height < tplPic.height)
					{
						tplPic.width = sourceBitmapData.width;
						tplPic.height = sourceBitmapData.height;
					}
				}
			}
			
			private function onKeyAccept( event : Event ) : void
			{
				openTemplate( txtKey.text );
			}
			
			private function openTemplate( key : String = null ) : void
			{
				var tpl : Template = ContextManager.templates[0];
				
				if ( tpl.isEncoded )
				{
					tpl.key = key;
					tpl.decode();
					
				}
				
				if ( tpl.xmlStructure )
				{
					if ( fileMenuData..menuitem.(hasOwnProperty( '@id' ) && @id == "run_template")[0] )
						fileMenuData..menuitem.(hasOwnProperty( '@id' ) && @id == "run_template")[0].@enabled = 'true';
					processStep( cGeneral );
				}
				else
				{
					SuperAlert.show( LanguageManager.sentences['msg_cannot_open_tpl'] ,"", 4, nativeWindow);
					
				}
			}
			
			// Event handler for the MenuBar control's itemClick event.
			private function onMenuClick( event : Object ) : void
			{
				var file : File = ContextManager.instance.lastDir;
				var fileStream : FileStream = new FileStream();
				var tmplFilter : FileFilter = new FileFilter(
					StringUtil.substitute( "{0} ({1})", LanguageManager.sentences['template'], "*.xml" ),
					"*.xml" );
				var filter : FileFilter = new FileFilter(
					StringUtil.substitute( "{0} ({1})", LanguageManager.sentences['all'], "*.*" ),
					"*.*" );
				
				//todo: overite by "case" 
				if ( event.item.@id == "open_file" )
				{
					openTemplateFile( null, onOpenBrowseSelect, [tmplFilter, filter] );
				}
				else if ( event.item.@id == "run_template" )
				{
					processStep( 1 );
				}
				else if ( event.item.@tag == "lastfiles" )
				{
					file.url = FileUtils.pathToUrl( event.item.@data );
					openTemplateFile( file, onTemplateLoad );
				}
				else if ( event.item.@id == "exit" )
				{
					exitApplication();
				}
				else if ( event.item.@id == "connection" )
				{
					GenConnection.show();
				}
				else if ( event.item.@id == "properties" )
				{
					GenProperties.show();
				}
				
				if ( event.item.@tag == "language" )
				{
					file = File.applicationDirectory.resolvePath( MenuGeneral.LANG_FOLDER + event.item.@data );
					fileStream.addEventListener( Event.COMPLETE, onLanguageLoad );
					fileStream.openAsync( file, FileMode.READ );
				}
			}
			
			private function vsChange( event : IndexChangedEvent ) : void
			{
				var child : DisplayObject;
				
				if ( !vsLastChanged || vsLastChanged == event.target )
				{
					if ( event.target == vsProcess )
					{
						child = vsProcess.getChildAt( event.newIndex );
					}
					else if ( event.target == vsImages )
						child = vsImages.getChildAt( event.newIndex );
					
					if ( child )
						child.addEventListener( EffectEvent.EFFECT_END, onEffectEnd );
					
					vsLastChanged = null;
				}
			}
			
			private function onEffectEnd( event : Event ) : void
			{
				event.target.removeEventListener( EffectEvent.EFFECT_END, onEffectEnd );
				
				switch ( vsProcess.selectedChild )
				{
					case cProcess:
						switch ( vsImages.selectedIndex )
						{
							case 0:
								runingTemplate();
								break;
						
						}
						break;
					
					
					case cComplete:
						txtResultBuf.text = '';
						//txtResultBuf.text = ContextManager.templateStruct.buffer;
						txtResultBuf.text = (timer / 1000).toString();
						txtResultBuf.verticalScrollPosition = 0;
						break;
				}
			}
			
			private function processStep( step : * ) : void
			{
				switch ( typeof step )
				{
					case 'number':
						switch ( step )
						{
							case 1:
								vsProcess.selectedChild = cProcess;
								vsLastChanged = vsImages.selectedIndex == 0 ? vsProcess : vsImages;
								vsImages.selectedIndex = 0;
//								progressBar.mode = ProgressBarMode.MANUAL;
//								progressBar.setProgress( 0, 100 );
//								LanguageManager.bindSentence( 'prgrs_gen_tpl', progressBar );
								break;
							case 2:
								vsProcess.selectedChild = cProcess;
								vsLastChanged = vsImages.selectedIndex == 1 ? vsProcess : vsImages;
								vsImages.selectedIndex = 1;
//								progressBar.mode = ProgressBarMode.MANUAL;
//								progressBar.setProgress( 0, 100 );
//								LanguageManager.bindSentence( 'prgrs_save_to_server_tpl', progressBar );
								break
							case 3:
								vsProcess.selectedChild = cProcess;
								vsLastChanged = vsImages.selectedIndex == 2 ? vsProcess : vsImages;
								vsImages.selectedIndex = 2;
//								progressBar.mode = ProgressBarMode.MANUAL;
//								progressBar.setProgress( 0, 100 );
//								LanguageManager.bindSentence( 'prgrs_save_to_file_tpl', progressBar );
								break;
							case 4:
								vsProcess.selectedChild = cProcess;
								vsLastChanged = vsImages.selectedIndex == 3 ? vsProcess : vsImages;
								vsImages.selectedIndex = 3;
								vsLastChanged = vsImages;
								progressBar.mode = ProgressBarMode.MANUAL;
//								progressBar.setProgress( 0, 100 );
//								LanguageManager.bindSentence( 'prgrs_launch_app', progressBar );
								break;
						}
						break;
					default:
						switch ( step )
						{
							case cKeyRequest:
								vsProcess.selectedChild = cKeyRequest;
								break;
							case cGeneral:
								vsProcess.selectedChild = cGeneral;
								break;
							
							case cProcess:
								vsProcess.selectedChild = cProcess;
								break;
							
							case cComplete:
								vsProcess.selectedChild = cComplete;
								break;
							case cFinal:
								vsProcess.selectedChild = cFinal;
								break;
						}
						break;
				}
			}
			
			////////////////////////////////////////////////////////////
			
			private function clearTemplateDebug() : void
			{
				var tpl : TemplateStruct = ContextManager.templateStruct;
				
				if ( tpl )
				{
//					tpl.removeEventListener( "stepComplete", stepCompleteHandler );
					tpl.removeEventListener( "generationComplete", generationComplete );
					tpl.removeEventListener( "error", debugErrorHandler );
					ContextManager.templateStruct = null;
				}
			}
			
			private function runingTemplate() : void
			{
				try
				{
//					mnMain.enabled = false;
					appGenerated = false;
					
					var tpl : Template;
					
					tpl = ContextManager.templates.getItemAt( 0 ) as Template;
					
					ContextManager.templateStruct = new TemplateStruct( tpl.xmlStructure, tpl.fullID );
					
					var validateArr : Array = ContextManager.templateStruct.validate().array;
					
					if ( validateArr && validateArr.filter( isError ).length > 0 )
						alertProceedRun();
					else
						runTemplate();
					
					function isError( element : *, index : int, arr : Array ) : Boolean
					{
						return (element.error.severity == BasicError.FATAL);
					}
				}
				catch ( e : Error )
				{
					SuperAlert.show( e.message, LanguageManager.sentences['warning'] );
					clearTemplateDebug();
					processStep( cGeneral );
				}
			}
			
			public function alertProceedRun() : void
			{
				SuperAlert.show(
					LanguageManager.sentences['msg_tpl_proceed_with_errs'],
					LanguageManager.sentences['errs_in_tpl'],
					Alert.YES | Alert.NO, null, alertProceedRunHandler, null, Alert.NO );
				
				function alertProceedRunHandler( event : CloseEvent ) : void
				{
					if ( event.detail == Alert.YES )
					{
						runTemplate();
					}
					else
					{
						clearTemplateDebug();
						processStep( cGeneral );
					}
				}
			}
			
			private function runTemplate() : void
			{
				var templateStructure : TemplateStruct = ContextManager.templateStruct;
				try
				{
//					progressBar.mode = ProgressBarMode.MANUAL;
//					progressBar.maximum = templateStructure.nodes.length + 1;
					
					//tpl.isDebug = true;
					//tpl.isStepDebug = true;
					
					templateStructure.addEventListener( "error", debugErrorHandler, false, 0, true);
//					templateStructure.addEventListener( "stepComplete", stepCompleteHandler, false, 0, true );
					templateStructure.addEventListener( "generationComplete", generationComplete );
					templateStructure.addEventListener( TemplateLibEvent.SET_PROGRESS, setProgressHandler, false, 0, true );
					
					
					timer = getTimer();
					
					templateStructure.generate();
				}
				catch ( e : Error )
				{
					Alert.show( e.message, LanguageManager.sentences['warning'] );
					clearTemplateDebug();
					processStep( cGeneral );
				}
			}
			
			private function setProgressHandler( event : TemplateLibEvent) : void
			{
				progressBar.setProgress( event.result.value , 100 );
				progressBar.label =  event.result["description"] as String;
			}
			
			private function debugErrorHandler( event : Event ) : void
			{
				var error : * = event.target.error;
				SuperAlert.show( error.message, LanguageManager.sentences['error'] );
				clearTemplateDebug();
				processStep( cGeneral );
			}
			
			
			private function generationComplete( event : Event ) : void
			{
				timer = getTimer() - timer;
				
				appGenerated = true;
				ContextManager.templateStruct.removeEventListener( "generationComplete", generationComplete );
				ContextManager.templateStruct.removeEventListener( "error", debugErrorHandler );
				
				if ( ContextManager.templateStruct.buffer )
				{
					processStep( cFinal );
				}
				else
				{
					processStep( cComplete );
				}
			}
			
			
			private function onOpenBrowseSelect( event : Event ) : void
			{
				openTemplateFile( event.target as File, onTemplateLoad );
			}
			
			private function openTemplateFile( file : File, handler : Function, fileFilters : Array = null ) : *
			{
				var _file : File = File.applicationDirectory.resolvePath( "assets/template.xml");
				var stream : FileStream = new FileStream();
				
				if ( !_file )
				{
					_file = new File();
					_file.addEventListener( Event.SELECT, handler );
					_file.browseForOpen( LanguageManager.sentences['open_file'], fileFilters );
					return _file;
				}
				else
				{
					if ( _file.isDirectory )
						return null;
					
					if ( !_file.exists )
					{
						SuperAlert.show(
							LanguageManager.sentences['msg_file_not_exists'],
							LanguageManager.sentences['error'] );
						return null;
					}
					
					ProgressManager.source = stream;
					ProgressManager.start();
					
					stream.addEventListener( Event.COMPLETE, handler );
					stream.openAsync( _file, FileMode.READ );
					
					ContextManager.updateLastFiles( _file );
					MenuGeneral.updateLastFilesMenu();
				}
				
				return stream;
			}
			
			private function closeTemplateFile() : void
			{
				clearTemplateDebug();
				
				ContextManager.instance.lastFile = false;
				if ( ContextManager.templates.length > 0 )
					ContextManager.templates.removeItemAt( 0 );
				if ( fileMenuData..menuitem.(hasOwnProperty( '@id' ) && @id == "run_template")[0] )
					fileMenuData..menuitem.(hasOwnProperty( '@id' ) && @id == "run_template")[0].@enabled = 'false';
				processStep( cGeneral ) ;
			}
			
			public function alertInterrupt() : void
			{
//				if ( !appGenerated && ContextManager.templateStruct )
//					ContextManager.templateStruct.removeEventListener( "stepComplete", stepCompleteHandler );
				
				SuperAlert.show(
					LanguageManager.sentences['msg_proceed_interrupt_app_installing'],
					LanguageManager.sentences['question'],
					Alert.YES | Alert.NO, null, alertProceedInterruptHandler, null, Alert.NO );
				
				function alertProceedInterruptHandler( event : CloseEvent ) : void
				{
					if ( event.detail == Alert.YES )
					{
						processStep( cGeneral );
					}
					else if ( !appGenerated && ContextManager.templateStruct )
					{
//						ContextManager.templateStruct.addEventListener( "stepComplete", stepCompleteHandler );
						ContextManager.templateStruct.generate( true );
					}
				}
			}
			
			protected function tplPic_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				trace ("pic creation compl");
			}
			
			protected function tplPic_showHandler(event:FlexEvent):void
			{
				trace ("pic show");
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				openTemplateFile(null,onTemplateLoad);
			}
			
			protected function window_mouseDownHandler(event:MouseEvent):void
			{
				if (event.target is FlexLoader)
				{
					event.stopImmediatePropagation();
					nativeWindow.startMove();
				}
			}
			
		]]>
	</mx:Script>

	<mx:HBox height="10" width="100%"
			 verticalAlign="bottom" horizontalAlign="right"
			 horizontalGap="20">
		
		<mx:Spacer width="100%"/>
		
		<mx:Button skin="{MinimizeButtonSkin}" 
				   click="{nativeWindow.minimize()}" 
				   focusEnabled="false"/>
		<mx:Button skin="{MaximizeButtonSkin}" 
				   click="{if (nativeWindow.maximizable) nativeWindow.maximize()}" 
				   alpha="{nativeWindow.maximizable ? 1 : 0.5}"
				   focusEnabled="false"/>
		<mx:Button skin="{CloseButtonSkin}" 
				   click="{nativeWindow.close()}"
				   focusEnabled="false"/>
		
		<mx:Spacer width="10"/>
	</mx:HBox>
		
	<mx:VBox height="100%" width="100%">
		
		<!--mx:MenuBar id="mnMain" width="100%" dataProvider="{fileMenuData.menuitem}" labelFunction="labelFunction"
					showRoot="false"
					itemClick="onMenuClick(event);"></mx:MenuBar-->
		
		<mx:HBox width="100%" height="100%" verticalAlign="top" horizontalAlign="left"
				 paddingTop="26" paddingRight="10" paddingLeft="40" paddingBottom="10" verticalGap="0">
			<controls:Base64Image id="tplPic"  x="14"
								  width="220" height="100%"
								  value="{resources.strLogo}"  
								  showEffect="{picShow}"
								  scaleContent="true" maintainAspectRatio="true"
								  verticalAlign="top" horizontalAlign="right"/>
			<mx:VBox height="100%" width="100%" horizontalAlign="right" >
				
				<mx:ViewStack id="vsProcess" width="100%" height="100%" creationPolicy="all" change="vsChange(event)" paddingTop="0">
					
					
					<mx:VBox id="cKeyRequest" height="100%" width="100%"
							 verticalAlign="top" horizontalAlign="left"
							 showEffect="{canvasShow}" hideEffect="{canvasHide}" verticalGap="0">
			
						<mx:Label width="90%" 
									  text="{ContextManager.templates.getItemAt(0).name}"
									  styleName="headerLabel"/>
						<!--<mx:Label  width="90%" height="100%"
									 text="{ContextManager.templates.getItemAt(0).description}" 
									 styleName="infoTextStyle"/>-->
						<mx:TextArea width="450" height="100"
									 text="{ContextManager.templates.getItemAt(0).description}" 
									 styleName="infoTextStyle"
									 editable="false" selectable="false" focusEnabled="false"
									 backgroundAlpha="0" borderStyle="none"/>
						
						<mx:Spacer height="5"/>
						<mx:Label text="{LanguageManager.sentences.msg_input_template_key}:" />
						<mx:TextInput width="90%" id="txtKey" styleName="edtTextStyle" />
						
						<mx:ControlBar width="90%" horizontalAlign="right">
							
							<control:PowerPackInstallerButton id="btnAcceptKey" label="{LanguageManager.sentences.accept}"
									   click="onKeyAccept(event)"/>
						</mx:ControlBar>
					</mx:VBox>
					
					<mx:VBox id="cGeneral" height="100%" width="100%"
							 verticalAlign="top" horizontalAlign="left"
							 showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:Label width="90%" 
									  text="{ContextManager.templates.getItemAt(0).name}"
									  styleName="headerLabel" />
						<!--<mx:Label  width="450" height="100%" 
									 text="{ContextManager.templates.getItemAt(0).description}"
									 styleName="infoTextStyle"/>-->
						<mx:TextArea width="450" height="150"
									 text="{ContextManager.templates.getItemAt(0).description}" 
									 styleName="infoTextStyle"
									 editable="false" selectable="false" focusEnabled="false"
									 backgroundAlpha="0" borderStyle="none"/>
						
						<mx:ControlBar width="90%" horizontalAlign="right">
							
							<control:PowerPackInstallerButton id="btnRun" 
															  label="{LanguageManager.sentences.run}"
									   						  click="processStep(1)"/>
						</mx:ControlBar>
					</mx:VBox>
					
					
					
					
					<mx:VBox id="cProcess" height="100%" width="100%"
							 verticalAlign="top" horizontalAlign="center"
							 showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:Label width="90%" 
									  text="{ContextManager.templates.getItemAt(0).name}"
									  styleName="headerLabel"/>
						
						<mx:ViewStack id="vsImages" 
									  change="vsChange(event)">
							<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom" horizontalGap="0"
									 showEffect="canvasShow" hideEffect="canvasHide">
								
							</mx:HBox>
							
							<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom" horizontalGap="0"
									 showEffect="canvasShow" hideEffect="canvasHide">
								
							</mx:HBox>
							
							<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom" horizontalGap="0">
							
							</mx:HBox>
							
							
							<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom" horizontalGap="0"
									 showEffect="canvasShow" hideEffect="canvasHide">
								
							</mx:HBox>
						</mx:ViewStack>
						<mx:Spacer width="100%" height="100%" />
						
						
						<mx:ProgressBar width="90%" minimum="0" maximum="100" id="progressBar" mode="manual" />
							
						<mx:ControlBar horizontalAlign="right" width="90%">
							
							<control:PowerPackInstallerButton id="btnCancel" label="{LanguageManager.sentences.cancel}"
									   click="alertInterrupt()" />
						</mx:ControlBar>
					
						
						
					</mx:VBox>
					
					<mx:VBox id="cComplete" height="100%" width="100%"
							 verticalAlign="top" horizontalAlign="left"
							 showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:Label text="{LanguageManager.sentences.gen_result}:" />
						<mx:TextArea id="txtResultBuf" editable="false" width="90%" height="250"
									 text="" />
						<mx:ControlBar width="90%" horizontalAlign="right">
							<control:PowerPackInstallerButton id="btnNext" label="{LanguageManager.sentences.next}"
									   click="processStep(cFinal)" />
						</mx:ControlBar>
					</mx:VBox>
					
					<mx:VBox id="cFinal" height="100%" width="100%"
							 verticalAlign="top" horizontalAlign="left"
							 showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:Label width="90%" 
								  text="{ContextManager.templates.getItemAt(0).name}"
								  styleName="headerLabel"/>
						
						<mx:Text styleName="infoTextStyle" width="90%"
								 text="{LanguageManager.sentences.msg_gen_finish}">
						</mx:Text>
						<mx:Spacer height="100%" />
						<mx:ControlBar width="90%" horizontalAlign="right">
							<control:PowerPackInstallerButton id="btnExit"
									   label="{LanguageManager.sentences.exit}"
									   click="exitApplication();" />
						</mx:ControlBar>
					</mx:VBox>
					
				</mx:ViewStack>
				
			</mx:VBox>
		</mx:HBox>
		
		<mx:HBox id="bottomPanel" bottom="0" 
				 width="100%" height="40" 
				 backgroundColor="#464646" 
				 verticalAlign="middle">
			
			<mx:Spacer width="5"/>
			<mx:Image source="@Embed(source='assets/images/powerpack_sign.png')" 
					  smoothBitmapContent="true"
					  verticalAlign="middle"/>
			
			<mx:Spacer width="100%"/>
			<mx:Image source="@Embed(source='assets/images/txt_logo.png')" 
					  width="160" height="20" 
					  smoothBitmapContent="true"
					  verticalAlign="middle"/>
			<mx:Spacer width="5"/>
		</mx:HBox>
	</mx:VBox>
	
		
</mx:WindowedApplication>
