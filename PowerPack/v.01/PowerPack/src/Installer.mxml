<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
		xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns:customize="net.vdombox.powerpack.customize.*"
		width="739" height="388" verticalAlign="middle" horizontalAlign="center" layout="absolute"
		showStatusBar="false" showGripper="false" showTitleBar="false"
		applicationComplete="applicationCompleteHandler(event)"

		xmlns:controls="net.vdombox.powerpack.lib.extendedapi.controls.*"
		creationComplete="creationCompleteHandler(event)" horizontalScrollPolicy="off"
		verticalScrollPolicy="off"
		xmlns:control="net.vdombox.powerpack.control.*"
		styleName="installerWindowStyle" xmlns:powerpack="net.vdombox.powerpack.*" xmlns:player="net.vdombox.powerpack.lib.player.*">

	<mx:Style source="assets/style/style.css"/>

	<mx:Script><![CDATA[
		import mx.core.Application;
		import mx.core.FlexLoader;
		import mx.events.FlexEvent;
		
		import net.vdombox.powerpack.lib.player.customize.skins.CloseButtonSkin;
		import net.vdombox.powerpack.lib.player.customize.skins.MaximizeButtonSkin;
		import net.vdombox.powerpack.lib.player.customize.skins.MinimizeButtonSkin;
		import net.vdombox.powerpack.lib.player.managers.ContextManager;
		import net.vdombox.powerpack.lib.player.managers.LanguageManager;
		import net.vdombox.powerpack.lib.player.popup.AlertPopup;
		import net.vdombox.powerpack.lib.player.utils.RuntimeUtils;
		import net.vdombox.powerpack.managers.BuilderContextManager;
		import net.vdombox.powerpack.managers.ProgressManager;
		//import net.vdombox.powerpack.menu.MenuGeneral;

		private function show():void
		{
			addEventListener ( Event.CLOSING, closingApplicationHandler );

			function closingApplicationHandler( event:Event ):void
			{
				event.preventDefault ();
				exitApplication ();
			}


			var file:File;
			var fileStream:FileStream;

			for each ( file in [BuilderContextManager.instance.dataStorage, BuilderContextManager.instance.settingStorage] )
			{
				if ( !file.exists ) file.createDirectory ();
			}

			// Load application settings
			BuilderContextManager.loadSettings ();

			// Load language file
			/*file = File.applicationDirectory.resolvePath ( MenuGeneral.LANG_FOLDER + ContextManager.instance.lang.file );
			if ( file && file.exists )
			{
				fileStream = new FileStream ();
				fileStream.addEventListener ( Event.COMPLETE, onLanguageLoad );
				fileStream.openAsync ( file, FileMode.READ );
			}*/

		}

		private function onLanguageLoad( event:Event ):void
		{
			var fileStream:FileStream = event.target as FileStream;
			var xml:XML = XML ( fileStream.readUTFBytes ( fileStream.bytesAvailable ) );
			fileStream.close ();

			LanguageManager.languageXML = xml;
			ContextManager.instance.lang.label = LanguageManager.languageXML.@label.toLowerCase ();
			ContextManager.instance.lang.file = LanguageManager.languageXML.@data;
		}

		private function exitApplication( event:Event = null ):void
		{

			BuilderContextManager.saveSettings ();
			exit ();
		}

		protected function creationCompleteHandler( event:FlexEvent ):void
		{
			openTemplateFile ( null, onTemplateLoad );

			var window:Object = Application.application
			var screen:Screen = Screen.getScreensForRectangle ( nativeWindow.bounds )[ 0 ];

			window.move ( Math.max ( screen.bounds.width / 2 - window.width / 2, 0 ), Math.max ( screen.bounds.height / 2.5 - window.height / 2, 0 ) );
		}

		private function openTemplateFile( file:File, handler:Function, fileFilters:Array = null ):*
		{
			var _file:File = File.applicationDirectory.resolvePath ( "assets/template.xml" );
			var stream:FileStream = new FileStream ();

			if ( !_file )
			{
				_file = new File ();
				_file.addEventListener ( Event.SELECT, handler );
				_file.browseForOpen ( LanguageManager.sentences['open_file'], fileFilters );
				return _file;
			}
			else
			{
				if ( _file.isDirectory )
					return null;

				if ( !_file.exists )
				{
					AlertPopup.show (
							LanguageManager.sentences['msg_file_not_exists'],
							LanguageManager.sentences['error'] );
					return null;
				}

				ProgressManager.source = stream;
				ProgressManager.start ();

				stream.addEventListener ( Event.COMPLETE, handler );
				stream.openAsync ( _file, FileMode.READ );

				BuilderContextManager.updateLastFiles ( _file );
				//MenuGeneral.updateLastFilesMenu ();
			}

			return stream;
		}

		private function onTemplateLoad( event:Event ):void
		{
			var fileStream:FileStream = event.target as FileStream;
			var xml:XML = XML ( fileStream.readUTFBytes ( fileStream.bytesAvailable ) );

			fileStream.close ();

			player.dataProvider = xml;
		}
		
		protected function player_mouseDownHandler(event:MouseEvent):void
		{
			nativeWindow.startMove();
		}
		
		
		protected function applicationCompleteHandler(event:FlexEvent):void
		{
			addGlobalErrorListener();
			
			show();
		}
		
		private function addGlobalErrorListener () : void
		{
			loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);
		}
		
		private function uncaughtErrorHandler(event:UncaughtErrorEvent):void
		{
			var errorMsg : String = "";
			
			if (event.error is Error)
			{
				var error:Error = event.error as Error;
				errorMsg = error.message.toString(); 
			}
			else if (event.error is ErrorEvent)
			{
				var errorEvent:ErrorEvent = event.error as ErrorEvent;
				errorMsg = RuntimeUtils.getRuntimeErrorMessageByID(errorEvent.errorID);
			}
			
			if (!errorMsg && event.error) 
				errorMsg = event.error.toString();
			
			AlertPopup.show(errorMsg, "Error:");
		}
		
	]]></mx:Script>
	
	<!-- WEB player (new, not full functionality)-->
	<player:Player id="player"  
				   isDesktopApplication="true"
				   mouseDown="player_mouseDownHandler(event)"
				   maximizable="{nativeWindow.maximizable}"
				   minimizable="true"
				   closable="true"
				   close="nativeWindow.close()"
				   minimize="nativeWindow.minimize()"
				   maximize="nativeWindow.maximize()"/>
	
	<!--<mx:HBox right="14" y="17"
			 height="10" width="100%"
			 verticalAlign="bottom" horizontalAlign="right"
			 horizontalGap="20">

		<mx:Spacer width="100%"/>

		<mx:Button skin="{MinimizeButtonSkin}"
				   click="{nativeWindow.minimize()}"
				   focusEnabled="false"/>
		<mx:Button skin="{MaximizeButtonSkin}"
				   click="{if (nativeWindow.maximizable) nativeWindow.maximize()}"
				   alpha="{nativeWindow.maximizable ? 1 : 0.5}"
				   focusEnabled="false"/>
		<mx:Button skin="{CloseButtonSkin}"
				   click="{nativeWindow.close()}"
				   focusEnabled="false"/>

		<mx:Spacer width="10"/>
	</mx:HBox>-->
	
</mx:WindowedApplication>
