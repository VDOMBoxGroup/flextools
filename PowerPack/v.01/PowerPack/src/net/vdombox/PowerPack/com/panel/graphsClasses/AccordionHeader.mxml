<?xml version="1.0" encoding="utf-8"?>
<CanvasButtonAccordionHeader
	xmlns="flexlib.containers.accordionClasses.*" 
	xmlns:flexlib="http://code.google.com/p/flexlib/" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off"
	doubleClickEnabled="true" 
	mouseChildren="true"
	dragEnter="dragEnterHandler(event);"
	dragDrop="dragDropHandler(event);"
	creationComplete="show();">
	
	<mx:Script>
		<![CDATA[
			import ExtendedAPI.com.containers.SuperAlert;
			
			import net.vdombox.PowerPack.com.graph.GraphCanvas;
			import net.vdombox.PowerPack.com.managers.LanguageManager;
			import net.vdombox.PowerPack.com.panel.Graphs;
			
			import mx.binding.utils.BindingUtils;
			import mx.containers.Accordion;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.core.Container;
			import mx.core.EdgeMetrics;
			import mx.core.FlexTextField;
			import mx.core.IUIComponent;
			import mx.core.IUITextField;
			import mx.core.UITextField;
			import mx.core.Window;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.utils.ArrayUtil;
			
		    //--------------------------------------------------------------------------
		    //
		    //  Class variables and constants
		    //
		    //--------------------------------------------------------------------------
    		
			
			//----------------------------------
		    //  labelTextField
		    //----------------------------------
		
			/**
		     *  A reference to the UITextField that displays the status bar's text.
		     */
		    private var labelTextField:IUITextField;
		    
		    public var txtInput:TextInput;	
		    
		    private var _isEditing:Boolean;		
    
		    //--------------------------------------------------------------------------
			//
			//  Properties
			//
			//--------------------------------------------------------------------------
		
		    //----------------------------------
		    //  label
		    //----------------------------------
    			
			[Bindable]
			private var _label:String;
			
			override public function set label(value:String):void 
			{
				if(_label!=value)
				{
					super.label = "";
				
					_label = value;
					
					if(labelTextField)
						labelTextField.text = _label;
					
					if(txtInput)
						txtInput.text = _label;
				}
			}
	
			//--------------------------------------------------------------------------
			//
			//  Overridden methods
			//
			//--------------------------------------------------------------------------	
			    
			override protected function createChildren():void
			{
       			super.createChildren();
       			
       			if (!labelTextField)
			    {
			        labelTextField = IUITextField(createInFontContext(UITextField));
			        labelTextField.text = _label;
			        labelTextField.styleName = getStyle("labelTextStyleName");
			        labelTextField.enabled = true;
			        labelTextField.doubleClickEnabled = true;
			        labelTextField.addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
			        
			        boxHeader.addChildAt(DisplayObject(labelTextField), 0);
		    	}
		    	if(!txtInput)
		    	{
		    		txtInput = new TextInput();
		    		txtInput.text = _label;
		    		txtInput.styleName = getStyle("inputTextStyleName");
		    		txtInput.addEventListener(FocusEvent.FOCUS_OUT, endEdit);
		    		txtInput.addEventListener(FlexEvent.ENTER, endEdit);
		    		txtInput.addEventListener(KeyboardEvent.KEY_DOWN, endEdit);
		    		txtInput.addEventListener(FocusEvent.FOCUS_IN, onFocus);
		    		
		    		function onFocus(event:Event):void {
		    			event.stopPropagation();
		    		}
		    	}
   			}
   			
   			override protected function measure():void
			{
				super.measure();
				
				var parentMetrics:EdgeMetrics = Container(parent).viewMetricsAndPadding;
				var parentContentArea:Object = {	
					w: Container(parent).getExplicitOrMeasuredWidth() - parentMetrics.left - parentMetrics.right,
					h: Container(parent).getExplicitOrMeasuredHeight() - parentMetrics.top - parentMetrics.bottom };
				
				measuredWidth = parentContentArea.w;
   			}

		    /**
		     *  @private
		     */
			override protected function updateDisplayList(unscaledWidth:Number,
														  unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				boxHeader.setActualSize(unscaledWidth, unscaledHeight);
				
				var boxEdges:EdgeMetrics = boxHeader.viewMetricsAndPadding;
				cbarHeader.move(boxHeader.width - boxEdges.left - boxEdges.right - cbarHeader.getExplicitOrMeasuredWidth(), cbarHeader.y);
								
				if(labelTextField.parent) {
					lblFieldResize();
				}
				
				if(txtInput.parent) {
					edtFieldResize();				
				}
			}
	
			//--------------------------------------------------------------------------
			//
			//  Class methods
			//
			//--------------------------------------------------------------------------
			
			private function show():void
			{
				//
			}
			
			public function beginEdit():void
			{
				if(_isEditing)
					return;
				
				_isEditing = true;
				
				if(labelTextField.parent)
					boxHeader.removeChild(DisplayObject(labelTextField));

				boxHeader.addChildAt(txtInput, 0);
				edtFieldResize();
				txtInput.setFocus();				

				invalidateDisplayList();
			}
			
			public function endEdit(event:Event):void
			{				
				if(!_isEditing)
					return;
				
				var bCommit:Boolean = true;
				var bEndEdit:Boolean = true;
				
				if(event is KeyboardEvent)
				{
				    if(KeyboardEvent(event).charCode == 27) // escape
				    {
		    			bCommit = false;
						bEndEdit = true;
		    		}
				    else if(KeyboardEvent(event).charCode == 13) // enter
				    {
		    			bCommit = true;
						bEndEdit = true;
				    }
					else
						bEndEdit = false;
		  		}
				
				if(bEndEdit)
				{		   
					_isEditing = false;
					
					var accordChild:AccordionChild = data as AccordionChild;
					 	
					if(bCommit) {
						label = txtInput.text;
						accordChild.label = txtInput.text;
					}
					else {
						txtInput.text = _label;
					}
					
					if(txtInput.parent)
						boxHeader.removeChild(txtInput);
					
					boxHeader.addChildAt(DisplayObject(labelTextField), 0);
					lblFieldResize();
					
					invalidateDisplayList();
					
					if(bCommit)
						accordChild.dispatchEvent(new GraphsAccordionEvent(GraphsAccordionEvent.CAPTION_CHANGED));
				}
			}
							   
   			private function getTxtFieldWidth():int
   			{
   				var boxEdges:EdgeMetrics = boxHeader.viewMetricsAndPadding; 
   				var width:int = boxHeader.width - cbarHeader.getExplicitOrMeasuredWidth()-
   					boxEdges.left - boxEdges.right;
   				
   				return width;
   			}
   			
   			private function lblFieldResize():void
   			{
   				var lblWidth:int = getTxtFieldWidth();
   				labelTextField.text = _label;
   				labelTextField.x = 2;
   				labelTextField.y = (boxHeader.height - labelTextField.textHeight)/2-2;
   				labelTextField.width = lblWidth-labelTextField.x;
   				
   				if(labelTextField.x+labelTextField.textWidth>lblWidth)
   					labelTextField.truncateToFit("...");
   			}
   			
   			private function edtFieldResize():void
   			{
   				var edtWidth:int = getTxtFieldWidth();
   				
   				txtInput.width = edtWidth;
   			}   			
			
			//--------------------------------------------------------------------------
		    //
		    //  Event handlers
		    //
		    //--------------------------------------------------------------------------
			
			private function doubleClickHandler(event:Event):void
			{
				beginEdit();
			}
			
		    /**
		     *  @private
		     */
		    private function closeTabHandler(event:Event):void
		    {
	        	var accordChild:AccordionChild = data as AccordionChild;
		        	
		    	event.stopPropagation();
		    	
		        var e : Event = new GraphsAccordionEvent(GraphsAccordionEvent.TAB_CLOSING, null, true, true);
		        accordChild.dispatchEvent(e);
		        
				if (e.isDefaultPrevented())
		        {
		            event.preventDefault();
		        }
		        else 
		        {
		            event.preventDefault();
		            accordChild.parent.removeChild(accordChild);
		            accordChild.dispatchEvent(new GraphsAccordionEvent(GraphsAccordionEvent.TAB_CLOSE));
		        }
		    }
		
		    private function dragEnterHandler(event:DragEvent):void
		    {
	            if (	event.dragSource.hasFormat("items") && 
			            event.dragSource.dataForFormat("items") &&
	            		(event.dragSource.dataForFormat("items") as Array).length>0)
	            {
	            	if(	(event.dragSource.dataForFormat("items") as Array)[0] is GraphCanvas &&
	            		event.target.data.lstGraphs != event.dragInitiator)
	            	{
	                	DragManager.acceptDragDrop(IUIComponent(event.target));
		                DragManager.showFeedback(DragManager.MOVE);
		            }
	            }	    	
		    }
		    
		    private function dragDropHandler(event:DragEvent):void
		    {
		    	var items:Array = event.dragSource.dataForFormat("items") as Array;
		    	
		    	if (items[0] is GraphCanvas)
		    	{
		    		var graph:GraphCanvas = items[0] as GraphCanvas;
		    		var source:AccordionChild = AccordionChild(event.dragInitiator.parent);
		    		var destination:AccordionChild = AccordionChild(event.target.data);
					
					source.graphs.removeItemAt(source.graphs.getItemIndex(graph));
					graph.category = destination.label;					
					destination.graphs.addItem(graph);
					
					var evt : GraphsAccordionEvent = new GraphsAccordionEvent(GraphsAccordionEvent.SELECTED_GRAPH_CHANGED, graph); 
					destination.dispatchEvent(evt);
		    	}
		    }
		        	    			
		]]>
	</mx:Script>
	
	<mx:Canvas id="boxHeader">

		<mx:ControlBar id="cbarHeader" horizontalAlign="right" paddingTop="2" paddingBottom="2" paddingRight="2" paddingLeft="2">
		
			<flexlib:CanvasButton 
				paddingTop="0"
				paddingLeft="0"
				paddingBottom="0"
				paddingRight="0"
				cornerRadius="2"
				click="closeTabHandler(event);">
				<mx:Label text="x"/>
			</flexlib:CanvasButton>
		
		</mx:ControlBar>
		
	</mx:Canvas>
		
</CanvasButtonAccordionHeader>
