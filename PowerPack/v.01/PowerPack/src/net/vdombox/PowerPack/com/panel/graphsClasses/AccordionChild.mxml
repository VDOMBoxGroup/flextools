<?xml version="1.0" encoding="utf-8"?>
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%"
	initialize="init()">

	<mx:Script>
		<![CDATA[
			import net.vdombox.PowerPack.com.gen.parse.CodeParser;
			import net.vdombox.PowerPack.com.graph.GraphCanvas;
			import net.vdombox.PowerPack.com.managers.LanguageManager;
			import net.vdombox.PowerPack.com.panel.Graphs;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.core.UIComponent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.ListEvent;
			import mx.events.ListEventReason;
			
			[Bindable]
			public var graphs:ArrayCollection = new ArrayCollection();
			
			private var _newGraphName : String = "";
			
			private static const ERROR_TYPE_UNIQUE_NAME : int = 1;
			private static const ERROR_TYPE_VALID_NAME	: int = 0;
			//--------------------------------------------------------------------------
			//
			//  Class methods
			//
			//--------------------------------------------------------------------------	
						
			private function init():void
			{				
				graphs.addEventListener(CollectionEvent.COLLECTION_CHANGE, onGraphsChange);	
			}
			
			public function get newGraphName () : String
			{
				return _newGraphName;
			}
			
			public function get listItemEditorInstance () : GraphThumb
			{
				return lstGraphs.itemEditorInstance as GraphThumb;
			}
			
			public function get editedItemRenderer () : IListItemRenderer
			{
				return lstGraphs.editedItemRenderer;
			}
			
			public function set uniqueGraphName (unique : Boolean) : void
			{
				if (!unique)
				{
					applyErrorItemRendererName(ERROR_TYPE_UNIQUE_NAME);
					return;
				}
				
				editedItemRenderer.data.name = _newGraphName;
				
				destroyListItemEditor();
				
				lstGraphs.dataProvider.notifyItemUpdate(editedItemRenderer);
				
				var evnt : GraphsAccordionEvent = new GraphsAccordionEvent( GraphsAccordionEvent.GRAPH_VALUE_EDITING_COMPLETE);
				lstGraphs.dispatchEvent(evnt);
			}
			            
            private function beginEdit(event:ListEvent):void 
            { 
				lstGraphs = event.target as List;
				
            	event.preventDefault();
				
				if (editedItemRenderer)
					editedItemRenderer.visible = false;
				
				createListItemEditor(event.columnIndex, event.rowIndex);
           	}
            
			private function endEdit(event:ListEvent):void 
            {    
                event.preventDefault();	
				
				listItemEditorInstance.txtThumb.errorString = null;
                
				_newGraphName = listItemEditorInstance.txtThumb.text;
                
                if (event.reason == ListEventReason.CANCELLED)
                {
                    // Do not update item.
	                // Close the cell editor.
					destroyListItemEditor();
                	return;
                }
            	
            	// Disable copying data back to the control.
                if(CodeParser.ParseSubgraphNode(_newGraphName).error)
                {	      
					event.stopImmediatePropagation();
					
					applyErrorItemRendererName();
					
					return;
            	}          
				
				var evnt : GraphsAccordionEvent = new GraphsAccordionEvent( GraphsAccordionEvent.GRAPH_VALUE_CHECKED);
				lstGraphs.dispatchEvent(evnt);
            }

			private function createListItemEditor(columnIndex:int, rowIndex:int):void
			{
				lstGraphs.createItemEditor(columnIndex, rowIndex); 
				
				listItemEditorInstance.editable = true;
				
				listItemEditorInstance.data = lstGraphs.selectedItem;
				
				listItemEditorInstance.txtThumb.setFocus();
				listItemEditorInstance.txtThumb.setSelection(0, listItemEditorInstance.txtThumb.text.length);
			}
			
			private function destroyListItemEditor():void
			{
				lstGraphs.visible = true;
				lstGraphs.destroyItemEditor();
				lstGraphs.editable = false;
			}
			
			private function applyErrorItemRendererName(errorType : Number = ERROR_TYPE_VALID_NAME):void
			{
				listItemEditorInstance.txtThumb.errorString = (errorType == ERROR_TYPE_VALID_NAME) ? LanguageManager.sentences['msg_enter_valid_graph_name'] : LanguageManager.sentences['msg_enter_unique_graph_name'];
				listItemEditorInstance.txtThumb.setFocus();
			}
			
			//--------------------------------------------------------------------------
		    //
		    //  Event handlers
		    //
		    //--------------------------------------------------------------------------
			
			public function onGraphsChange(event:CollectionEvent):void	
			{
				if(!event || event.kind!=CollectionEventKind.REFRESH)
				{
					var sort:Sort = new Sort();
     				sort.fields = [new SortField('name', true)];
     			
     				graphs.sort = sort;
       				graphs.refresh();
    			}
			}            
		]]>
	</mx:Script>
			
	<mx:List id="lstGraphs"		
		width="100%" height="100%" 
		allowMultipleSelection="false" 
		textAlign="center" 
		borderStyle="none"
		dataProvider="{graphs}"
		labelField="name"
		dragEnabled="true"
		allowDragSelection="true"
		alternatingItemColors="[#FFFFFF, #f6f6f6]"
		doubleClickEnabled="true"
		itemRenderer="net.vdombox.PowerPack.com.panel.graphsClasses.GraphThumb"
		itemEditor="net.vdombox.PowerPack.com.panel.graphsClasses.GraphThumb"
		editorDataField="returnText"
		itemEditBegin="beginEdit(event);"
		itemEditEnd="endEdit(event);"></mx:List>

</mx:VBox>
