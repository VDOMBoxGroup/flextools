<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:powerpackscript="net.vdombox.powerpack.powerpackscript.*"
		  removedFromStage="removedFromStageHandler(event)">
	<mx:Script>
		<![CDATA[
			import flash.display.DisplayObjectContainer;
			
			import flexunit.utils.ArrayList;
			
			import mx.charts.HitData;
			import mx.controls.List;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			public static const TITLE_FUNCTIONS				: String = "Functions:"
			public static const TITLE_WHOLE_FUNCTIONS		: String = "wholeMethod functions:"
			public static const TITLE_VARIABLES				: String = "Variables:"
			public static const TITLE_GRAPHS				: String = "Graphs:"
			public static const TITLE_DIALOG_TYPES			: String = "Dialog types:"
			
			private var _listData : Array;
			
			public function set listData( value : Array ) : void
			{
				if (!value || value.length == 0)
				{
					_listData = null;
					return;
				}
				
				if ( value[0].hasOwnProperty( "label" ) )
					value.sortOn("label", Array.CASEINSENSITIVE);
				else
					value.sort();
				
				_listData = value;
			}
			
			[Bindable]
			public function get listData () : Array
			{
				return _listData;
			}
			
			public function get selectedValue() : String
			{
				if (!list || !list.selectedItem)
					return "";
				
				return list.selectedItem.hasOwnProperty( "data" ) ? list.selectedItem["data"] : list.selectedItem.toString();
			}
			
			public function get selectedTipValue() : String
			{
				if (!list || !list.selectedItem)
					return "";
				
				return list.selectedItem.hasOwnProperty( "description" ) ? list.selectedItem["description"] : "";
			}
			
			public function show( owner : DisplayObjectContainer, x : int, y : int ) : void
			{
				this.x = x;
				this.y = y;
				
				PopUpManager.addPopUp( this, owner );
			}
			
			private var _listWidth : int;
			
			public function set listWidth (value : int) : void
			{
				_listWidth = value;
			}
			
			[Bindable]
			public function get listWidth () : int
			{
				minWidth = 80;
				
				if (!listData)
					return 1;
				
				var maxItemLabelLength : Number = 1;
				
				for each (var itemData:Object in listData)
				{
					var labelText : String = itemData.hasOwnProperty( "label" ) ? itemData["label"] : itemData.toString();
					
					if (labelText.length > maxItemLabelLength)
						maxItemLabelLength = labelText.length;
				}
				
				_listWidth = maxItemLabelLength * 8 > minWidth ? maxItemLabelLength * 8 : minWidth;
				
				return _listWidth;
			}
			
			public function dispose() : void
			{
				PopUpManager.removePopUp( this );
			}
			
			public function get selectedRowY () : Number
			{
				return list.cursorManager.currentCursorYOffset;
			}
			
			private var assistTooltip : AssistMenuTooltip = new AssistMenuTooltip();
			
			public function showTooltip () : void
			{
				assistTooltip.data = selectedTipValue;
				
				if (!assistTooltip.data)
				{
					hideTooltip();
					return;
				}
				
				var point : Point = list.rowTopRightPoint;
				point = list.contentToGlobal(point);
				
				var distance : int = 5;
				
				var defX : Number = point.x+distance;
				var defY : Number = point.y+distance;
				
				if (assistTooltip.isShowing)
				{
					assistTooltip.defaultX = defX;
					assistTooltip.defaultY = defY;
					
					assistTooltip.invalidateDisplayList();
					return;
				}
				
				assistTooltip.show(this, defX, defY);
			}
			
			public function hideTooltip () : void
			{
				assistTooltip.data = "";
				
				if (!assistTooltip.isShowing)
					return;
				
				assistTooltip.dispose();
			}
			
			protected function removedFromStageHandler(event:Event):void
			{
				hideTooltip();
			}
			
			protected function list_changeHandler(event:ListEvent):void
			{
				showTooltip();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				if (x+width > screen.width)
					x -= width;
				
				if (y+height > screen.height)
					y -= height;            
			}

		]]>
	</mx:Script>
	
	<powerpackscript:AssistList id="list"
								 height="100%"
								 width="{listWidth}"
								 dataProvider="{listData}"
								 selectedIndex="-1"
								 labelField="label"
								 change="list_changeHandler(event)"/>
		
</mx:Panel>
