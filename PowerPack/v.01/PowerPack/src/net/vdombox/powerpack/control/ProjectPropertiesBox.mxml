<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:controls="net.vdombox.powerpack.lib.extendedapi.controls.*"
		 horizontalAlign="left" xmlns:customize="net.vdombox.powerpack.customize.*"
		 verticalScrollPolicy="off" horizontalScrollPolicy="off"
		 initialize="initializeHandler(event)"
		 creationComplete="creationCompleteHandler(event)"
		 show="showHandler(event)"
		 visible="false">
	
	<customize:TemplateDefaultLogo id="defaultLogo" />
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.utils.StringUtil;
			
			import net.vdombox.powerpack.dialog.BrowseApplicationsDialog;
			import net.vdombox.powerpack.dialog.ModalDialog;
			import net.vdombox.powerpack.graph.GraphCanvas;
			import net.vdombox.powerpack.lib.extendedapi.utils.FileToBase64;
			import net.vdombox.powerpack.lib.extendedapi.utils.FileUtils;
			import net.vdombox.powerpack.lib.player.managers.ContextManager;
			import net.vdombox.powerpack.lib.player.managers.LanguageManager;
			import net.vdombox.powerpack.panel.Graphs;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerParamsChecker;
			import net.vdombox.powerpack.template.BuilderTemplateProject;
			
			public static const EVENT_INITIAL_GRAPH_CHANGED : String = "initialGraphChanged";
			
			private var compilerParamsChecker	: SDKCompilerParamsChecker = SDKCompilerParamsChecker.getInstance();
			
			[Bindable]
			public var graphs : ArrayCollection;
			
			public var project  : BuilderTemplateProject;
			
			public var embeddedApplications : Array;
			
			public function get templateB64Picture() : String
			{
				if (!b64Img || !b64Img.value)
					return null;
			
				return b64Img.value;
			}
			
			public function set templateB64Picture(base64Pic : String) : void
			{
				b64Img.value = base64Pic; 
			}
			
			protected function onPicBrowseClick(event:MouseEvent):void
			{
				var file : File = new File();
				
				file.addEventListener(Event.SELECT, onPicFileSelect);
				
				var fileFilter : FileFilter = new FileFilter(LanguageManager.sentences.template_images, FileUtils.getImagesFileExtension());
				
				file.browseForOpen(LanguageManager.sentences.select_file, [fileFilter]);
			}
			
			private function onPicFileSelect(evt:Event):void
			{
				var file:File = evt.target as File;
				
				file.removeEventListener(Event.SELECT, onPicFileSelect); 
				
				var fileToBase64 : FileToBase64 = new FileToBase64( file.nativePath );
				fileToBase64.convert();
				
				showBase64Picture(fileToBase64.data.toString());
			}
			
			protected function onUsePictureSelectionChanged(event:Event):void
			{
				useTemplatePicture = usePictureCheckBox.selected;
			}
			
			private function set useTemplatePicture (usePicture : Boolean) : void
			{
				if (usePicture)
				{
					showTemplatePicture();
				}
				else
				{
					hideTemplatePicture();
				}
			}
			
			private function showTemplatePicture():void
			{
				pictureGridRow.visible = true;
				pictureGridRow.includeInLayout = true;
				
				if ( project.picture )
				{
					showBase64Picture( project.picture );
				}
				else
				{
					showDefaultPicture();
				}
				
			}
			
			private function hideTemplatePicture():void
			{
				hideBase64Picture();
				
				pictureGridRow.visible = false;
				pictureGridRow.includeInLayout = false;
			}
			
			private function showBase64Picture( imageSource : String ) : void
			{
				b64Img.width = 98;
				b64Img.height = 98;
				
				templateB64Picture = imageSource;
				
				b64Img.addEventListener("sourceChanged", onBase64ImageScaleContentChanged);
				
				b64Img.visible = true;
				b64Img.includeInLayout = true;
			}
			
			private function onBase64ImageScaleContentChanged(evt:Event):void
			{
				if (b64Img.source && b64Img.source is Bitmap)
				{
					b64Img.removeEventListener("sourceChanged", onBase64ImageScaleContentChanged);
					
					var sourceBitmapData : BitmapData = b64Img.source.bitmapData; 
					
					if (sourceBitmapData.width < b64Img.width && sourceBitmapData.height < b64Img.height)
					{
						b64Img.width = sourceBitmapData.width;
						b64Img.height = sourceBitmapData.height;
					}
				}
				
			}
			
			private function hideBase64Picture() : void
			{
				templateB64Picture = "";
				
				b64Img.visible = false;
				b64Img.includeInLayout = false;
			}
			
			private function showDefaultPicture() : void
			{
				showBase64Picture(defaultLogo.strLogo);
			}
			
			protected function initializeHandler(event:FlexEvent):void
			{
				var defaultCaptions : Object = {
					template_name : "Name",
					template_id : "ID",
					template_ID_tooltip : "The project identifier string, unique to this project. Required.",
					template_description : "Description",
					template_picture : "Picture",
					template_use_picture : "Use picture",
					template_remove_pic : "Remove picture",
					template_key : "Key",
					template_images : "Images"
				};
				
				LanguageManager.setSentences( defaultCaptions );
			}
			
			private function initOutputFolderPath():void
			{
				outputInstallerFolderBrowseBox.path = project.outputFolderPath;
				
				if (!validOutputInstallerFolderPath)
					outputInstallerFolderBrowseBox.path = "";
				
				validateOutputInstallerFolderPath();
			}
			
			private function initInstallerFileName():void
			{
				installerFileName.text = project.outputFileName;
				
				validateInstallerFileName();
			}
			
			private function initEmbeddedApps():void
			{
				embeddedApplications = project.embededApps;
				
				validateAppsPaths();
			}
			
			private function validateOutputInstallerFolderPath():void
			{
				outputInstallerFolderBrowseBox.errorString = validOutputInstallerFolderPath ? null : "Error";
			}
			
			private function get validOutputInstallerFolderPath () : Boolean
			{
				return compilerParamsChecker.isValidInstallerOutputFolderPath(outputInstallerFolderBrowseBox.path);
			}
			
			private function validateInstallerFileName():void
			{
				installerFileName.errorString = validInstallerFileName ? null : "Error";
				
			}
			
			private function get validInstallerFileName () : Boolean
			{
				return compilerParamsChecker.isValidInstallerFileName(installerFileName.text);
			}
			
			private function validateAppsPaths():void
			{
				if (!embeddedApplications)
				{
					appsTextArea.htmlText = "";
					return;
				}
						
				var valid_apps_path : Boolean = true;
				var apps : String = "<div>";
				var text_color : String = "";
				var appFileName : String;
				var i:int=0;
				for each (var appPath:String in embeddedApplications)
				{
					if (i > 0)
						apps += "<br>";
					
					appFileName = !appPath ? "" : FileUtils.getFileName(appPath);
					if (!appFileName)
						continue;
					
					text_color = "#000000";
					if (!compilerParamsChecker.isValidAppPath(appPath))
					{
						text_color = "#ff0000";
						valid_apps_path = false;
					}
					
					apps += "<font color='"+text_color+"'>" + appFileName + "; <font>";
					i++;
				}
				
				apps += "</div>";
				
				appsTextArea.htmlText = apps;
				
				appsTextArea.errorString = null;
				if (!compilerParamsChecker.uniqueAppsNames(embeddedApplications))
					appsTextArea.errorString = "File names must be unique.";
				else if (!valid_apps_path)
					appsTextArea.errorString = "Some of selected applications are incorrect.";
			}
			
			private function initInstallerID():void
			{
				txtInstallerId.text = project.installerId;
				
				validateInstallerId();
			}
			
			private function validateInstallerId():void
			{
				txtInstallerId.errorString = validInstallerId ? null : "Possible symbols:\n* a-z\n* A-Z\n* 0-9\n* -\n* .";
			}
			
			private function get validInstallerId () : Boolean
			{
				return compilerParamsChecker.isValidInstallerId(txtInstallerId.text);
			}
			
			private function initProjectName():void
			{
				txtName.text = project.name;
				
				validateProjectName();
			}
			
			private function validateProjectName():void
			{
				txtName.errorString = validProjectName ? null : "Possible symbols:\n* a-z\n* A-Z\n* 0-9\n* -\n* .\n* '\n* _ \n* space \n* ( \n* )";
			}
			
			private function get validProjectName () : Boolean
			{
				return compilerParamsChecker.isValidProjectName(txtName.text);
			}
			
			private function get curTemplateOutputInstallerFolder() : String
			{
				var outputFolderPath : String = outputFolderPath;
				
				if (!FileUtils.filePathExists(outputFolderPath, true))
					outputFolderPath = BuilderTemplateProject.DEFAULT_OUTPUT_FOLDER_PATH;
				
				return outputFolderPath;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if (!project)
					return;
				
				txtDesc.text = project.description;
				txtKey.text = project.key;
				
				initProjectName();
				initInstallerID();
				initInstallerFileName();
				initOutputFolderPath();
				initEmbeddedApps();
				
				usePictureCheckBox.selected = project.picture ? true : false;
				onUsePictureSelectionChanged(null);
			}
			
			public function saveSettings () : void
			{
				project.name = txtName.text;
				project.installerId = txtInstallerId.text;
				project.description = txtDesc.text;
				if (txtLisenceEn)
					project.license = txtLisenceEn.text;
				
				project.outputFileName = installerFileName.text;
				project.outputFolderPath = StringUtil.trim(outputInstallerFolderBrowseBox.path);
				project.embededApps = embeddedApplications;
				
				if (templateB64Picture)
				{ 
					project.picture = templateB64Picture; 
				} else
				{
					project.picture = null;
				}
				
				project.key = txtKey.text;
			}
			
			private var _initialGraphIndex : int;
			
			[Bindable]
			private function get initialGraphIndex () : int
			{
				var graph : GraphCanvas = Graphs.getGraphByName(project.initialGraphName);
				
				if (!graph)
					graph = initialGraph = Graphs.graphs.source[0];

				_initialGraphIndex = Graphs.graphs.getItemIndex(graph);
				
				return _initialGraphIndex;
			}
			
			private function set initialGraphIndex (index : int) : void
			{
				_initialGraphIndex = index;
			}
			
			public function set initialGraph ( graph : GraphCanvas ) : void
			{
				if (graph.name == project.initialGraphName)
					return;
				
				project.initialGraphName = graph.name;
				
				graphsComboBox.selectedItem = graph;
				
				dispatchEvent (new Event(EVENT_INITIAL_GRAPH_CHANGED));
			}
			
			protected function graphsComboBox_changeHandler(event:ListEvent):void
			{
				initialGraph = graphsComboBox.selectedItem as GraphCanvas;
			}
			
			protected function showHandler(event:FlexEvent):void
			{
				setFocus();
			}
			
			protected function txtName_focusInHandler(event:FocusEvent):void
			{
				txtName.setSelection(0, txtName.text.length);
			}
			
			override public function setFocus () : void
			{
				if (!txtName)
					return;
				
				txtName.setFocus();
				txtName.setSelection(0, txtName.text.length);
			}
			
			private function browseAppsDialogCloseHandler (event : Event) : void
			{
				if ( event is CloseEvent && CloseEvent( event ).detail == ModalDialog.OK )
				{
					var appsDialog : BrowseApplicationsDialog = event.target as BrowseApplicationsDialog;
					embeddedApplications = appsDialog.selectedAppsPath;
					
					validateAppsPaths();
				}
			}
			
			
		]]>
	</mx:Script>
	
	<mx:TabNavigator width="100%" height="100%" 
					 paddingLeft="10" paddingRight="10"
					 backgroundColor="#eeeeee">
		
		<mx:Grid width="100%" label="General">
			
			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="120" height="100%">
					<mx:Label text="{LanguageManager.sentences.template_name}:" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:TextInput width="280" id="txtName"
								  restrict="a-zA-Z0-9\-.'_ ()"
								  change="validateProjectName()"
								  focusIn="txtName_focusInHandler(event)"/>
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="120" height="100%">
					<mx:Label text="{LanguageManager.sentences.template_id}:" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:TextInput width="280" id="txtInstallerId" 
								  toolTip="{LanguageManager.sentences.template_ID_tooltip}"
								  restrict="a-zA-Z0-9\-."
								  maxChars="212"
								  change="validateInstallerId()"/>
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="90">
				<mx:GridItem width="120" height="100%">
					<mx:Label text="{LanguageManager.sentences.template_description}:" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:TextArea width="280" height="90" id="txtDesc" />
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="10">
				<mx:GridItem width="100%" height="100%" colSpan="2">
					<mx:HRule width="100%" />
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="120" height="100%"
							 horizontalScrollPolicy="off">
					<mx:Label text="Initial Graph: " width="120"/>
				</mx:GridItem>
				
				<mx:GridItem width="100%" height="100%">
					<mx:ComboBox id="graphsComboBox"
								 dataProvider="{graphs}"
								 labelField="name"
								 width="200" height="20"
								 selectedIndex="{initialGraphIndex}"
								 change="graphsComboBox_changeHandler(event)"/>
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="10">
				<mx:GridItem width="100%" height="100%" colSpan="2">
					<mx:HRule width="100%" />
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="120" height="100%"
							 horizontalScrollPolicy="off">
					<mx:Label text="Output folder: " width="120"/>
				</mx:GridItem>
					
				<mx:GridItem width="100%" height="100%">
					<controls:FileBrowseBox id="outputInstallerFolderBrowseBox"
										mode="{FileBrowseBox.MODE_DIR}"
										browseTitle="Select output folder"
										defaultPath="{File.desktopDirectory.nativePath}"
										change="validateOutputInstallerFolderPath()"
										select="validateOutputInstallerFolderPath()"
										width="100%"/>
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="120" height="100%"
							 horizontalScrollPolicy="off">
					<mx:Label text="Output file name: " width="120"/>	
				</mx:GridItem>
				
				<mx:GridItem width="100%" height="100%">
					<mx:TextInput id="installerFileName" 
							  width="100%" 
							  restrict="a-zA-z0-9 \-_.()" 
							  toolTip="{installerFileName.text}"
							  change="validateInstallerFileName()"/>
				</mx:GridItem>
				
				<mx:GridItem width="100%" height="100%">
					<mx:Spacer width="70"/>
				</mx:GridItem>
					
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="50">
				<mx:GridItem width="120" height="100%"
							 horizontalScrollPolicy="off">
					
					<mx:Label text="Embedded applications: " 
							  width="120"/>
					
				</mx:GridItem>
				
				<mx:GridItem width="100%" height="100%">
					<mx:HBox width="100%" height="100%">
						<mx:TextArea id="appsTextArea" editable="false" width="100%" height="100%"/>
						<mx:Button label="Edit" 
								   click="{BrowseApplicationsDialog.show(embeddedApplications, browseAppsDialogCloseHandler)}"/>
					</mx:HBox>
				</mx:GridItem>
					
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="120" height="100%">
					<mx:Label text="{LanguageManager.sentences.template_key}:" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:TextInput id="txtKey" width="280" />
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="15">
				<mx:GridItem width="100%" height="100%" colSpan="2">
					<controls:HDivider label="{LanguageManager.sentences.template_picture}" />
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="100%" height="100%">
					<mx:CheckBox id="usePictureCheckBox" 
								 label="{LanguageManager.sentences.template_use_picture}"
								 change="onUsePictureSelectionChanged(event)"
								 selected="true"/>
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow id="pictureGridRow" 
						width="100%" height="120" 
						verticalAlign="middle">
				<mx:GridItem id="pictureGridColumn" 
							 width="120" height="120"
							 verticalAlign="middle" horizontalAlign="center">
					
					<controls:Base64Image id="b64Img"
										  width="100%" height="100%"
										  scaleContent="true" maintainAspectRatio="true"
										  autoLoad="true"
										  verticalAlign="middle" horizontalAlign="center"/>
				</mx:GridItem>
				
				<mx:GridItem width="100%" height="120" verticalAlign="middle">
					<mx:Button id="btnBrowsePic"
							   label="{LanguageManager.sentences.browse}..."		
							   click="onPicBrowseClick(event)"/>
					
				</mx:GridItem>
			</mx:GridRow>
			
		</mx:Grid>
		
		<mx:VBox label="License" width="100%" height="100%">
			<mx:Label text="Input license text here:" fontWeight="bold" />
			<mx:TextArea id="txtLisenceEn" width="400" height="440" text="{project.license}"/>
		</mx:VBox>
	</mx:TabNavigator>
		
</mx:VBox>
