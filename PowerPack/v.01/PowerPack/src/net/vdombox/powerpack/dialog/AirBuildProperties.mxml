<?xml version="1.0" encoding="utf-8"?>
<ModalDialog
	xmlns="net.vdombox.powerpack.dialog.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	width="500" height="300"
	title="AIR"
	creationComplete="onShow()"
	xmlns:controls="net.vdombox.powerpack.lib.extendedapi.controls.*" 
	xmlns:customize="net.vdombox.powerpack.customize.*"
	resizable="false">
	
	<customize:TemplateDefaultLogo id="defaultLogo" />
	
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import net.vdombox.powerpack.Template;
			import net.vdombox.powerpack.lib.extendedapi.containers.SuperAlert;
			import net.vdombox.powerpack.lib.extendedapi.utils.FileUtils;
			import net.vdombox.powerpack.managers.ContextManager;
			import net.vdombox.powerpack.managers.LanguageManager;
			import net.vdombox.powerpack.managers.ProgressManager;
			import net.vdombox.powerpack.sdkcompiler.SDKCompiler;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerEvent;
			
			private static var _dialog	: AirBuildProperties;
			
			private var shObject : SharedObject = SharedObject.getLocal( "air_properties" );
			private  function onShow():void
			{
				installerFolder.text = outputFolderRemembered ? shObject.data["outputInstallerFolder"] : File.documentsDirectory.nativePath;
				
				installerFileName.text = outputFileNameRemembered ? shObject.data["outputInstallerFileName"] : "appInstaller";
			}
			
			private function get outputFolderRemembered () : Boolean
			{
				return shObject.data.hasOwnProperty("outputInstallerFolder") && shObject.data["outputInstallerFolder"];
			}
			
			private function get outputFileNameRemembered () : Boolean
			{
				return shObject.data.hasOwnProperty("outputInstallerFileName") && shObject.data["outputInstallerFileName"];
			}
			
			static public function show( closeHandler : Function = null ) : AirBuildProperties
			{
				
				
				if ( !_dialog || _dialog.closed )
				{
					_dialog = new AirBuildProperties();
					_dialog.open();
					_dialog.show( OK | CANCEL, closeHandler, null, OK );
				}
				else
				{
					_dialog.activate();
				}
				
				return _dialog;
			}
			
			protected override function removeDialog( buttonPressed : String ) : void
			{
				switch ( buttonPressed )
				{
					
					case BUTTON_NAME_OK:
					{
							_dialog.closeDetail = ModalDialog.OK;
							_dialog.close();
							
							shObject.data["outputInstallerFolder"] = installerFolder.text;
							shObject.data["outputInstallerFileName"] = installerFileName.text;
							
							shObject.flush();
						
						break;
					}
					case BUTTON_NAME_CANCEL:
					{
						_dialog.closeDetail = ModalDialog.CANCEL;
						_dialog.close();
						break;
					}
					default:
					{
						_dialog.closeDetail = ModalDialog.CANCEL;
						_dialog.close();
						break;
					}
				}
			}
			
			private function compilePlayer():void
			{
				var sdkCompiler : SDKCompiler = new SDKCompiler();
				
				if (!sdkCompiler.hasEventListener(SDKCompilerEvent.SDK_COMPILER_COMPETE))
					sdkCompiler.addEventListener(SDKCompilerEvent.SDK_COMPILER_COMPETE, sdkCompilerEventHandler); 
				
				if (!sdkCompiler.hasEventListener(SDKCompilerEvent.SDK_COMPILER_ERROR))
					sdkCompiler.addEventListener(SDKCompilerEvent.SDK_COMPILER_ERROR, sdkCompilerEventHandler);
				
				ProgressManager.start( ProgressManager.WINDOW_MODE, false );
				
				sdkCompiler.buildInstallerPackage(StringUtil.trim(installerFolder.text), StringUtil.trim(installerFileName.text));
				
				function sdkCompilerEventHandler (evt:SDKCompilerEvent) : void
				{
					sdkCompiler.removeEventListener(SDKCompilerEvent.SDK_COMPILER_COMPETE, sdkCompilerEventHandler);
					sdkCompiler.removeEventListener(SDKCompilerEvent.SDK_COMPILER_ERROR, sdkCompilerEventHandler);
					
					ProgressManager.complete();
					
					if (evt.message)
					{
						SuperAlert.show(evt.message);
					}
				}
			}
			
			protected function btnOutputFolderClickHandler(event:MouseEvent):void
			{
				var file : File = new File(StringUtil.trim(installerFolder.text));
				
				file.addEventListener(Event.SELECT, folderSelectHandler);
				
				file.browseForDirectory("Select output folder");
				
				
				function folderSelectHandler (evt:Event) : void
				{
					file.removeEventListener(Event.SELECT, folderSelectHandler);
					
					installerFolder.text = file.nativePath; 
				}
			}
			
		]]>
	</mx:Script>
	
	<!--> TODO: VBox not in use ... </-->
	<mx:VBox verticalGap="10"
			 paddingLeft="20" paddingRight="20" paddingTop="20" paddingBottom="20">
		<mx:Label text="AIR" styleName="headerLabel" />
			 
		<mx:HBox width="400" horizontalGap="3">
			<mx:Label text="Output installer folder: " width="160"/>
			<mx:TextInput id="installerFolder" width="100%" editable="false" toolTip="{installerFolder.text}"/>
			<mx:Button label="Browse" click="btnOutputFolderClickHandler(event)"/>
		</mx:HBox>
		
		<mx:HBox width="400" horizontalGap="3">
			<mx:Label text="Output installer file name: " width="160"/>
			<mx:TextInput id="installerFileName" width="100%" restrict="a-zA-z0-9 \-_.()" toolTip="{installerFileName.text}"/>
		</mx:HBox>
			 
		<mx:Button label="Build" click="compilePlayer()" />
	</mx:VBox>
	
	<mx:ControlBar width="100%" height="100%" styleName="dlgFooter"/>
	
	
</ModalDialog>
