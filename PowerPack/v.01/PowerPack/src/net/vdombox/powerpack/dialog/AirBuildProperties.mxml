<?xml version="1.0" encoding="utf-8"?>
<ModalDialog
	xmlns="net.vdombox.powerpack.dialog.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	width="500" height="{windowHeight}"
	title="Build installer"
	creationComplete="onShow()"
	xmlns:controls="net.vdombox.powerpack.lib.extendedapi.controls.*" 
	xmlns:customize="net.vdombox.powerpack.customize.*"
	resizable="false"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off" xmlns:sdkcompiler="net.vdombox.powerpack.sdkcompiler.*">
	
	<customize:TemplateDefaultLogo id="defaultLogo" />
	
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.utils.StringUtil;
			
			import net.vdombox.powerpack.Template;
			import net.vdombox.powerpack.lib.extendedapi.controls.LinkObject;
			import net.vdombox.powerpack.lib.extendedapi.utils.FileUtils;
			import net.vdombox.powerpack.managers.ContextManager;
			import net.vdombox.powerpack.managers.LanguageManager;
			import net.vdombox.powerpack.managers.ProgressManager;
			import net.vdombox.powerpack.panel.popup.AlertPopup;
			import net.vdombox.powerpack.sdkcompiler.SDKCompiler;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerCreator;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerEvent;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerParamsChecker;
			import net.vdombox.powerpack.sdkcompiler.VDOMApplication;
			
			private var compilerParamsChecker	: SDKCompilerParamsChecker = new SDKCompilerParamsChecker();
			
			private var shObject : SharedObject = SharedObject.getLocal( "air_properties" );
			
			private static var _dialog	: AirBuildProperties;
			
			public var templateStructure : XML;
			
			private var installerTplXml : XML = 
				 <application xmlns="http://ns.adobe.com/air/application/2.0">
				  <version>1.2.3.7860</version> 
				 <initialWindow>
				  <content>Installer.swf</content> 
				  <systemChrome>none</systemChrome> 
				  <transparent>true</transparent> 
				  <maximizable>false</maximizable> 
				  <resizable>false</resizable> 
				  </initialWindow>
				  <installFolder>VDOM</installFolder> 
				  <programMenuFolder>VDOM</programMenuFolder> 
				 <icon>
				  <image16x16>assets/icons/Installer16.png</image16x16> 
				  <image32x32>assets/icons/Installer32.png</image32x32> 
				  <image48x48>assets/icons/Installer48.png</image48x48> 
				  <image128x128>assets/icons/Installer128.png</image128x128> 
				  </icon>
				  </application>;
			
			
			private function get windowHeight () : Number
			{
				return useLinuxSDK ? 530 : 450;
			}
			
			private  function onShow():void
			{
				initOutputFolderPath();
				initInstallerFileName();
				initAppPath();
				initFlexSDK_4_1_Path();
				initAirSDKLinuxPath();
			}
			
			private function initOutputFolderPath():void
			{
				outputInstallerFolderBrowseBox.path = curTemplateOutputInstallerFolder;
				
				validateOutputInstallerFolderPath();
			}
			
			private function initInstallerFileName():void
			{
				installerFileName.text = curTemplateInstallerFileName;
				
				validateInstallerFileName();
			}

			private function initAppPath():void
			{
				installerApplicationBrowseBox.path = currentTemplate ? currentTemplate.installerAppPath : Template.DEFAULT_APP_PATH;
				
				validateAppPath();
			}
			
			private function initFlexSDK_4_1_Path():void
			{
				if(shObject.data.hasOwnProperty("flex_sdk_4_1")) 
					flexSDK_4_1_BrowseBox.path = shObject.data["flex_sdk_4_1"] ;
				
				validateFlexSDKPath();
			}
			
			private function initAirSDKLinuxPath():void
			{
				if(shObject.data.hasOwnProperty("air_sdk_linux")) 
					airSDKLinuxBrowseBox.path = shObject.data["air_sdk_linux"] ;
				
				validateAirSDKPath();
			}
			
			private function get curTemplateInstallerFileName() : String
			{
				if (!currentTemplate)
					return Template.DEFAULT_OUTPUT_FILE_NAME;
				
				if (!currentTemplate.installerFileName)
				{
					if (!currentTemplate.installerId)
						return Template.DEFAULT_OUTPUT_FILE_NAME;
					
					return currentTemplate.installerId;
				}
				
				return currentTemplate.installerFileName;
			}
			
			private function get curTemplateOutputInstallerFolder() : String
			{
				if (!currentTemplate)
					return Template.DEFAULT_OUTPUT_FOLDER;
					
				var outputFolderPath : String = currentTemplate.installerFolderPath;
				
				if (!FileUtils.filePathExists(outputFolderPath, true))
					outputFolderPath = Template.DEFAULT_OUTPUT_FOLDER;
					
				return currentTemplate.installerFolderPath;
				
			}
			
			private function get outputFileName () : String
			{
				return StringUtil.trim(installerFileName.text);
			}
			
			static public function show( templateXmlStructure : XML, closeHandler : Function = null ) : AirBuildProperties
			{
				
				
				if ( !_dialog || _dialog.closed )
				{
					_dialog = new AirBuildProperties();
					
					_dialog.templateStructure = templateXmlStructure;
					
					_dialog.open();
					_dialog.show( OK | CANCEL, closeHandler, null, OK );
				}
				else
				{
					_dialog.activate();
				}
				
				return _dialog;
			}
			
			protected override function removeDialog( buttonPressed : String ) : void
			{
				switch ( buttonPressed )
				{
					
					case BUTTON_NAME_OK:
					{
							_dialog.closeDetail = ModalDialog.OK;
							_dialog.close();
							
							if (currentTemplate)
								setTemplateBuildProperties();
							
						break;
					}
					case BUTTON_NAME_CANCEL:
					{
						_dialog.closeDetail = ModalDialog.CANCEL;
						_dialog.close();
						break;
					}
					default:
					{
						_dialog.closeDetail = ModalDialog.CANCEL;
						_dialog.close();
						break;
					}
				}
			}
			
			public function get currentTemplate() : Template
			{
				if ( !ContextManager.templates || ContextManager.templates.length == 0 )
					return null;
				
				return ContextManager.templates.getItemAt( 0 ) as Template;
			}
			
			private function setTemplateBuildProperties () : void
			{
				if (!currentTemplate)
					return;
				
				currentTemplate.xmlStructure = templateStructure;
				
				currentTemplate.installerAppPath = installerApplicationBrowseBox.path;
				currentTemplate.installerFolderPath = outputInstallerFolderBrowseBox.path;
				currentTemplate.installerFileName = outputFileName;
				
				shObject.data["flex_sdk_4_1"] = flexSDK_4_1_BrowseBox.path;
				
				if (useLinuxSDK)
					shObject.data["air_sdk_linux"] = airSDKLinuxBrowseBox.path;
			}
			
			private function saveTemplate () : void
			{ 
				if (!currentTemplate)
				{
					AlertPopup.show("No opened template", "Error", OK, _dialog);
					return;
				}
				
				currentTemplate.addEventListener( Event.COMPLETE, templateSaveCompleteHandler );
				currentTemplate.addEventListener( ErrorEvent.ERROR, templateSaveErrorHandler );
				
				setTemplateBuildProperties();
				
				currentTemplate.save();
				
				function templateSaveCompleteHandler(evt:Event) : void
				{
					currentTemplate.removeEventListener( Event.COMPLETE, templateSaveCompleteHandler );
					
					try
					{
						var tplTargetFile : File = File.applicationStorageDirectory.resolvePath("assets/template.xml");
						currentTemplate.file.copyTo(tplTargetFile, true);
					}
					catch (e:Error)
					{
						AlertPopup.show("Can't save template", "Error", OK, _dialog);
						return;
					}
					
					buildInstaller();
				}
				
				function templateSaveErrorHandler(evt:Event) : void
				{
					currentTemplate.removeEventListener( ErrorEvent.ERROR, templateSaveErrorHandler );
					
					AlertPopup.show("Can't save template", "Error", OK, _dialog);
				}
			}
			
			private function buildInstaller():void
			{
				var installerPropertiesXmlPrepeared : Boolean = prepareInstallerPropertiesXml();
				
				var app : VDOMApplication = new VDOMApplication();
				app.stored = prepareInstallerApp();
				app.fileName = FileUtils.getFileName(installerApplicationBrowseBox.path);
				
				if (!installerPropertiesXmlPrepeared)
				{
					AlertPopup.show("Can't prepare installer properties xml", "Error", OK, _dialog);
					return;
				}
				
				var sdkCompiler : SDKCompiler = SDKCompilerCreator.create();
				
				if (!sdkCompiler.hasEventListener(SDKCompilerEvent.SDK_COMPILER_COMPETE))
					sdkCompiler.addEventListener(SDKCompilerEvent.SDK_COMPILER_COMPETE, sdkCompilerEventHandler); 
				
				if (!sdkCompiler.hasEventListener(SDKCompilerEvent.SDK_COMPILER_ERROR))
					sdkCompiler.addEventListener(SDKCompilerEvent.SDK_COMPILER_ERROR, sdkCompilerEventHandler);
				
				ProgressManager.complete();
				ProgressManager.source = null;
				ProgressManager.start( ProgressManager.DIALOG_MODE, false );
				
				sdkCompiler.buildInstallerPackage (outputInstallerFolderBrowseBox.path, 
													outputFileName, 
													app, 
													flexSDK_4_1_BrowseBox.path,
													airSDKLinuxBrowseBox.path,
													radioBtnGroupBuildType.selectedValue.toString());
				
				function sdkCompilerEventHandler (evt:SDKCompilerEvent) : void
				{
					sdkCompiler.removeEventListener(SDKCompilerEvent.SDK_COMPILER_COMPETE, sdkCompilerEventHandler);
					sdkCompiler.removeEventListener(SDKCompilerEvent.SDK_COMPILER_ERROR, sdkCompilerEventHandler);
					
					ProgressManager.complete();
					
					if (evt.message)
					{
						AlertPopup.show(evt.message,"", OK, _dialog);
					}
				}
			}
			
			private function prepareInstallerApp() : Boolean
			{
				if (!installerApplicationBrowseBox.path || !validAppPath)
					return false;
				
				try
				{
					var sourceAppFile : File = new File(installerApplicationBrowseBox.path);
					
					var targetAppFile : File = File.applicationStorageDirectory.resolvePath(FileUtils.getFileName(installerApplicationBrowseBox.path));
					
					sourceAppFile.copyTo(targetAppFile, true);
				}
				catch (e:Error)
				{
					return false;
				}
				
				return true;
				
			}
			
			private function prepareInstallerPropertiesXml() : Boolean
			{
				var fileStream : FileStream = new FileStream();
				
				var targetXmlFile : File = File.applicationStorageDirectory.resolvePath("Installer-app.xml");
				
				var installerXML : XML;
				var targetXmlSource : String;
				
				try 
				{
					installerXML = installerTplXml;
					
					installerXML.id = "net.vdom." + currentTemplate.installerId;
					installerXML.name = currentTemplate.name;
					installerXML.filename = currentTemplate.name;
					
					installerXML.normalize();
					
					fileStream.open(targetXmlFile, FileMode.WRITE);
					fileStream.writeUTFBytes( '<?xml version="1.0" encoding="UTF-8"?>' + "\n" + installerXML.toXMLString() );
					fileStream.close();
				} 
				catch (e:Error)
				{
					fileStream.close();
					
					return false;
				}
				
				return true;
			}
			
			protected function btnBuildClickHandler(event:MouseEvent):void
			{
				saveTemplate();
			}
			
			private function validateOutputInstallerFolderPath():void
			{
				outputInstallerFolderBrowseBox.errorString = validOutputInstallerFolderPath ? null : "Error";
				
				buildBtn.enabled = buildAvailable;
			}
			
			private function get validOutputInstallerFolderPath () : Boolean
			{
				return FileUtils.filePathExists(outputInstallerFolderBrowseBox.path, true);
			}
			
			private function validateInstallerFileName():void
			{
				installerFileName.errorString = validInstallerFileName ? null : "Error";
				
				buildBtn.enabled = buildAvailable;
			}
			
			private function get validInstallerFileName () : Boolean
			{
				return outputFileName != "";
			}
			
			private function validateAppPath():void
			{
				installerApplicationBrowseBox.errorString = validAppPath ? null : "Error";
				
				buildBtn.enabled = buildAvailable;
			}
			
			private function get validAppPath () : Boolean
			{
				return compilerParamsChecker.isAppPathValid(installerApplicationBrowseBox.path);
			}
			
			private function validateFlexSDKPath():void
			{
				flexSDK_4_1_BrowseBox.errorString = validFlexSDKPath ? null : "Error";
				
				buildBtn.enabled = buildAvailable;
			}
			
			private function get validFlexSDKPath () : Boolean
			{
				return compilerParamsChecker.isFlexSDK_4_1_PathValid(flexSDK_4_1_BrowseBox.path);
			}
			
			public function sdkLinkHandler(event:TextEvent):void {
				// Open the link in a new browser window.
				navigateToURL(new URLRequest(event.text), '_blank')
			}
			
			private function get useLinuxSDK () : Boolean
			{
				return FileUtils.OS == FileUtils.OS_LINUX;
			}
			
			private function validateAirSDKPath():void
			{
				if (!useLinuxSDK)
					return;
				
				airSDKLinuxBrowseBox.errorString = validAirSDKPath ? null : "Error";
				
				buildBtn.enabled = buildAvailable;
			}
			
			private function get validAirSDKPath () : Boolean
			{
				if (!useLinuxSDK)
					return true;
					
				return compilerParamsChecker.isAirSDK_PathValid(airSDKLinuxBrowseBox.path);
			}
			
			private function get buildAvailable (): Boolean
			{
				return validAppPath && 
					validFlexSDKPath && 
					validAirSDKPath && 
					validOutputInstallerFolderPath &&
					validInstallerFileName;
			}
			
			protected function airSDKCreationCompleteHandler(event:FlexEvent):void
			{
				if (!useLinuxSDK)
					airSdkGroup.height = 0;
			}
			
			protected function radiobutton1_clickHandler(event:MouseEvent):void
			{
				FileUtils.LINUX_NATIVE_INSTALLER_TYPE_DEBIAN = true;
			}
			
			protected function radiobutton2_clickHandler(event:MouseEvent):void
			{
				FileUtils.LINUX_NATIVE_INSTALLER_TYPE_DEBIAN = false;
			}
			
			private function get linuxNatineTypeSelectorVisible () : Boolean
			{
				return useLinuxSDK && buildTypeNative.selected;
			}
			
			protected function buildTypeChangeHandler(event:ItemClickEvent):void
			{
				linuxNatineTypeSelector.visible = linuxNatineTypeSelectorVisible;
			}
			
			protected function linuxNativeInstallerTypeSelectorCreationCompleteHandler(event:FlexEvent):void
			{
				linuxNatineTypeSelector.visible = linuxNatineTypeSelectorVisible;
			}
			
		]]>
	</mx:Script>
	
	<mx:VBox verticalGap="10"
			 paddingLeft="20" paddingRight="20" paddingTop="20" paddingBottom="20">
		<mx:VBox width="450" horizontalGap="3">
			<mx:Label text="Build installer" styleName="headerLabel" />
			<mx:Label text="Build and export VDOM Application Installer" />
			<mx:HRule width="100%" />
			<mx:Spacer height="20"/>
		</mx:VBox>
			 
		<mx:HBox width="450" horizontalGap="3">
			<mx:Label text="Output folder: " width="110"/>
			<controls:FileBrowseBox id="outputInstallerFolderBrowseBox"
									mode="{FileBrowseBox.MODE_DIR}"
									browseTitle="Select output folder"
									defaultPath="{File.desktopDirectory.nativePath}"
									change="validateOutputInstallerFolderPath()"
									select="validateOutputInstallerFolderPath()"
									width="100%"/>
		</mx:HBox>
		
		<mx:HBox width="450" horizontalGap="3">
			<mx:Label text="Output file name: " width="110"/>
			<mx:TextInput id="installerFileName" 
						  width="100%" 
						  restrict="a-zA-z0-9 \-_.()" 
						  toolTip="{installerFileName.text}"
						  change="validateInstallerFileName()"/>
			<mx:Spacer width="70"/>
		</mx:HBox>
		
		<mx:HBox width="450" horizontalGap="3">
			<mx:Label text="Application: " width="110"/>
			<controls:FileBrowseBox id="installerApplicationBrowseBox"
									mode="{FileBrowseBox.MODE_OPEN}"
									defaultPath="{File.desktopDirectory.nativePath}"
									change="validateAppPath()"
									select="validateAppPath()"
									width="100%"
									filterArray="{[new FileFilter('Application XML', '*.xml')]}"/>
		</mx:HBox>
		
		<mx:HBox width="450" horizontalGap="3">
			<mx:Label text="Flex SDK 4.1.0: " width="110"/>
			<mx:VBox width="100%" verticalAlign="middle" horizontalAlign="center" verticalGap="0">
				<controls:FileBrowseBox id="flexSDK_4_1_BrowseBox"
										mode="{FileBrowseBox.MODE_DIR}"
										defaultPath="{File.desktopDirectory.nativePath}"
										browseTitle="Select Flex SDK 4.1.0 folder"
										change="validateFlexSDKPath()"
										select="validateFlexSDKPath()"
										width="100%"/>
			
				<controls:LinkLabel href="{new LinkObject('http://fpdownload.adobe.com/pub/flex/sdk/builds/flex4/flex_sdk_4.1.0.16076A.zip', 'Download Flex SDK')}"/>

			</mx:VBox>
		</mx:HBox>
		
		<mx:HBox width="450" horizontalGap="3" visible="{useLinuxSDK}"
				 creationComplete="airSDKCreationCompleteHandler(event)"
				 id="airSdkGroup">
			<mx:Label text="Air SDK 2.6: " width="110"/>
			<mx:VBox width="100%" verticalAlign="middle" horizontalAlign="center" verticalGap="0">
				<controls:FileBrowseBox id="airSDKLinuxBrowseBox"
										mode="{FileBrowseBox.MODE_DIR}"
										defaultPath="{File.desktopDirectory.nativePath}"
										browseTitle="Select AIR SDK (for Linux) folder"
										change="validateAirSDKPath()"
										select="validateAirSDKPath()"
										width="100%"/>
				
				<controls:LinkLabel href="{new LinkObject('http://airdownload.adobe.com/air/lin/download/2.6/AdobeAIRSDK.tbz2', 'Download Air SDK (for Linux)')}"/>
				
			</mx:VBox>
		</mx:HBox>
		
		<mx:VBox verticalGap="10"
				 top="10" bottom="10" left="10" right="10"
				 visible="true">
			
			<mx:VBox id="radioBtnsBox" verticalGap="1">
				<mx:Label text="Export as: "/>
				<mx:RadioButtonGroup id="radioBtnGroupBuildType"
									 itemClick="buildTypeChangeHandler(event)"/>
				
				<mx:RadioButton id="buildTypeNative"
								groupName="radioBtnGroupBuildType"
								label="Native installer"
								value="{SDKCompiler.PACKAGE_TYPE_NATIVE}"
								selected="true"/>
				
				<sdkcompiler:LinuxNativeInstallerTypeSelectorVBox id="linuxNatineTypeSelector" 
																  creationComplete="linuxNativeInstallerTypeSelectorCreationCompleteHandler(event)"
																  paddingLeft="20"/>	
					
				<mx:RadioButton id="buildTypePackage"
								groupName="radioBtnGroupBuildType"
								label="AIR package"
								value="{SDKCompiler.PACKAGE_TYPE_AIR}"
								selected="false"/>
			</mx:VBox>
			
			<mx:Button id="buildBtn" label="Build" click="btnBuildClickHandler(event)" />
		</mx:VBox>
		
	</mx:VBox>
	
	<mx:ControlBar width="100%" height="100%" styleName="dlgFooter"
				   visible="true"/>
	
	
</ModalDialog>
