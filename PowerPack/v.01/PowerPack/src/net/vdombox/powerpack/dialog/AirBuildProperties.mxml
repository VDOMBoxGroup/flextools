<?xml version="1.0" encoding="utf-8"?>
<ModalDialog
	xmlns="net.vdombox.powerpack.dialog.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	width="500" height="{windowHeight}"
	title="Export project build"
	creationComplete="onShow()"
	xmlns:controls="net.vdombox.powerpack.lib.extendedapi.controls.*" 
	xmlns:customize="net.vdombox.powerpack.customize.*"
	resizable="false"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off" xmlns:sdkcompiler="net.vdombox.powerpack.sdkcompiler.*">
	
	<customize:TemplateDefaultLogo id="defaultLogo" />
	
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.utils.StringUtil;
			
			import net.vdombox.powerpack.lib.extendedapi.controls.LinkObject;
			import net.vdombox.powerpack.lib.extendedapi.utils.FileUtils;
			import net.vdombox.powerpack.lib.player.managers.ContextManager;
			import net.vdombox.powerpack.lib.player.popup.AlertPopup;
			import net.vdombox.powerpack.lib.player.template.Template;
			import net.vdombox.powerpack.lib.player.template.TemplateProject;
			import net.vdombox.powerpack.managers.BuilderContextManager;
			import net.vdombox.powerpack.managers.ProgressManager;
			import net.vdombox.powerpack.sdkcompiler.SDKCompiler;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerCreator;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerEvent;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerParamsChecker;
			import net.vdombox.powerpack.template.BuilderTemplate;
			import net.vdombox.powerpack.template.BuilderTemplateProject;
			
			private var compilerParamsChecker	: SDKCompilerParamsChecker = SDKCompilerParamsChecker.getInstance();
			
			private var sdkCompiler : SDKCompiler = SDKCompilerCreator.create();
			
			private var shObject : SharedObject = SharedObject.getLocal( "air_properties" );
			
			private static var _dialog	: AirBuildProperties;
			
			
			private function get windowHeight () : Number
			{
				return useLinuxSDK ? 530 : 450;
			}
			
			private  function onShow():void
			{
				initFlexSDK_4_1_Path();
				initAirSDKLinuxPath();
			}
			
			private function initFlexSDK_4_1_Path():void
			{
				if(shObject.data.hasOwnProperty("flex_sdk_4_1")) 
					flexSDK_4_1_BrowseBox.path = shObject.data["flex_sdk_4_1"] ;
				
				validateFlexSDKPath();
			}
			
			private function initAirSDKLinuxPath():void
			{
				if(shObject.data.hasOwnProperty("air_sdk_linux")) 
					airSDKLinuxBrowseBox.path = shObject.data["air_sdk_linux"] ;
				
				validateAirSDKPath();
			}
			
			static public function show( closeHandler : Function = null ) : AirBuildProperties
			{
				if ( !_dialog || _dialog.closed )
				{
					_dialog = new AirBuildProperties();
					
					_dialog.open();
					_dialog.show( OK | CANCEL, closeHandler, null, OK );
				}
				else
				{
					_dialog.activate();
				}
				
				return _dialog;
			}
			
			protected override function removeDialog( buttonPressed : String ) : void
			{
				switch ( buttonPressed )
				{
					
					case BUTTON_NAME_OK:
					{
							_dialog.closeDetail = ModalDialog.OK;
							_dialog.close();
							
							saveSDKPath();
							
						break;
					}
					case BUTTON_NAME_CANCEL:
					{
						_dialog.closeDetail = ModalDialog.CANCEL;
						_dialog.close();
						break;
					}
					default:
					{
						_dialog.closeDetail = ModalDialog.CANCEL;
						_dialog.close();
						break;
					}
				}
			}
			
			private function saveSDKPath () : void
			{
				shObject.data["flex_sdk_4_1"] = flexSDK_4_1_BrowseBox.path;
				
				if (useLinuxSDK)
					shObject.data["air_sdk_linux"] = airSDKLinuxBrowseBox.path;
			}
			
			private function buildInstaller():void
			{
				if (!sdkCompiler.hasEventListener(SDKCompilerEvent.BUILD_COMPETE))
					sdkCompiler.addEventListener(SDKCompilerEvent.BUILD_COMPETE, sdkCompilerEventHandler); 
				
				if (!sdkCompiler.hasEventListener(SDKCompilerEvent.BUILD_ERROR))
					sdkCompiler.addEventListener(SDKCompilerEvent.BUILD_ERROR, sdkCompilerEventHandler);
				
				ProgressManager.complete();
				ProgressManager.source = null;
				ProgressManager.start( ProgressManager.WINDOW_MODE, false );
				
				sdkCompiler.buildInstallerPackage ( flexSDK_4_1_BrowseBox.path,
													airSDKLinuxBrowseBox.path,
													radioBtnGroupBuildType.selectedValue.toString());
				
			}
			
			private function sdkCompilerEventHandler (event : SDKCompilerEvent) : void
			{
				sdkCompiler.removeEventListener(SDKCompilerEvent.BUILD_COMPETE, sdkCompilerEventHandler);
				sdkCompiler.removeEventListener(SDKCompilerEvent.BUILD_ERROR, sdkCompilerEventHandler);
				
				ProgressManager.complete();
				
				if (event.message)
				{
					AlertPopup.show(event.message,"", OK, _dialog);
				}
			}
			
			protected function btnBuildClickHandler (event:MouseEvent) : void
			{
				saveSDKPath();
				
				buildInstaller();
			}
			
			public function sdkLinkHandler (event:TextEvent) : void 
			{
				navigateToURL(new URLRequest(event.text), '_blank')
			}
			
			protected function airSDKCreationCompleteHandler (event:FlexEvent) : void
			{
				if (!useLinuxSDK)
					airSdkGroup.height = 0;
			}
			
			protected function radiobutton1_clickHandler (event:MouseEvent) : void
			{
				FileUtils.LINUX_NATIVE_INSTALLER_TYPE_DEBIAN = true;
			}
			
			protected function radiobutton2_clickHandler (event:MouseEvent) : void
			{
				FileUtils.LINUX_NATIVE_INSTALLER_TYPE_DEBIAN = false;
			}
			
			protected function buildTypeChangeHandler (event:ItemClickEvent) : void
			{
				linuxNatineTypeSelector.visible = linuxNatineTypeSelectorVisible;
			}
			
			protected function linuxNativeInstallerTypeSelectorCreationCompleteHandler (event:FlexEvent) : void
			{
				linuxNatineTypeSelector.visible = linuxNatineTypeSelectorVisible;
			}
			
			protected function buildTypeNativeRadioBtn_creationCompleteHandler (event:FlexEvent) : void
			{
				if (useLinuxSDK)
				{
					buildTypeNative.visible = false;
					buildTypeNative.height = 1;
				}
					
			}
			
			private function get linuxNatineTypeSelectorVisible () : Boolean
			{
				return useLinuxSDK && buildTypeNative.selected;
			}
			
			private function validateAirSDKPath () : void
			{
				if (!useLinuxSDK)
					return;
				
				airSDKLinuxBrowseBox.errorString = validAirSDKPath ? null : "Error";
				
				updateBuildEnableState();
			}
			
			private function get validAirSDKPath () : Boolean
			{
				if (!useLinuxSDK)
					return true;
				
				return compilerParamsChecker.isAirSDK_PathValid(airSDKLinuxBrowseBox.path);
			}
			
			private function validateFlexSDKPath () : void
			{
				flexSDK_4_1_BrowseBox.errorString = validFlexSDKPath ? null : "Error";
				
				updateBuildEnableState();
			}
			
			private function get validAppPath () : Boolean
			{
				var embededAppPath : String = selectedTemplateProject.embededAppPath;
				
				return compilerParamsChecker.isValidAppPath(embededAppPath);
			}
			
			private function get validOutputInstallerFolderPath () : Boolean
			{
				var outputFolderPath : String = selectedTemplateProject.outputFolderPath;
				
				return compilerParamsChecker.isValidInstallerOutputFolderPath(outputFolderPath);
			}
			
			private function get validInstallerFileName () : Boolean
			{
				var outputFileName : String = selectedTemplateProject.outputFileName;
				
				return compilerParamsChecker.isValidInstallerFileName(outputFileName);
			}
			
			private function get validFlexSDKPath () : Boolean
			{
				return compilerParamsChecker.isFlexSDK_4_1_PathValid(flexSDK_4_1_BrowseBox.path);
			}
			
			private function get validInstallerId () : Boolean
			{
				return compilerParamsChecker.isValidInstallerId(selectedTemplateProject.installerId);
			}
			
			private function get buildAvailable (): Boolean
			{
				return validAppPath && 
					validFlexSDKPath && 
					validAirSDKPath && 
					validOutputInstallerFolderPath &&
					validInstallerFileName
					&& validInstallerId;
			}
			
			private function get useLinuxSDK () : Boolean
			{
				return FileUtils.OS == FileUtils.OS_LINUX;
			}
			
			private function updateBuildEnableState() : void
			{
				buildBtn.enabled = buildAvailable;
				
				if (buildBtn.enabled)
				{
					buildLabel.text = "";
					return;
				}
				
				var msgErrorAppParams	: String = "Builder not available. Check template properties.";
				var msgErrorSDKPath		: String = "Builder not available. Check SDK folder path.";
				
				buildLabel.text = validFlexSDKPath && validAirSDKPath ? msgErrorAppParams : msgErrorSDKPath;
			}
			
			private function get currentTemplate() : BuilderTemplate
			{
				return BuilderContextManager.currentTemplate;
			}
			
			private function get selectedTemplateProject () : BuilderTemplateProject
			{
				return currentTemplate.selectedProject as BuilderTemplateProject
			}
			
		]]>
	</mx:Script>
	
	<mx:VBox verticalGap="10"
			 paddingLeft="20" paddingRight="20" paddingTop="20" paddingBottom="20">
		<mx:VBox width="450" horizontalGap="3">
			<mx:Label text="Export project build" styleName="headerLabel" />
			<mx:Label text="Build and export VDOM Application Installer" />
			<mx:HRule width="100%" />
			<mx:Spacer height="20"/>
		</mx:VBox>
		
		<mx:HBox width="450" horizontalGap="3">
			<mx:Label text="Flex SDK 4.1.0 folder: " width="115"/>
			<mx:VBox width="100%" verticalAlign="middle" horizontalAlign="center" verticalGap="0">
				<controls:FileBrowseBox id="flexSDK_4_1_BrowseBox"
										mode="{FileBrowseBox.MODE_DIR}"
										defaultPath="{File.desktopDirectory.nativePath}"
										browseTitle="Select Flex SDK 4.1.0 folder"
										change="validateFlexSDKPath()"
										select="validateFlexSDKPath()"
										width="100%"/>
			
				<controls:LinkLabel href="{new LinkObject('http://fpdownload.adobe.com/pub/flex/sdk/builds/flex4/flex_sdk_4.1.0.16076A.zip', 'Download Flex SDK')}"/>

			</mx:VBox>
		</mx:HBox>
		
		<mx:HBox width="450" horizontalGap="3" visible="{useLinuxSDK}"
				 creationComplete="airSDKCreationCompleteHandler(event)"
				 id="airSdkGroup">
			<mx:Label text="Air SDK 2.6 folder: " width="115"/>
			<mx:VBox width="100%" verticalAlign="middle" horizontalAlign="center" verticalGap="0">
				<controls:FileBrowseBox id="airSDKLinuxBrowseBox"
										mode="{FileBrowseBox.MODE_DIR}"
										defaultPath="{File.desktopDirectory.nativePath}"
										browseTitle="Select AIR SDK (for Linux) folder"
										change="validateAirSDKPath()"
										select="validateAirSDKPath()"
										width="100%"/>
				
				<controls:LinkLabel href="{new LinkObject('http://airdownload.adobe.com/air/lin/download/2.6/AdobeAIRSDK.tbz2', 'Download Air SDK (for Linux)')}"/>
				
			</mx:VBox>
		</mx:HBox>
		
		<mx:VBox verticalGap="10"
				 top="10" bottom="10" left="10" right="10"
				 visible="true">
			
			<mx:VBox id="radioBtnsBox" verticalGap="1">
				<mx:Label text="Export as: "/>
				
				<mx:RadioButtonGroup id="radioBtnGroupBuildType"
									 itemClick="buildTypeChangeHandler(event)"/>
				
				<mx:RadioButton id="buildTypeAIR"
								groupName="radioBtnGroupBuildType"
								label="AIR package"
								value="{SDKCompiler.PACKAGE_TYPE_AIR}"
								selected="true"/>
				
				<mx:RadioButton id="buildTypeNative"
								groupName="radioBtnGroupBuildType"
								label="Native installer"
								value="{SDKCompiler.PACKAGE_TYPE_NATIVE}"
								selected="false"
								creationComplete="buildTypeNativeRadioBtn_creationCompleteHandler(event)"/>
				
				<sdkcompiler:LinuxNativeInstallerTypeSelectorVBox id="linuxNatineTypeSelector" 
																  creationComplete="linuxNativeInstallerTypeSelectorCreationCompleteHandler(event)"
																  paddingLeft="20"/>	
					
			</mx:VBox>
			
			<mx:HBox horizontalAlign="center" verticalAlign="middle">
				
				<mx:Button id="buildBtn" label="Build" click="btnBuildClickHandler(event)" />
				
				<mx:Label id="buildLabel" 
						  text=""
						  visible="{!buildBtn.enabled}"
						  color="red"
						  paddingTop="3"/>
				
			</mx:HBox>
			
		</mx:VBox>
		
	</mx:VBox>
	
	<mx:ControlBar width="100%" height="100%" styleName="dlgFooter"
				   visible="true"/>
	
	
</ModalDialog>
