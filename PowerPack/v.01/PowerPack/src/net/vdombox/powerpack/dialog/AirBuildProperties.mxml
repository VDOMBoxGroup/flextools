<?xml version="1.0" encoding="utf-8"?>
<ModalDialog
	xmlns="net.vdombox.powerpack.dialog.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	width="500" height="420"
	title="Build installer"
	creationComplete="onShow()"
	xmlns:controls="net.vdombox.powerpack.lib.extendedapi.controls.*" 
	xmlns:customize="net.vdombox.powerpack.customize.*"
	resizable="false">
	
	<customize:TemplateDefaultLogo id="defaultLogo" />
	
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import net.vdombox.powerpack.Template;
			import net.vdombox.powerpack.lib.extendedapi.utils.FileUtils;
			import net.vdombox.powerpack.managers.ContextManager;
			import net.vdombox.powerpack.managers.LanguageManager;
			import net.vdombox.powerpack.managers.ProgressManager;
			import net.vdombox.powerpack.panel.popup.AlertPopup;
			import net.vdombox.powerpack.sdkcompiler.SDKCompiler;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerEvent;
			import net.vdombox.powerpack.sdkcompiler.SDKCompilerParamsChecker;
			import net.vdombox.powerpack.sdkcompiler.VDOMApplication;
			
			private var compilerParamsChecker	: SDKCompilerParamsChecker = new SDKCompilerParamsChecker();
			
			private var shObject : SharedObject = SharedObject.getLocal( "air_properties" );
			
			private static var _dialog	: AirBuildProperties;
			
			public var templateStructure : XML;
			
			private var installerTplXml : XML = 
				 <application xmlns="http://ns.adobe.com/air/application/2.0">
				  <version>1.2.2.7766</version> 
				 <initialWindow>
				  <content>Installer.swf</content> 
				  <systemChrome>none</systemChrome> 
				  <transparent>true</transparent> 
				  <maximizable>false</maximizable> 
				  <resizable>false</resizable> 
				  </initialWindow>
				  <installFolder>VDOM</installFolder> 
				  <programMenuFolder>VDOM</programMenuFolder> 
				 <icon>
				  <image16x16>assets/icons/Installer16.png</image16x16> 
				  <image32x32>assets/icons/Installer32.png</image32x32> 
				  <image48x48>assets/icons/Installer48.png</image48x48> 
				  <image128x128>assets/icons/Installer128.png</image128x128> 
				  </icon>
				  </application>;
			
			
			private  function onShow():void
			{
				installerFolder.text = currentTemplate ? currentTemplate.installerFolderPath : Template.DEFAULT_OUTPUT_FOLDER;
				
				installerFileName.text = currentTemplate ? currentTemplate.installerFileName : Template.DEFAULT_OUTPUT_FILE_NAME;
				
				installerApplication.text = currentTemplate ? currentTemplate.installerAppPath : Template.DEFAULT_APP_PATH;
				
				if(shObject.data.hasOwnProperty("sdk_4_1")) 
					sdkFolderTextInput.text = shObject.data["sdk_4_1"] ;
				
				validateAppPath();
				validateSDKPath();
			}
			
			private function get outputFolderPath () : String
			{
				return StringUtil.trim(installerFolder.text);
			}
			
			private function get outputFileName () : String
			{
				return StringUtil.trim(installerFileName.text);
			}
			
			private function get appPath () : String
			{
				return StringUtil.trim(installerApplication.text);
			}
			
			private function get sdkPath () : String
			{
				return StringUtil.trim(sdkFolderTextInput.text);
			}
			
			static public function show( templateXmlStructure : XML, closeHandler : Function = null ) : AirBuildProperties
			{
				
				
				if ( !_dialog || _dialog.closed )
				{
					_dialog = new AirBuildProperties();
					
					_dialog.templateStructure = templateXmlStructure;
					
					_dialog.open();
					_dialog.show( OK | CANCEL, closeHandler, null, OK );
				}
				else
				{
					_dialog.activate();
				}
				
				return _dialog;
			}
			
			protected override function removeDialog( buttonPressed : String ) : void
			{
				switch ( buttonPressed )
				{
					
					case BUTTON_NAME_OK:
					{
							_dialog.closeDetail = ModalDialog.OK;
							_dialog.close();
							
							if (currentTemplate)
								setTemplateBuildProperties();
							
						break;
					}
					case BUTTON_NAME_CANCEL:
					{
						_dialog.closeDetail = ModalDialog.CANCEL;
						_dialog.close();
						break;
					}
					default:
					{
						_dialog.closeDetail = ModalDialog.CANCEL;
						_dialog.close();
						break;
					}
				}
			}
			
			protected function btnOutputFolderClickHandler(event:MouseEvent):void
			{
				var file : File = new File(outputFolderPath);
				
				file.addEventListener(Event.SELECT, folderSelectHandler);
				
				file.browseForDirectory("Select output folder");
				
				
				function folderSelectHandler (evt:Event) : void
				{
					file.removeEventListener(Event.SELECT, folderSelectHandler);
					
					installerFolder.text = file.nativePath; 
				}
			}
			
			private static const FILE_TYPE_XML		: String = "xmlType";
			private static const FILE_TYPE_FOLDER	: String = "folderType";
			
			protected function btnBrowseApplicationClickHandler(event:MouseEvent):void
			{
				browseFile(FILE_TYPE_XML);
			}
			
			protected function btnBrowseSDKClickHandler(event:MouseEvent):void
			{
				browseFile(FILE_TYPE_FOLDER);
			}
			
			private function browseFile(fileType : String):void
			{
				var filePath : String = fileType == FILE_TYPE_XML ? appPath : sdkPath;
				var file : File;
				
				try
				{
					file = new File(filePath);
				}
				catch (e:Error)
				{
					file = new File();
				}
				
				file.addEventListener(Event.SELECT, fileSelectHandler);
				file.addEventListener(Event.CANCEL, fileCancelHandler);
				
				if (fileType == FILE_TYPE_XML)
				{
					var fileFilter : FileFilter = new FileFilter("XML", "*.xml");
					file.browseForOpen("Select application", [fileFilter]);
					
				} 
				else if (fileType == FILE_TYPE_FOLDER)
				{
					file.browseForDirectory("Select sdk4.1 directory");
				}
				
				function fileSelectHandler (evt:Event) : void
				{
					file.removeEventListener(Event.SELECT, fileSelectHandler);
					file.removeEventListener(Event.CANCEL, fileCancelHandler);
					
					if (fileType == FILE_TYPE_XML)
					{
						appFileSelectedHandler(file.nativePath);
						
					} else if (fileType == FILE_TYPE_FOLDER)
					{
						sdkFolderSelectedHandler(file.nativePath);
					}
				}
				
				function fileCancelHandler (evt:Event) : void
				{
					file.removeEventListener(Event.SELECT, fileSelectHandler);
					file.removeEventListener(Event.CANCEL, fileCancelHandler);
				}
			}

			private function appFileSelectedHandler (filePath : String) : void
			{
				installerApplication.text = filePath;
				
				validateAppPath();
			}
			
			private function sdkFolderSelectedHandler (filePath : String) : void
			{
				sdkFolderTextInput.text = filePath;
				
				validateSDKPath();
			}
			
			public function get currentTemplate() : Template
			{
				if ( !ContextManager.templates || ContextManager.templates.length == 0 )
					return null;
				
				return ContextManager.templates.getItemAt( 0 ) as Template;
			}
			
			private function setTemplateBuildProperties () : void
			{
				if (!currentTemplate)
					return;
				
				currentTemplate.xmlStructure = templateStructure;
				
				currentTemplate.installerAppPath = appPath;
				currentTemplate.installerFolderPath = outputFolderPath;
				currentTemplate.installerFileName = outputFileName;
				
				shObject.data["sdk_4_1"] = sdkPath;
			}
			
			private function saveTemplate () : void
			{ 
				if (!currentTemplate)
				{
					AlertPopup.show("No opened template", "Error", OK, _dialog);
					return;
				}
				
				currentTemplate.addEventListener( Event.COMPLETE, templateSaveCompleteHandler );
				currentTemplate.addEventListener( ErrorEvent.ERROR, templateSaveErrorHandler );
				
				setTemplateBuildProperties();
				
				currentTemplate.save();
				
				function templateSaveCompleteHandler(evt:Event) : void
				{
					currentTemplate.removeEventListener( Event.COMPLETE, templateSaveCompleteHandler );
					
					try
					{
						var tplTargetFile : File = File.applicationStorageDirectory.resolvePath("assets/template.xml");
						currentTemplate.file.copyTo(tplTargetFile, true);
					}
					catch (e:Error)
					{
						AlertPopup.show("Can't save template", "Error", OK, _dialog);
						return;
					}
					
					compilePlayer();
				}
				
				function templateSaveErrorHandler(evt:Event) : void
				{
					currentTemplate.removeEventListener( ErrorEvent.ERROR, templateSaveErrorHandler );
					
					AlertPopup.show("Can't save template", "Error", OK, _dialog);
				}
			}
			
			private function compilePlayer():void
			{
				var installerPropertiesXmlPrepeared : Boolean = prepareInstallerPropertiesXml();
				
				var app : VDOMApplication = new VDOMApplication();
				app.stored = prepareInstallerApp();
				app.fileName = FileUtils.getFileName(appPath);
				
				if (!installerPropertiesXmlPrepeared)
				{
					AlertPopup.show("Can't prepare installer properties xml", "Error", OK, _dialog);
					return;
				}
				
				var sdkCompiler : SDKCompiler = new SDKCompiler();
				
				if (!sdkCompiler.hasEventListener(SDKCompilerEvent.SDK_COMPILER_COMPETE))
					sdkCompiler.addEventListener(SDKCompilerEvent.SDK_COMPILER_COMPETE, sdkCompilerEventHandler); 
				
				if (!sdkCompiler.hasEventListener(SDKCompilerEvent.SDK_COMPILER_ERROR))
					sdkCompiler.addEventListener(SDKCompilerEvent.SDK_COMPILER_ERROR, sdkCompilerEventHandler);
				
				ProgressManager.complete();
				ProgressManager.source = null;
				ProgressManager.start( ProgressManager.DIALOG_MODE, false );
				
				sdkCompiler.buildInstallerPackage (outputFolderPath, outputFileName, app, sdkPath, radioBtnGroupBuildType.selectedValue.toString());
				
				function sdkCompilerEventHandler (evt:SDKCompilerEvent) : void
				{
					sdkCompiler.removeEventListener(SDKCompilerEvent.SDK_COMPILER_COMPETE, sdkCompilerEventHandler);
					sdkCompiler.removeEventListener(SDKCompilerEvent.SDK_COMPILER_ERROR, sdkCompilerEventHandler);
					
					ProgressManager.complete();
					
					if (evt.message)
					{
						AlertPopup.show(evt.message,"", OK, _dialog);
					}
				}
			}
			
			private function prepareInstallerApp() : Boolean
			{
				if (!appPath || !validAppPath)
					return false;
				
				try
				{
					var sourceAppFile : File = new File(appPath);
					
					var targetAppFile : File = File.applicationStorageDirectory.resolvePath(FileUtils.getFileName(appPath));
					
					sourceAppFile.copyTo(targetAppFile, true);
				}
				catch (e:Error)
				{
					return false;
				}
				
				return true;
				
			}
			
			private function prepareInstallerPropertiesXml() : Boolean
			{
				var fileStream : FileStream = new FileStream();
				
				var targetXmlFile : File = File.applicationStorageDirectory.resolvePath("Installer-app.xml");
				
				var installerXML : XML;
				var targetXmlSource : String;
				
				try 
				{
					installerXML = installerTplXml;
					
					installerXML.id = "net.vdom." + currentTemplate.installerId;
					installerXML.name = currentTemplate.name;
					installerXML.filename = currentTemplate.name;
					
					installerXML.normalize();
					
					fileStream.open(targetXmlFile, FileMode.WRITE);
					fileStream.writeUTFBytes( '<?xml version="1.0" encoding="UTF-8"?>' + "\n" + installerXML.toXMLString() );
					fileStream.close();
				} 
				catch (e:Error)
				{
					fileStream.close();
					
					return false;
				}
				
				return true;
			}
			
			protected function btnBuildClickHandler(event:MouseEvent):void
			{
				saveTemplate();
			}
			
			protected function installerApplication_changeHandler(event:Event):void
			{
				validateAppPath();
			}
			
			private function validateAppPath():void
			{
				installerApplication.errorString = validAppPath ? null : "Error";
				
				buildBtn.enabled = validAppPath && validSDKPath;
			}
			
			private function get validAppPath () : Boolean
			{
				return compilerParamsChecker.isAppPathValid(appPath);
			}
			
			protected function sdkFolderTextInput_changeHandler(event:Event):void
			{
				validateSDKPath();
			}
			
			private function validateSDKPath():void
			{
				sdkFolderTextInput.errorString = validSDKPath ? null : "Error";
				
				buildBtn.enabled = validAppPath && validSDKPath;
			}
			
			private function get validSDKPath () : Boolean
			{
				return compilerParamsChecker.isSDKPathValid(sdkPath);
			}
			
			private function get buildAvailable (): Boolean
			{
				return validAppPath && validSDKPath;
			}
			
			public function linkHandler(event:TextEvent):void {
				// Open the link in a new browser window.
				navigateToURL(new URLRequest(event.text), '_blank')
			}
			
		]]>
	</mx:Script>
	
	<mx:VBox verticalGap="10"
			 paddingLeft="20" paddingRight="20" paddingTop="20" paddingBottom="20">
		<mx:VBox width="450" horizontalGap="3">
			<mx:Label text="Build installer" styleName="headerLabel" />
			<mx:Label text="Build and export VDOM Application Installer" />
			<mx:HRule width="100%" />
			<mx:Spacer height="20"/>
		</mx:VBox>
			 
		<mx:HBox width="450" horizontalGap="3">
			<mx:Label text="Output folder: " width="110"/>
			<mx:TextInput id="installerFolder" width="100%" editable="false" toolTip="{installerFolder.text}"/>
			<mx:Button label="Browse" click="btnOutputFolderClickHandler(event)" width="70"/>
		</mx:HBox>
		
		<mx:HBox width="450" horizontalGap="3">
			<mx:Label text="Output file name: " width="110"/>
			<mx:TextInput id="installerFileName" width="100%" restrict="a-zA-z0-9 \-_.()" toolTip="{installerFileName.text}"/>
			<mx:Spacer width="70"/>
		</mx:HBox>
		
		<mx:HBox width="450" horizontalGap="3">
			<mx:Label text="Application: " width="110"/>
			<mx:TextInput id="installerApplication" width="100%" 
						  editable="true" 
						  toolTip="{installerApplication.text}" 
						  change="installerApplication_changeHandler(event)"/>
			<mx:Button label="Browse" click="btnBrowseApplicationClickHandler(event)" width="70"/>
		</mx:HBox>
		
		<mx:HBox width="450" horizontalGap="3">
			<mx:Label text="SDK 4.1.0: " width="110"/>
			<mx:VBox width="100%" verticalAlign="middle" horizontalAlign="center" verticalGap="0">
				<mx:TextInput id="sdkFolderTextInput" width="100%" 
							  editable="true" 
							  toolTip="{sdkFolderTextInput.text}" 
							  change="sdkFolderTextInput_changeHandler(event)"/>
				
				<mx:Label link="linkHandler(event)" selectable="true" color="0x0000ff">
					<mx:htmlText>
						<![CDATA[<a href='http://fpdownload.adobe.com/pub/flex/sdk/builds/flex4/flex_sdk_4.1.0.16076A.zip'>Download Flex SDK</a>]]>
					</mx:htmlText>
				</mx:Label>
			</mx:VBox>
			<mx:Button label="Browse" click="btnBrowseSDKClickHandler(event)" width="70"/>
		</mx:HBox>
		
		<mx:VBox verticalGap="10"
				 top="10" bottom="10" left="10" right="10">
			
			<mx:VBox verticalGap="1">
				<mx:Label text="Export as: "/>
				<mx:RadioButtonGroup id="radioBtnGroupBuildType"/>
				
				<mx:RadioButton id="buildTypeNative"
								groupName="radioBtnGroupBuildType"
								label="Native installer"
								value="{SDKCompiler.PACKAGE_TYPE_NATIVE}"
								selected="true"/>
				
				<mx:RadioButton id="buildTypePackage"
								groupName="radioBtnGroupBuildType"
								label="AIR package"
								value="{SDKCompiler.PACKAGE_TYPE_AIR}"
								selected="false"/>
			</mx:VBox>
			
			<mx:Button id="buildBtn" label="Build" click="btnBuildClickHandler(event)" />
		</mx:VBox>
		
	</mx:VBox>
	
	<mx:ControlBar width="100%" height="100%" styleName="dlgFooter"/>
	
	
</ModalDialog>
