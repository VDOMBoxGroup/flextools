<?xml version="1.0" encoding="utf-8"?>
<SuperWindow xmlns="net.vdombox.powerpack.lib.extendedapi.containers.*"
			 xmlns:mx="http://www.adobe.com/2006/mxml"
			 width="400" height="300" visible="true"
			 titleIcon="@Embed(source='/assets/icons/icon_16.png')"
			 startPosition="centerParent"
			 alwaysInFront="false"
			 modal="true"
			 parentWindow="{NativeApplication.nativeApplication.activeWindow}"
			 showStatusBar="false"
			 minimizable="false"
			 resizable="false">

	<mx:Script>
		<![CDATA[
		import mx.containers.ControlBar;
		import mx.controls.Button;
		import mx.core.Container;
		import mx.events.CloseEvent;

		public static const YES : uint = 0x0001;
		public static const NO : uint = 0x0002;
		public static const OK : uint = 0x0004;
		public static const CANCEL : uint = 0x0008;

		public static var yesLabel : String = "Yes";
		public static var noLabel : String = "No";
		public static var okLabel : String = "OK";
		public static var cancelLabel : String = "Cancel";

		public static const BUTTON_NAME_YES : String = "YES";
		public static const BUTTON_NAME_NO : String = "NO";
		public static const BUTTON_NAME_OK : String = "OK";
		public static const BUTTON_NAME_CANCEL : String = "CANCEL";

		private var closeEvent : CloseEvent = new CloseEvent( CloseEvent.CLOSE );
		private var _closeHandler : Function;

		public function show( flags : uint = 0x4 /* Alert.OK */, closeHandler : Function = null, iconClass : Class = null, defaultButtonFlag : uint = 0x4 /* Alert.OK */ ) : void
		{

			buttonFlags = flags;

			var btnContainer : Object;

			for ( var i : int = numChildren - 1; i >= 0; i-- )
			{
				if ( getChildAt( i ) is ControlBar )
					btnContainer = getChildAt( i );
			}

			if ( !btnContainer )
				btnContainer = this;

			var button : Button;

			if ( buttonFlags & OK )
			{
				button = createButton( okLabel, BUTTON_NAME_OK, btnContainer as Container );

				button.visible = true;
				button.includeInLayout = true;

				if ( defaultButtonFlag == OK )
					defaultButton = button;
			}

			if ( buttonFlags & YES )
			{
				button = createButton( yesLabel, BUTTON_NAME_YES, btnContainer as Container );

				button.visible = true;
				button.includeInLayout = true;

				if ( defaultButtonFlag == YES )
					defaultButton = button;
			}

			if ( buttonFlags & NO )
			{
				button = createButton( noLabel, BUTTON_NAME_NO, btnContainer as Container );

				button.visible = true;
				button.includeInLayout = true;

				if ( defaultButtonFlag == NO )
					defaultButton = button;
			}

			if ( buttonFlags & CANCEL )
			{
				button = createButton( cancelLabel, BUTTON_NAME_CANCEL, btnContainer as Container );

				button.visible = true;
				button.includeInLayout = true;

				if ( defaultButtonFlag == CANCEL )
					defaultButton = button;
			}

			if ( iconClass )
				titleIcon = iconClass;

			addEventListener( Event.CLOSE, onClose );
			addEventListener( KeyboardEvent.KEY_DOWN, keyDownHandler );

			if ( closeHandler != null )
				_closeHandler = closeHandler;

		}

		private var buttonFlags : uint;

		private function createButton( label : String, name : String, bar : Container ) : Button
		{
			var button : Button = new Button();
			button.label = label;
			button.visible = false;
			button.includeInLayout = false;
			button.name = name;
			button.addEventListener( MouseEvent.CLICK, onDialogBtnClick );

			bar.addChild( button );

			return button;
		}

		override protected function keyDownHandler( event : KeyboardEvent ) : void
		{
			if ( event.keyCode == Keyboard.ESCAPE )
			{
				if ( (buttonFlags & CANCEL) || !(buttonFlags & NO) )
					removeDialog( BUTTON_NAME_CANCEL );
				else if ( buttonFlags & NO )
					removeDialog( BUTTON_NAME_NO );
			}
		}

		private function onDialogBtnClick( event : MouseEvent ) : void
		{
			var name : String = Button( event.currentTarget ).name;

			removeDialog( name );
		}

		protected function removeDialog( buttonPressed : String ) : void
		{
			switch ( buttonPressed )
			{
				case BUTTON_NAME_YES:
				{
					closeDetail = YES;
					break;
				}
				case BUTTON_NAME_NO:
				{
					closeDetail = NO;
					break;
				}
				case BUTTON_NAME_OK:
				{
					closeDetail = OK;
					break;
				}
				case BUTTON_NAME_CANCEL:
				{
					closeDetail = CANCEL;
					break;
				}
				default:
				{
					closeDetail = 0;
					break;
				}
			}

			close();
		}

		public function set closeDetail( detail : int ) : void
		{
			closeEvent.detail = detail;
		}

		private function onClose( event : Event ) : void
		{
			event.stopImmediatePropagation();

			removeEventListener( Event.CLOSE, onClose );

			if ( _closeHandler != null )
				addEventListener( CloseEvent.CLOSE, _closeHandler );

			dispatchEvent( closeEvent );
		}
		]]>
	</mx:Script>

</SuperWindow>