<?xml version="1.0" encoding="utf-8"?>
<ModalDialog
		xmlns="net.vdombox.powerpack.dialog.*"
		xmlns:mx="http://www.adobe.com/2006/mxml"
		width="500" height="455"
		title="{LanguageManager.sentences.properties}"
		creationComplete="onShow(event)"
		xmlns:controls="net.vdombox.powerpack.lib.extendedapi.controls.*" 
		xmlns:customize="net.vdombox.powerpack.customize.*"
		resizable="false">

	<customize:TemplateDefaultLogo id="defaultLogo" />
	
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import net.vdombox.powerpack.BuilderTemplate;
			import net.vdombox.powerpack.lib.extendedapi.utils.FileUtils;
			import net.vdombox.powerpack.lib.player.Template;
			import net.vdombox.powerpack.lib.player.managers.ContextManager;
			import net.vdombox.powerpack.lib.player.managers.LanguageManager;

		private static var _dialog	: TemplateProperties;
		
		static public function show( closeHandler : Function = null ) : TemplateProperties
		{

			if ( !_dialog || _dialog.closed )
			{
				_dialog = new TemplateProperties();
				_dialog.open();
				_dialog.show( OK | CANCEL, closeHandler, null, OK );

				var defaultCaptions : Object = {
					template_properties : "Template properties",
					template_name : "Template name",
					template_id : "Application ID",
					template_ID_tooltip : "The application identifier string, unique to this application. Required.",
					template_description : "Description",
					template_picture : "Template picture",
					template_use_picture : "Use picture",
					template_remove_pic : "Remove picture",
					template_key : "Template key",
					template_images : "Images"
				};

				LanguageManager.setSentences( defaultCaptions );
			}
			else
			{
				_dialog.activate();
			}

			return _dialog;
		}

		protected override function removeDialog( buttonPressed : String ) : void
		{
			switch ( buttonPressed )
			{

				case BUTTON_NAME_OK:
				{
					if ( _dialog.templatePicturePath && !_dialog.isCorrectImageFile )
					{}
					else
					{
						_dialog.closeDetail = ModalDialog.OK;
						_dialog.close();
					}

					break;
				}
				case BUTTON_NAME_CANCEL:
				{
					_dialog.closeDetail = ModalDialog.CANCEL;
					_dialog.close();
					break;
				}
				default:
				{
					_dialog.closeDetail = ModalDialog.CANCEL;
					_dialog.close();
					break;
				}
			}
		}

		public function get isCorrectImageFile() : Boolean
		{
			try
			{
				var templatePictureFile : File = new File( StringUtil.trim( templatePicturePath ) );
			}
			catch ( e : Error )
			{
				return false;
			}

			return FileUtils.correctImageFile( templatePictureFile );
		}

		private function onShow( event : Event ) : void
		{
			if ( !currentTemplate )
				return;

			txtName.text = currentTemplate.name;
			txtInstallerId.text = currentTemplate.installerId;
			txtDesc.text = currentTemplate.description;
			txtKey.text = currentTemplate.key;

			usePictureCheckBox.selected = currentTemplate.pictureFile || currentTemplate.b64picture;
			onUsePictureSelectionChanged(null);
			
			txtName.setFocus();
		}

		public function get currentTemplate() : BuilderTemplate
		{
			if ( !ContextManager.templates || ContextManager.templates.length == 0 )
				return null;

			return ContextManager.templates.getItemAt( 0 ) as BuilderTemplate;
		}

		public function get templatePicturePath() : String
		{
			if (!tplImg || !tplImg.source)
				return null;
			
			return StringUtil.trim( tplImg.source.toString() );
		}
		
		public function set templatePicturePath(picFilePath : String) : void
		{
			tplImg.source = picFilePath;
		}
			
		public function get templateB64Picture() : String
		{
			if (!b64Img || !b64Img.value)
				return null;
			
			return b64Img.value;
		}
		
		public function set templateB64Picture(base64Pic : String) : void
		{
			b64Img.value = base64Pic;
		}

		public function get templateName() : String
		{
			return txtName.text;
		}
			
		public function get templateInstallerId() : String
		{
			return txtInstallerId.text;
		}

		public function get templateDescription() : String
		{
			return txtDesc.text;
		}

		public function get templateKey() : String
		{
			return StringUtil.trim( txtKey.text );
		}

		private function onImageFilePathChange( evt : Event ) : void
		{
			try
			{
				if ( isCorrectImageFile )
				{
					showPictureFromFile( templatePicturePath );
				}
				else
				{
					hidePictureFromFile();
				}

			}
			catch ( e : Error )
			{
				hidePictureFromFile();
			}
		}

		protected function onPicBrowseClick(event:MouseEvent):void
		{
			var file : File = currentPictureFile;
			
			file.addEventListener(Event.SELECT, onPicFileSelect);
			
			var fileFilter : FileFilter = new FileFilter(LanguageManager.sentences.template_images, FileUtils.getImagesFileExtension());
			
			file.browseForOpen(LanguageManager.sentences.select_file, [fileFilter]);
		}
			
		private function get currentPictureFile() : File
		{
			var file : File;
			
			if (templatePicturePath)
			{
				try 
				{
					file = new File(templatePicturePath);
					
					if (!file.exists)
						file = null;
				} 
				catch (e:*) {
					file = null;
				}
			}
			
			if (!file)
				file = new File (File.documentsDirectory.nativePath);
			
			return file;
		}
			
		private function onPicFileSelect(evt:Event):void
		{
			var file:File = evt.target as File;
			
			file.removeEventListener(Event.SELECT, onPicFileSelect); 
			
			showPictureFromFile(file.nativePath);
		}
			
		protected function onUsePictureSelectionChanged(event:Event):void
		{
			useTemplatePicture = usePictureCheckBox.selected;
		}
			
		private function set useTemplatePicture (usePicture : Boolean) : void
		{
			if (usePicture)
			{
				showTemplatePicture();
			}
			else
			{
				hideTemplatePicture();
			}
		}
			
		private function showTemplatePicture():void
		{
			pictureGridRow.visible = true;
			pictureGridRow.includeInLayout = true;
			
			if ( currentTemplate.pictureFile )
			{
				showPictureFromFile(currentTemplate.pictureFile.nativePath);
			}
			else if ( currentTemplate.b64picture )
			{
				showBase64Picture( currentTemplate.b64picture );
			}
			else
			{
				showDefaultPicture();
			}
		}
			
		private function hideTemplatePicture():void
		{
			hidePictureFromFile();
			hideBase64Picture();
			
			pictureGridRow.visible = false;
			pictureGridRow.includeInLayout = false;
		}
			
		private function showPictureFromFile( imageSourcePath : String ) : void
		{
			hideBase64Picture();
			
			tplImg.addEventListener(Event.COMPLETE, onImageContentLoaded);
			
			tplImg.width = 98;
			tplImg.height = 98;
			
			templatePicturePath = imageSourcePath;
			
			tplImg.visible = true;
			tplImg.includeInLayout = true;
		}
		
		private function onImageContentLoaded(evt:Event):void
		{
			if (tplImg.content && tplImg.content is Bitmap)
			{
				tplImg.removeEventListener(Event.COMPLETE, onImageContentLoaded);
				
				var sourceBitmapData : BitmapData = Bitmap(tplImg.content).bitmapData; 
				
				if (sourceBitmapData.width < tplImg.width && sourceBitmapData.height < tplImg.height)
				{
					tplImg.width = sourceBitmapData.width;
					tplImg.height = sourceBitmapData.height;
				}
			}
			
		}
	
		private function hidePictureFromFile() : void
		{
			templatePicturePath = "";
			
			tplImg.visible = false;
			tplImg.includeInLayout = false;
		}

		private function showBase64Picture( imageSource : String ) : void
		{
			hidePictureFromFile();
			
			b64Img.width = 98;
			b64Img.height = 98;
			
			templateB64Picture = imageSource;
			
			b64Img.addEventListener("sourceChanged", onBase64ImageScaleContentChanged);
			
			b64Img.visible = true;
			b64Img.includeInLayout = true;
		}
			
		private function onBase64ImageScaleContentChanged(evt:Event):void
		{
			if (b64Img.source && b64Img.source is Bitmap)
			{
				b64Img.removeEventListener("sourceChanged", onBase64ImageScaleContentChanged);
				
				var sourceBitmapData : BitmapData = b64Img.source.bitmapData; 
				
				if (sourceBitmapData.width < b64Img.width && sourceBitmapData.height < b64Img.height)
				{
					b64Img.width = sourceBitmapData.width;
					b64Img.height = sourceBitmapData.height;
				}
			}
				
		}
				
		private function hideBase64Picture() : void
		{
			templateB64Picture = "";
			
			b64Img.visible = false;
			b64Img.includeInLayout = false;
		}
		
		private function showDefaultPicture() : void
		{
			showBase64Picture(defaultLogo.strLogo);
		}
			
		]]>
	</mx:Script>
	<mx:VBox styleName="dlgHeader" width="100%">
		<mx:Label text="{LanguageManager.sentences.template_properties}" styleName="headerLabel" />
	</mx:VBox>

	<mx:HRule width="100%" />

	<mx:VBox styleName="dlgContent" 
			 height="362" width="100%"
			 horizontalAlign="left">
		
		<mx:Grid>

			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="100" height="100%">
					<mx:Label text="{LanguageManager.sentences.template_name}:" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:TextInput width="300" id="txtName" />
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="100" height="100%">
					<mx:Label text="{LanguageManager.sentences.template_id}:" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:TextInput width="300" id="txtInstallerId" 
								  toolTip="{LanguageManager.sentences.template_ID_tooltip}"
								  restrict="a-zA-Z0-9\-_()."/>
				</mx:GridItem>
			</mx:GridRow>

			<mx:GridRow width="100%" height="90">
				<mx:GridItem width="100" height="100%">
					<mx:Label text="{LanguageManager.sentences.template_description}:" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:TextArea width="300" height="90" id="txtDesc" />
				</mx:GridItem>
			</mx:GridRow>

			<mx:GridRow width="100%" height="10">
				<mx:GridItem width="100%" height="100%" colSpan="2">
					<mx:HRule width="100%" />
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="100" height="100%">
					<mx:Label text="{LanguageManager.sentences.template_key}:" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:TextInput id="txtKey" width="300" />
				</mx:GridItem>
			</mx:GridRow>
			
			<mx:GridRow width="100%" height="15">
				<mx:GridItem width="100%" height="100%" colSpan="2">
					<controls:HDivider label="{LanguageManager.sentences.template_picture}" />
				</mx:GridItem>
			</mx:GridRow>

			<mx:GridRow width="100%" height="22">
				<mx:GridItem width="100%" height="100%">
					<mx:CheckBox id="usePictureCheckBox" 
								 label="{LanguageManager.sentences.template_use_picture}"
								 change="onUsePictureSelectionChanged(event)"
								 selected="true"/>
				</mx:GridItem>
			</mx:GridRow>

			<mx:GridRow id="pictureGridRow" 
						width="100%" height="100" 
						verticalAlign="middle">
				<mx:GridItem id="pictureGridColumn" 
							 width="100" height="100"
							 verticalAlign="middle" horizontalAlign="center">
					<mx:Image id="tplImg"
							  width="100%" height="100%"
							  scaleContent="true" maintainAspectRatio="true"
							  autoLoad="true"
							  verticalAlign="middle" horizontalAlign="center"/>
					
					<controls:Base64Image id="b64Img"
										  width="100%" height="100%"
										  scaleContent="true" maintainAspectRatio="true"
										  autoLoad="true"
										  verticalAlign="middle" horizontalAlign="center"/>
				</mx:GridItem>
				
				<mx:GridItem width="100%" height="100" verticalAlign="middle">
					<mx:Button id="btnBrowsePic"
							   label="{LanguageManager.sentences.browse}..."		
							   click="onPicBrowseClick(event)"/>
					
				</mx:GridItem>
			</mx:GridRow>

		</mx:Grid>
	</mx:VBox>

	<mx:HRule width="500" />

	<mx:ControlBar width="500" styleName="dlgFooter">
	</mx:ControlBar>

</ModalDialog>
