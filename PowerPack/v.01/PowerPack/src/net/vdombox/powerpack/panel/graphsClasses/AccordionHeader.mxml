<?xml version="1.0" encoding="utf-8"?>
<CanvasButtonAccordionHeader
	xmlns="flexlib.containers.accordionClasses.*" 
	xmlns:flexlib="http://code.google.com/p/flexlib/" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off"
	doubleClickEnabled="true" 
	mouseChildren="true"
	dragEnter="dragEnterHandler(event);"
	dragDrop="dragDropHandler(event);">
	
	<mx:Script>
		<![CDATA[
		import net.vdombox.powerpack.lib.ExtendedAPI.containers.SuperAlert;

		import mx.binding.utils.BindingUtils;
		import mx.containers.Accordion;
		import mx.controls.Alert;
		import mx.controls.TextInput;
		import mx.core.Container;
		import mx.core.EdgeMetrics;
		import mx.core.FlexTextField;
		import mx.core.IUIComponent;
		import mx.core.IUITextField;
		import mx.core.UITextField;
		import mx.core.Window;
		import mx.events.DragEvent;
		import mx.events.FlexEvent;
		import mx.managers.DragManager;
		import mx.managers.FocusManager;
		import mx.managers.PopUpManager;
		import mx.utils.ArrayUtil;

		import net.vdombox.powerpack.graph.GraphCanvas;
		import net.vdombox.powerpack.managers.LanguageManager;
		import net.vdombox.powerpack.panel.Graphs;

		/**
		 *  A reference to the UITextField that displays the status bar's text.
		 */
		private var labelTextField : IUITextField;

		public var txtInput : TextInput;

		private var _isEditing : Boolean;

		[Bindable]
		private var _label : String;

		override public function set label( value : String ) : void {
			if ( _label != value ) {
				super.label = "";

				_label = value;

				if ( labelTextField )
					labelTextField.text = _label;

				if ( txtInput )
					txtInput.text = _label;
			}
		}

		override protected function createChildren() : void {
			super.createChildren();

			if ( !labelTextField ) {
				labelTextField = IUITextField( createInFontContext( UITextField ) );
				labelTextField.text = _label;
				labelTextField.styleName = getStyle( "labelTextStyleName" );
				labelTextField.enabled = true;
				labelTextField.doubleClickEnabled = true;
				labelTextField.addEventListener( MouseEvent.DOUBLE_CLICK, doubleClickHandler );

				boxHeader.addChildAt( labelTextFieldAsDisplayObj, 0 );
			}
			if ( !txtInput ) {
				txtInput = new TextInput();
				txtInput.text = _label;
				txtInput.styleName = getStyle( "inputTextStyleName" );

				txtInput.addEventListener( FocusEvent.FOCUS_OUT, endEdit );
				txtInput.addEventListener( FlexEvent.ENTER, endEdit );
				txtInput.addEventListener( KeyboardEvent.KEY_DOWN, endEdit );
				txtInput.addEventListener( FocusEvent.FOCUS_IN, onFocus );

				function onFocus( event : Event ) : void {
					event.stopPropagation();
				}
			}
		}

		override protected function measure() : void {
			super.measure();

			var parentMetrics : EdgeMetrics = Container( parent ).viewMetricsAndPadding;
			var parentContentArea : Object = {
				w: Container( parent ).getExplicitOrMeasuredWidth() - parentMetrics.left - parentMetrics.right,
				h: Container( parent ).getExplicitOrMeasuredHeight() - parentMetrics.top - parentMetrics.bottom };

			measuredWidth = parentContentArea.w;
		}

		/**
		 *  @private
		 */
		override protected function updateDisplayList( unscaledWidth : Number, unscaledHeight : Number ) : void {
			super.updateDisplayList( unscaledWidth, unscaledHeight );

			boxHeader.setActualSize( unscaledWidth, unscaledHeight );

			var boxEdges : EdgeMetrics = boxHeader.viewMetricsAndPadding;
			cbarHeader.move( boxHeader.width - boxEdges.left - boxEdges.right - cbarHeader.getExplicitOrMeasuredWidth(), cbarHeader.y );

			if ( boxHeader.contains( labelTextFieldAsDisplayObj ) ) {
				lblFieldResize();
			}

			if ( txtInput && boxHeader.contains( txtInput ) ) {
				edtFieldResize();
			}
		}

		public function beginEdit() : void {
			if ( _isEditing )
				return;

			_isEditing = true;

			showTextInput();

			edtFieldResize();

			txtInput.setFocus();

			deactivateErrorString();

			invalidateDisplayList();
		}

		private function activateErrorString() : void {
			txtInput.errorString = LanguageManager.sentences['msg_enter_unique_category_label'];
		}

		private function deactivateErrorString() : void {
			txtInput.errorString = null;
		}

		public function endEdit( event : Event ) : void {
			if ( !_isEditing )
				return;

			deactivateErrorString();

			var bCommit : Boolean = true;
			var bEndEdit : Boolean = true;

			if ( event is KeyboardEvent ) {
				if ( KeyboardEvent( event ).keyCode == Keyboard.ESCAPE ) {
					revertChanges();
				}
				else if ( KeyboardEvent( event ).keyCode == Keyboard.ENTER ) {
					commitChanges();
				}
				return;
			}

			if ( event is FocusEvent && event.type == FocusEvent.FOCUS_OUT )
				revertChanges();

		}

		private function commitChanges() : void {
			var evt : GraphsAccordionEvent = new GraphsAccordionEvent( GraphsAccordionEvent.CAPTION_VALUE_ENTERED );
			evt.accordHeader = this;

			accordChild.dispatchEvent( evt );
		}

		private function revertChanges() : void {
			_isEditing = false;

			txtInput.text = _label;

			applyCorrectHeaderlabel();
		}

		public function set uniqueCategoryName( unique : Boolean ) : void {
			if ( !unique ) {
				applyErrorHeaderLabel();
				return;
			}

			_isEditing = false;

			label = txtInput.text;
			accordChild.label = txtInput.text;

			applyCorrectHeaderlabel();

			var evt : GraphsAccordionEvent = new GraphsAccordionEvent( GraphsAccordionEvent.CAPTION_CHANGED );
			accordChild.dispatchEvent( evt );
		}

		private function applyCorrectHeaderlabel() : void {
			showTextLabel();

			lblFieldResize();

			invalidateDisplayList();
		}

		private function showTextInput() : void {
			if ( boxHeader.contains( labelTextFieldAsDisplayObj ) )
				boxHeader.removeChild( labelTextFieldAsDisplayObj );

			if ( !boxHeader.contains( txtInput ) )
				boxHeader.addChildAt( txtInput, 0 );
		}

		private function showTextLabel() : void {
			if ( boxHeader.contains( txtInput ) ) {
				stage.focus = null;
				boxHeader.removeChild( txtInput );
			}

			if ( !boxHeader.contains( labelTextFieldAsDisplayObj ) )
				boxHeader.addChildAt( labelTextFieldAsDisplayObj, 0 );
		}

		public function get labelTextFieldAsDisplayObj() : DisplayObject {
			return labelTextField as DisplayObject;
		}

		private function applyErrorHeaderLabel() : void {
			txtInput.setFocus();

			activateErrorString();

			invalidateDisplayList();
		}

		public function get accordChild() : AccordionChild {
			return data as AccordionChild;
		}

		private function removeTextField() : void {

		}

		private function getTxtFieldWidth() : int {
			var boxEdges : EdgeMetrics = boxHeader.viewMetricsAndPadding;
			var width : int = boxHeader.width - cbarHeader.getExplicitOrMeasuredWidth() -
									  boxEdges.left - boxEdges.right;

			return width;
		}

		private function lblFieldResize() : void {
			var lblWidth : int = getTxtFieldWidth();
			labelTextField.text = _label;
			labelTextField.x = 2;
			labelTextField.y = (boxHeader.height - labelTextField.textHeight) / 2 - 2;
			labelTextField.width = lblWidth - labelTextField.x;

			if ( labelTextField.x + labelTextField.textWidth > lblWidth )
				labelTextField.truncateToFit( "..." );
		}

		private function edtFieldResize() : void {
			var edtWidth : int = getTxtFieldWidth();

			txtInput.width = edtWidth;
		}

		private function doubleClickHandler( event : Event ) : void {
			beginEdit();
		}

		/**
		 *  @private
		 */
		private function closeTabHandler( event : Event ) : void {
			event.stopPropagation();

			var e : Event = new GraphsAccordionEvent( GraphsAccordionEvent.TAB_CLOSING, null, true, true );
			accordChild.dispatchEvent( e );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
			else {
				event.preventDefault();
				accordChild.parent.removeChild( accordChild );
				accordChild.dispatchEvent( new GraphsAccordionEvent( GraphsAccordionEvent.TAB_CLOSE ) );
			}
		}

		private function dragEnterHandler( event : DragEvent ) : void {
			if ( event.dragSource.hasFormat( "items" ) &&
						 event.dragSource.dataForFormat( "items" ) &&
						 (event.dragSource.dataForFormat( "items" ) as Array).length > 0 ) {
				if ( (event.dragSource.dataForFormat( "items" ) as Array)[0] is GraphCanvas &&
							 event.target.data.lstGraphs != event.dragInitiator ) {
					DragManager.acceptDragDrop( IUIComponent( event.target ) );
					DragManager.showFeedback( DragManager.MOVE );
				}
			}
		}

		private function dragDropHandler( event : DragEvent ) : void {
			var items : Array = event.dragSource.dataForFormat( "items" ) as Array;

			if ( items[0] is GraphCanvas ) {
				var graph : GraphCanvas = items[0] as GraphCanvas;
				var source : AccordionChild = AccordionChild( event.dragInitiator.parent );
				var destination : AccordionChild = AccordionChild( event.target.data );

				source.graphs.removeItemAt( source.graphs.getItemIndex( graph ) );
				graph.category = destination.label;
				destination.graphs.addItem( graph );

				var evt : GraphsAccordionEvent = new GraphsAccordionEvent( GraphsAccordionEvent.SELECTED_GRAPH_CHANGED, graph );
				destination.dispatchEvent( evt );
			}
		}
		]]>
	</mx:Script>
	
	<mx:Canvas id="boxHeader">

		<mx:ControlBar id="cbarHeader" horizontalAlign="right" paddingBottom="2" paddingLeft="2"
					   paddingRight="2" paddingTop="2">
		
			<flexlib:CanvasButton 
				paddingTop="0"
				paddingLeft="0"
				paddingBottom="0"
				paddingRight="0"
				cornerRadius="2"
				click="closeTabHandler(event);">
				<mx:Label id="label_x" text="x"/>
			</flexlib:CanvasButton>
				
		</mx:ControlBar>
		
	</mx:Canvas>
		
</CanvasButtonAccordionHeader>
