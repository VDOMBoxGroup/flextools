<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300" layout="absolute"
				horizontalAlign="center"
				showCloseButton="false"
				creationComplete="show();"
				defaultButton="{btnOk}">
	<mx:Script>
		<![CDATA[
			import mx.containers.HBox;
			import mx.containers.VBox;
			import mx.controls.Label;
			import mx.controls.RadioButton;
			import mx.controls.TextArea;
			import mx.controls.TextInput;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import net.vdombox.powerpack.managers.LanguageManager;

		public static const QM_QUESTION : int = 1;
		public static const QM_CHOICE : int = 2;
		public static const QM_BROWSE : int = 3;

		static private var defaultCaptions : Object = {
			question : "Question",
			answer : "Answer"
		}

		static private var _classConstructed : Boolean = classConstruct();

		static private function classConstruct() : Boolean
		{
			LanguageManager.setSentences( defaultCaptions );
			return true;
		}

		public var mode : int;
		private var strQuestion : String = "";
		private var strTitle : String = "";
		public var arrAnswers : Array;

		public var strAnswer : String;
		public var strFilter : String;

		private var answerTextInput		: TextArea;
		private var filePathTextInput	: TextInput;

		private var fCloseHandler : Function;

		private var dSize : Boolean = false;

		private function show() : void
		{
			btnOk.addEventListener( MouseEvent.CLICK, okClickHandler );

			btnOk.setFocus();

			txtQuestion.text = strQuestion;
			title = strTitle;

			if ( mode == QM_QUESTION )
				answerTextInput.setFocus();
			else if ( mode == QM_BROWSE )
				btnOk

			addEventListener( CloseEvent.CLOSE, onClosing );

			invalidateDisplayList();
		}

		public static function show( question : String = "", title : String = "", mode : int = QM_QUESTION, answers : Array = null, filter : String = null, parent : Sprite = null, closeHandler : Function = null ) : Question
		{

			if ( !parent )
				parent = Sprite( Application.application );

			var dialog : Question = new Question();

			dialog.strQuestion = question;
			dialog.strTitle = title;
			dialog.fCloseHandler = closeHandler;
			dialog.arrAnswers = answers ? answers : [];

			dialog.mode = mode;
			dialog.strFilter = filter ? StringUtil.trim( filter ) : null;

			PopUpManager.addPopUp( dialog, parent, true );
			PopUpManager.centerPopUp( dialog );

			return dialog;
		}

		override protected function createChildren() : void
		{
			super.createChildren();

			if ( cnvsAnswer.numChildren == 0 )
			{
				if ( mode == QM_QUESTION )
				{
					answerTextInput = new TextArea();
					answerTextInput.percentWidth = 100;
					answerTextInput.percentHeight = 100;
					cnvsAnswer.addChild( answerTextInput );
					answerTextInput.addEventListener( TextEvent.TEXT_INPUT, onTextInput );

					btnOk.enabled = false;
				}
				else if ( mode == QM_CHOICE )
				{
					var vBox : VBox = new VBox();
					vBox.percentWidth = 100;
					vBox.percentHeight = 100;
					cnvsAnswer.addChild( vBox );

					for ( var i : int = 0; i < arrAnswers.length; i++ )
					{
						var radBtn : RadioButton = new RadioButton();
						radBtn.groupName = "radioGroup";

						radBtn.value = radBtn.label = arrAnswers[i];
						vBox.addChild( radBtn );

						if ( i == 0 )
							radBtn.selected = true;
					}
				}
				else if ( mode == QM_BROWSE )
				{
					var hBox : HBox = new HBox();
					hBox.percentWidth = 100;
					hBox.percentHeight = 100;
					hBox.setStyle( 'horizontalGap', 4 );
					cnvsAnswer.addChild( hBox );

					var btnBrowse : Button = new Button();
					btnBrowse.setStyle( 'paddingLeft', 2 );
					btnBrowse.setStyle( 'paddingRight', 2 );
					btnBrowse.setStyle( 'paddingTop', 0 );
					btnBrowse.setStyle( 'paddingBottom', 0 );
					btnBrowse.label = LanguageManager.sentences.browse + "...";
					btnBrowse.addEventListener( MouseEvent.CLICK, browseClickHandler );
					hBox.addChild( btnBrowse );
					
					filePathTextInput = new TextInput();
					filePathTextInput.setStyle( 'borderStyle', "none" );
					filePathTextInput.setStyle( 'backgroundAlpha', 0.15 );
					filePathTextInput.text = "";
					filePathTextInput.enabled = false;
					filePathTextInput.editable = false;
					filePathTextInput.percentWidth = 100;
					
					
					
					hBox.addChild( filePathTextInput );

				}
			}
		}

		override protected function updateDisplayList( unscaledWidth : Number, unscaledHeight : Number ) : void
		{
			super.updateDisplayList( unscaledWidth, unscaledHeight );

			var dHeight : int = cnvsAnswer.maxVerticalScrollPosition;
			var dWidth : int = cnvsAnswer.maxHorizontalScrollPosition;

			if ( !dSize && (dWidth || dHeight) )
			{
				dSize = true;

				var container : DisplayObjectContainer = cnvsAnswer.parent;

				while ( container != this )
				{
					container = container.parent;
					if ( dWidth )
						container.width += dWidth;
					if ( dHeight )
						container.height += dHeight;
				}

				if ( dWidth || dHeight )
					callLater( PopUpManager.centerPopUp, [this] );
			}
		}

		private function closeDialog() : void
		{
			if ( answerTextInput || filePathTextInput )
			{
				var txtObj : Object = answerTextInput ? answerTextInput : filePathTextInput;
				strAnswer = txtObj.text;

				strAnswer = StringUtil.trim( strAnswer );

				if ( strAnswer.length == 0 )
				{
					strAnswer = null;
					
					if (txtObj is TextInput)
					{
						txtObj.setFocus();
						txtObj.setSelection( 0, txtObj.length );
					}
					
					return;
				}
			}
			else if ( radioGroup.numRadioButtons > 0 )
			{
				if ( !radioGroup.selectedValue )
					return;
				strAnswer = radioGroup.selectedValue.toString();
			}

			dispatchEvent( new CloseEvent( CloseEvent.CLOSE ) );
		}

		private function onClosing( event : Event ) : void
		{
			removeEventListener( CloseEvent.CLOSE, onClosing );

			event.preventDefault();
			event.stopPropagation();
			event.stopImmediatePropagation();

			removeDialog();

			if ( fCloseHandler != null )
			{
				addEventListener( CloseEvent.CLOSE, fCloseHandler );
				dispatchEvent( new CloseEvent( CloseEvent.CLOSE ) );
			}
		}

		private function removeDialog() : void
		{
			visible = false;
			PopUpManager.removePopUp( this );
		}

		private function onTextInput( event : TextEvent ) : void
		{
			btnOk.enabled = event.target.text || event.text ? true : false;
		}

		private function browseClickHandler( event : MouseEvent ) : void
		{
			var filter : FileFilter = new FileFilter(
					StringUtil.substitute( LanguageManager.sentences.file + " ({0})", strFilter ? strFilter : '*.*' ),
					strFilter ? strFilter : '*.*' );

			var file : File = new File();

			file.addEventListener( Event.SELECT, fileSelectHandler );
			
			if ( strFilter )
				file.browseForOpen( LanguageManager.sentences.select_file + '...', [filter] );
			else
				file.browseForOpen( LanguageManager.sentences.select_file + '...' );
		}

		private function fileSelectHandler( event : Event ) : void
		{
			filePathTextInput.text = event.target.nativePath;
			filePathTextInput.toolTip = event.target.nativePath;
		}

		private function okClickHandler( event : MouseEvent ) : void
		{
			closeDialog();
		}
		]]>
	</mx:Script>

	<mx:VBox height="100%" width="100%" horizontalAlign="center">
		<mx:Canvas width="100%" height="100%" label="{LanguageManager.sentences.question}">
			<mx:HBox verticalAlign="top" left="10" top="10" bottom="10" right="10">
				<mx:Image source="@Embed('/assets/images/Question.png')" />
				<mx:Text width="100%" height="100%" id="txtQuestion" />
			</mx:HBox>
		</mx:Canvas>
		<mx:HRule width="95%" />
		<mx:Canvas width="100%" height="100%" label="{LanguageManager.sentences.answer}">
			<mx:HBox left="10" right="10" top="10" bottom="10">
				<mx:Image source="@Embed('/assets/images/User.png')" autoLoad="true" />
				<mx:Canvas width="100%" height="100%" id="cnvsAnswer">
					<mx:RadioButtonGroup id="radioGroup" />
				</mx:Canvas>
				<mx:Canvas height="100%">
					<mx:Button label="Ok" bottom="0" id="btnOk" width="100%" />
				</mx:Canvas>
			</mx:HBox>
		</mx:Canvas>
	</mx:VBox>

</mx:TitleWindow>
