<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 initialize="init()"
		 creationComplete="creationCompleteHandler(event)"
		 height="100%" xmlns:control="net.vdombox.powerpack.control.*" xmlns:graphsClasses="net.vdombox.powerpack.panel.graphsClasses.*" xmlns:controlbar="net.vdombox.powerpack.control.controlbar.*">

	<mx:XML id="templateXML"></mx:XML>
	
	<mx:Metadata>
		[Event(name="templateChanged", type="flash.events.Event")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.binding.utils.*;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.containers.TabNavigator;
			import mx.containers.ViewStack;
			import mx.controls.Alert;
			import mx.controls.ComboBox;
			import mx.controls.List;
			import mx.core.UITextField;
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			import mx.utils.NameUtil;
			import mx.utils.ObjectProxy;
			
			import net.vdombox.powerpack.control.controlbar.ControlBarEvent;
			import net.vdombox.powerpack.control.controlbar.GraphEditorControlBar;
			import net.vdombox.powerpack.dialog.EditCaption;
			import net.vdombox.powerpack.dialog.ModalDialog;
			import net.vdombox.powerpack.graph.GraphCanvas;
			import net.vdombox.powerpack.graph.GraphCanvasEvent;
			import net.vdombox.powerpack.graph.Node;
			import net.vdombox.powerpack.lib.extendedapi.containers.tabnavigator.ViewNavigator;
			import net.vdombox.powerpack.lib.extendedapi.utils.ObjectUtils;
			import net.vdombox.powerpack.lib.extendedapi.utils.Utils;
			import net.vdombox.powerpack.lib.player.managers.ContextManager;
			import net.vdombox.powerpack.lib.player.managers.LanguageManager;
			import net.vdombox.powerpack.lib.player.popup.AlertPopup;
			import net.vdombox.powerpack.lib.player.template.TemplateProject;
			import net.vdombox.powerpack.managers.BuilderContextManager;
			import net.vdombox.powerpack.managers.ProgressManager;
			import net.vdombox.powerpack.panel.graphsClasses.AccordionChild;
			import net.vdombox.powerpack.panel.graphsClasses.GraphThumb;
			import net.vdombox.powerpack.panel.graphsClasses.GraphsAccordionEvent;
			import net.vdombox.powerpack.template.BuilderTemplate;

		static private var defaultCaptions : Object = {
			none : "none",
			lbl_new : "New",
			lbl_rename : "Rename",
			lbl_copy : "Copy",
			lbl_delete : "Delete",
			lbl_help : "Help",
			initial_graph : "Initial Graph",
			graph_explorer : "Graph Explorer",
			alert_delete_graph_title : "Confirmation",
			alert_delete_graph_text : "Are you sure you want to remove selected graph?"
		}

		static private var _classConstructed : Boolean = classConstruct();

		static private function classConstruct() : Boolean
		{
			LanguageManager.setSentences( defaultCaptions );
			return true
		}

		static public const TPL_POPULATE_COMPLETE	: String = "populateComplete";
		static public const TPL_CHANGED				: String = "templateChanged";

		//--------------------------------------------------------------------------
		//
		//  Variables and properties
		//
		//--------------------------------------------------------------------------

		public var vsViewStack : ViewNavigator;
			
		public var graphEditorControlBar : GraphEditorControlBar;
		
		private function set curTab (tab : AccordionChild) : void
		{
			if (graphsAccordion)
				graphsAccordion.selectedChild = tab;
		}
			
		private function get curTab () : AccordionChild
		{
			return graphsAccordion.selectedChild as AccordionChild;
		}
		
		private function set curGraph (graph : GraphCanvas) : void
		{
			if (!curTab)
				return;
			
			curTab.lstGraphs.selectedItem = graph;
		}
		
		private function get curGraph () : GraphCanvas
		{
			if (!curTab)
				return null;
			
			return curTab.lstGraphs.selectedItem as GraphCanvas;
		}
		
		private var tabMap : Dictionary = new Dictionary();

		[Bindable]
		public static var graphs : ArrayCollection = new ArrayCollection();

		//--------------------------------------------------------------------------
		//
		//  Class methods
		//
		//--------------------------------------------------------------------------

		private function init() : void
		{
			// We need to repopulate graphs if templateXML has been changed
			BindingUtils.bindSetter( populateGraphs, this, "templateXML" );
		}
			
		protected function creationCompleteHandler(event:FlexEvent):void
		{
			if (graphEditorControlBar && !graphEditorControlBar.hasEventListener(ControlBarEvent.EVENT_ITEM_CLICK))
				graphEditorControlBar.addEventListener(ControlBarEvent.EVENT_ITEM_CLICK, graphEditor_controlBarItemClickHandler);
			
			if (vsViewStack)
			{
				vsViewStack.addEventListener(ChildExistenceChangedEvent.CHILD_REMOVE, viewStack_childRemoveHandler);
				vsViewStack.addEventListener(Event.CHANGE, tabIndexChangeHandler);
			}
		}
			
		private function viewStack_childRemoveHandler (event : ChildExistenceChangedEvent) : void
		{
			if (vsViewStack.numChildren <= 1)
				graphEditorControlBar.updateButtonsState(null);
				
		}
		
		private function tabIndexChangeHandler (event : Event) : void
		{
			for each (var graph : GraphCanvas in vsViewStack)
			{
				if (graph.hasEventListener(GraphCanvasEvent.SELECTION_CHANGED))
					graph.removeEventListener(GraphCanvasEvent.SELECTION_CHANGED, graphSelectionChangeHandler);
			}
			
			var openedGraph : GraphCanvas = vsViewStack.selectedChild as GraphCanvas;
			
			graphEditorControlBar.updateButtonsState(openedGraph);
			
			openedGraph.addEventListener(GraphCanvasEvent.SELECTION_CHANGED, graphSelectionChangeHandler);
			
		}
			
		private function graphSelectionChangeHandler (event : GraphCanvasEvent) : void
		{
			graphEditorControlBar.updateButtonsState(event.target as GraphCanvas);
		}
			
		private function selectedProjectChanged (selProject : TemplateProject) : void
		{
			if (selProject)
			{
				var selectedProjectInitialGraph : GraphCanvas = getGraphByName(selProject.initialGraphName);
				
				selectGraph ( selectedProjectInitialGraph );
			}
		}
		
		private function graphEditor_controlBarItemClickHandler (controlBarEvent : ControlBarEvent) : void
		{
			var selectedGraph : GraphCanvas = vsViewStack.selectedChild as GraphCanvas;  
			
			if (!selectedGraph)
				return;
			
			selectedGraph.controlBarItemClickHandler(controlBarEvent.targetItemType, controlBarEvent.destinationObjectType);
		}
		
		public function clear() : void
		{
			for each ( var child : DisplayObject in graphsAccordion.getChildren() )
			{
				AccordionChild( child ).graphs.removeAll();
			}
			graphsAccordion.removeAllChildren();
			tabMap = new Dictionary();

			for each ( var obj : Object in graphs )
			{
				if ( obj is GraphCanvas )
					GraphCanvas( obj ).dispose();
			}
			
			try
			{
				graphs.removeAll();
			} 
			catch (e:Error) 
			{
				trace ("Error on graphs.removeAll()");
			}

			selectGraph( null );

			dispatchEvent( new Event( TPL_CHANGED ) );
		}

			
		protected function createNewCategory():void
		{
			EditCaption.show( "New category", onCategoryDialogClose, onCategoryDialogCheckLabel );
			
			function onCategoryDialogClose( event : CloseEvent ) : void
			{
				if ( event.detail == ModalDialog.OK )
				{
					var categoryLabel : String = event.target.txtCaption.text;
					
					createCategoryTab( categoryLabel );
				}
			}
			
			function onCategoryDialogCheckLabel( categoryLabel : String ) : void
			{
				EditCaption.correctCategory = checkCategoryLabelUnique( categoryLabel );
			}
		}
		
		public function createCategoryTab( label : String) : AccordionChild
		{
			var graphAccordionChild : AccordionChild = new AccordionChild();
			graphAccordionChild.label = label;
			
			graphsAccordion.addChild( graphAccordionChild );
			
			graphAccordionChild.lstGraphs.addEventListener( ListEvent.CHANGE, changeLstGraphsHandler );
			graphAccordionChild.lstGraphs.addEventListener( MouseEvent.DOUBLE_CLICK, doubleClickHandler );

			graphAccordionChild.lstGraphs.addEventListener( GraphsAccordionEvent.GRAPH_VALUE_ENTERED, onLstGraphsValueChecked );
			graphAccordionChild.lstGraphs.addEventListener( GraphsAccordionEvent.GRAPH_VALUE_EDITING_COMPLETE, onLstGraphsEditingComplete );

			graphAccordionChild.addEventListener( GraphsAccordionEvent.GRAPH_VALUE_EDITING_COMPLETE, onLstGraphsEditingComplete );

			graphAccordionChild.addEventListener( GraphsAccordionEvent.TAB_CLOSING, closingEditLstGraphsHandler );

			graphAccordionChild.addEventListener( GraphsAccordionEvent.CAPTION_VALUE_ENTERED, captionValueEnteredHandler );
			graphAccordionChild.addEventListener( GraphsAccordionEvent.CAPTION_CHANGED, captionChangedHandler );

			dispatchEvent( new Event( TPL_CHANGED ) );

			return graphAccordionChild;
		}

		public function checkCategoryLabelUnique( categoryLabel : String, targetCategoryName : String = "" ) : Boolean
		{
			if ( !categoryLabel )
				return false;

			for each ( var tab : AccordionChild in graphsAccordion.getChildren() )
			{
				if ( tab.name == targetCategoryName )
					continue;

				if ( tab.label == categoryLabel )
				{
					return false;
				}
			}

			return true;
		}

		public function addGraph( graph : GraphCanvas, processAfterAdding : Boolean = true ) : void
		{
			graphs.addItem( graph );
			
			graph.initial = currentTemplate.isInitialGraphForAnyProject(graph.name);
			
			sortGraphs();

			graph.addEventListener(FlexEvent.CREATION_COMPLETE, graph_creationCompleteHandler);
			
			var graphAccordionChild : AccordionChild = null;

			for each ( var tab : AccordionChild in graphsAccordion.getChildren() )
			{
				if ( tab.label == graph.category )
				{
					graphAccordionChild = tab;
					break;
				}
			}

			if ( !graphAccordionChild )
				graphAccordionChild = createCategoryTab( graph.category );

			if ( curTab == graphAccordionChild )
				graphAccordionChild.graphs.addItem( graph );
			else
			{
				if ( !tabMap[graphAccordionChild] )
					tabMap[graphAccordionChild] = new Dictionary();

				tabMap[graphAccordionChild][graph] = graph;
			}

			dispatchEvent( new Event( TPL_CHANGED ) );
			
			function graph_creationCompleteHandler (event : FlexEvent) : void
			{
				event.target.removeEventListener(FlexEvent.CREATION_COMPLETE, graph_creationCompleteHandler);
				
				graph.addEventListener( GraphCanvasEvent.GRAPH_CHANGED, onGraphChange );
				graph.addEventListener( GraphCanvasEvent.JUMP_TO_GRAPH, onJumpToGraph );
			}
		}
			
		private function get currentTemplate() : BuilderTemplate
		{
			return BuilderContextManager.currentTemplate;
		}


		public function findFirstGraph() : GraphCanvas
		{
			if (currentTemplate && currentTemplate.selectedProject)
			{
				var selectedProjectInitialGraph : GraphCanvas = getGraphByName(currentTemplate.selectedProject.initialGraphName);
				
				if (selectedProjectInitialGraph)
					return selectedProjectInitialGraph;
			}
					
			for each( var child : AccordionChild in graphsAccordion.getChildren() )
			{
				if ( tabMap[child] )
				{
					var arr : ArrayCollection = getTabMapGraphs( child, true );
					if ( arr.length > 0 )
						return arr[0];
				}
				else if ( child.graphs.length > 0 )
					return child.graphs.getItemAt( 0 ) as GraphCanvas;
			}
			return null;
		}
			
		public function selectGraph( graph : GraphCanvas ) : void
		{
			if ( !graph )
			{
				if ( curTab )
					curTab.lstGraphs.selectedIndex = -1;

				graphsAccordion.selectedIndex = -1;
				vsViewStack.selectedIndex = -1;
			}
			else
			{
				for each( var child : AccordionChild in graphsAccordion.getChildren() )
				{
					var index : int = child.graphs.getItemIndex( graph );
					if ( index >= 0 )
						break;
				}

				if ( index < 0 )
				{
					for ( var obj : Object in tabMap )
					{
						child = obj as AccordionChild;
						var arr : ArrayCollection = getTabMapGraphs( child );
						index = arr.getItemIndex( graph );
						if ( index >= 0 )
						{
							populateTab( child );
							break;
						}
					}
				}

				if ( index >= 0 )
				{
					if ( curTab && curTab != child )
						curTab.lstGraphs.selectedIndex = -1;

					curTab = child;
					curGraph = graph;

					curTab.lstGraphs.scrollToIndex( curTab.graphs.getItemIndex( curGraph ) );

					if ( !vsViewStack.contains( graph ) )
					{
						addGraphToViewStack (graph);
					}
					vsViewStack.selectedChild = graph;
				}
			}
		}
			
		public function addGraphToViewStack (graph : GraphCanvas) : void
		{
			ProgressManager.start( null, false );
			
			vsViewStack.addChild( graph );
			graph.addEventListener(GraphCanvasEvent.SELECTION_CHANGED, graphSelectionChangeHandler);
			
			if (graph.creationCompleted)
				graphCreationCompleteHandler();
			else
				graph.addEventListener( FlexEvent.CREATION_COMPLETE, graphCreationCompleteHandler );
			
			function graphCreationCompleteHandler( event : FlexEvent = null) : void
			{
				graph.removeEventListener( FlexEvent.CREATION_COMPLETE, graphCreationCompleteHandler );
				
				ProgressManager.complete();
			}
		}

		public function populateGraph( xml : XML ) : void
		{
			if ( !xml )
				return;

			var graphXML : XML = xml;
			var newGraph : GraphCanvas = new GraphCanvas();
			newGraph.xml = graphXML;

			addGraph( newGraph, false );
		}

		/**
		 *	Fill in viewstack, list and combobox with graphs
		 */
		public function populateGraphs( xml : XML ) : void
		{
			if ( !xml )
				return;

			ProgressManager.show( ProgressManager.DIALOG_MODE, false );
			populateGraphs_01();

			function populateGraphs_01() : void
			{

				for each( var cat : XML in xml.categories.category )
				{
					var exists : Boolean = false;
					for each ( var tab : AccordionChild in graphsAccordion.getChildren() )
					{
						if ( tab.label == cat.@name )
						{
							exists = true;
							break;
						}
					}

					if ( !exists )
						createCategoryTab( cat.@name );
				}

				for each ( var graphXML : XML in templateXML.elements( "graph" ) )
				{
					populateGraph( graphXML );
				}

				ProgressManager.complete();

				dispatchEvent( new Event( TPL_CHANGED ) );
				dispatchEvent( new Event( TPL_POPULATE_COMPLETE ) );
				
				BindingUtils.bindSetter( selectedProjectChanged, currentTemplate, "selectedProject");
			}
		}
		
		/**
		 *	Gen XML that represents template
		 */
		public function toXML() : XML
		{
			var structXML : XML = new XML( <structure/> );

			structXML.appendChild( <categories/> );
			for each ( var tab : AccordionChild in graphsAccordion.getChildren() )
			{
				var tabXML : XML = XML( <category/> );
				tabXML.@name = tab.label;
				structXML.categories.appendChild( tabXML );
			}

			for each ( var graph : GraphCanvas in graphs )
			{
				var graphXML : XML = graph.toXML();
				structXML.appendChild( graphXML );
			}

			return structXML;
		}

		public function getNodeByName( name : String, graphName:String="" ) : Node
		{
			var node : Node;
			var graph : GraphCanvas;
			
			if (graphName!="")
			{
				graph = getGraphByName(graphName);
				node = getNodeInGraph();
				
				return node;
			}
			
			for each( graph in graphs )
			{
				node = getNodeInGraph();
				
				if (node)
					return node;
			}
				
			function getNodeInGraph () : Node
			{
				if (!graph)
					return null;
				
				if (!graph.creationCompleted && graph.containsNodeInXml(name))
				{
					graph.fromXML();
				}
				
				return graph.getNodeByName(name);
			}
				
			return node;
		}

		public function showNodeByName( name : String, graphName:String="" ) : Node
		{
			var node : Node = getNodeByName( name, graphName );
			if ( node )
			{
				showGraphByName( node.parent.name );
				node.scrollToNode();
			}
				
			return node;
		}
		
		public function getGraphByName( name : String ) : GraphCanvas
		{
			for each( var graph : GraphCanvas in graphs )
			{
				if ( graph.name == name )
					return graph;
			}
			return null;
		}

		public function showGraphByName( name : String ) : GraphCanvas
		{
			var graph : GraphCanvas = getGraphByName( name );
			if ( !graph )
			{
				AlertPopup.show( LanguageManager.sentences['msg_no_graph_by_name'], LanguageManager.sentences['error'] ); 
				return null;
			}

			selectGraph( graph );

			return graph;
		}

		private function getTabMapGraphs( tab : AccordionChild, sorted : Boolean = false ) : ArrayCollection
		{
			var arr : ArrayCollection = new ArrayCollection();

			if ( !tabMap[tab] )
				return arr;

			for each ( var graph : GraphCanvas in tabMap[tab] )
			{
				arr.addItem( graph );
			}

			if ( sorted )
			{
				var sort : Sort = new Sort();
				sort.fields = [new SortField( 'name', true )];
				arr.sort = sort;
				arr.refresh();
			}

			return arr;
		}

		//--------------------------------------------------------------------------
		//
		//  Event handlers
		//
		//--------------------------------------------------------------------------

		private function tabChangeHandler( event : IndexChangedEvent ) : void
		{
			var tab : AccordionChild = event.relatedObject as AccordionChild;

			if ( tabMap[tab] )
			{
				populateTab( tab );
			}
		}

		private function populateTab( tab : AccordionChild ) : void
		{
			if ( tabMap[tab] )
			{
				for each ( var graph : GraphCanvas in tabMap[tab] )
				{
					tab.graphs.addItem( graph );
					delete tabMap[tab]
				}

				delete tabMap[tab];
			}
		}

		private function changeLstGraphsHandler( event : Event) : void
		{
			event.preventDefault();
			event.stopImmediatePropagation();
		}
			
		private function closingEditLstGraphsHandler( event : Event ) : void
		{
			var accordChild : AccordionChild = event.currentTarget as AccordionChild;

			if ( accordChild.graphs && accordChild.graphs.length > 0 ||
						 tabMap[accordChild] && ObjectUtils.dictLength( tabMap[accordChild] ) > 0 )
			{
				event.preventDefault();
				AlertPopup.show( LanguageManager.sentences['msg_cannot_remove_nonempty_cat'] );
				return;
			}
			
			if (accordChild.parent.numChildren == 1)
			{
				event.preventDefault();
				AlertPopup.show( "You can't remove the last category." );
				return;
			}
			
			var confirmRemoveMsg : String = "Are you sure you want to remove '"+ accordChild.label  +"' category?"
			
			AlertPopup.show(
				confirmRemoveMsg,
				LanguageManager.sentences['alert_delete_graph_title'],
				Alert.YES | Alert.NO, null, deleteCategoryAlertCloseHandler, null, Alert.YES );
			
			function deleteCategoryAlertCloseHandler( event : CloseEvent ) : void
			{
				if ( event.detail == Alert.YES )
				{
					removeCategory (accordChild);
				}
			}
		}

		private function removeCategory (accordChild : AccordionChild) : void
		{
			if (!accordChild)
				return;
			
			accordChild.parent.removeChild( accordChild );
			
			accordChild.dispatchEvent( new GraphsAccordionEvent( GraphsAccordionEvent.TAB_CLOSE ) );

		}
			
		private function onLstGraphsValueChecked( event : GraphsAccordionEvent ) : void
		{
			var selectedAccordionChild : AccordionChild = graphsAccordion.selectedChild as AccordionChild;
			var selectedGraphIndex : int = selectedAccordionChild.lstGraphs.selectedIndex;
			var selectedGraph : GraphCanvas = selectedAccordionChild.graphs[selectedGraphIndex];

			selectedAccordionChild.uniqueGraphName = isUniqueGraphNameInGlobal( selectedAccordionChild.newGraphName, selectedGraph );
		}

		private function onLstGraphsEditingComplete( event : GraphsAccordionEvent ) : void
		{
			if (event.graph && editableGraphLastName && editableGraphLastName != event.graph.name)
			{
				currentTemplate.updateProjectsInitGraphName(editableGraphLastName, event.graph.name);
				editableGraphLastName = "";
			}
				
			vsViewStack.invalidateDisplayList();
			
			dispatchEvent( new Event( TPL_CHANGED ) );
			
			sortGraphs();
		}

		private function onSelectedGraphChanged( event : GraphsAccordionEvent ) : void
		{
			if ( event.graph )
				selectGraph( event.graph );
		}

		private function captionValueEnteredHandler( event : GraphsAccordionEvent ) : void
		{
			if ( !event.accordHeader )
			{
				throw Error( "Accordion header is undefined" );
				return;
			}

			var accordChild : AccordionChild = event.target as AccordionChild;
			var categoryLabel : String = event.accordHeader.txtInput.text;

			event.accordHeader.uniqueCategoryName = checkCategoryLabelUnique( categoryLabel, accordChild.name );
		}

		private function captionChangedHandler( event : Event ) : void
		{
			var categoryLabel : String = event.target.label;
			var categoryName : String = event.target.name;

			for each( var graph : GraphCanvas in AccordionChild( event.target ).graphs )
			{
				graph.category = categoryLabel;
			}

			dispatchEvent( new Event( TPL_CHANGED ) );
		}

		private function onGraphChange( event : GraphCanvasEvent ) : void
		{
			event.stopImmediatePropagation();
			
			dispatchEvent( new Event( TPL_CHANGED ) );
		}
			
		private function onJumpToGraph(event : GraphCanvasEvent) : void
		{
			if (!event.graphToJumpName)
				return;
			
			showGraphByName(event.graphToJumpName);
		}
			
		private function createNewGraph() : void
		{
			var child : AccordionChild = AccordionChild( graphsAccordion.selectedChild );

			if ( !child )
				return;

			var newGraph : GraphCanvas = new GraphCanvas();

			newGraph.label = newGraph.name;
			newGraph.category = child.label;
			
			addGraph( newGraph );
			
			if (graphs.source.length == 1)
			{
				editableGraphLastName = newGraph.name;
				currentTemplate.updateProjectsInitGraphName ("", newGraph.name);
			}

			selectGraph( newGraph );

			child.lstGraphs.scrollToIndex( child.graphs.getItemIndex( newGraph ) );

			child.lstGraphs.editable = true;
			child.lstGraphs.editedItemPosition = {rowIndex : child.lstGraphs.selectedIndex, columnIndex : 0};

			dispatchEvent( new Event( TPL_CHANGED ) );
		}

		private function doubleClickHandler (event : MouseEvent) : void
		{
			if (event.target is  UITextField)
				renameGraph();
			else if (event.target is GraphThumb)
				selectGraph( event.target.data );
			else if (event.target.parent && event.target.parent is GraphThumb)
				selectGraph( event.target.parent.data );
		}
			
		private var editableGraphLastName : String;
		private function renameGraph() : void
		{
			if ( !curGraph )
				return;

			editableGraphLastName = curGraph.name;

			curTab.lstGraphs.editable = true;
			curTab.lstGraphs.editedItemPosition = {rowIndex : curTab.lstGraphs.selectedIndex, columnIndex : 0};
		}
			
		private function exportGraph () : void
		{
			if ( !curGraph )
				return;
			
			var curGraphXML : XML = curGraph.toXML();
			
			if (!curGraphXML)
				return;
			
			currentTemplate.exportGraph(curGraphXML);
		}

		private function copyGraph() : void
		{
			var child : AccordionChild = AccordionChild( graphsAccordion.selectedChild );

			if ( !curGraph )
				return;

			var newGraph : GraphCanvas = curGraph.clone();

			newGraph.name = NameUtil.createUniqueName( newGraph );
			newGraph.name = createUniqueGraphName( curGraph.name );
			newGraph.label = newGraph.name;

			addGraph( newGraph );

			selectGraph( newGraph );

			child.lstGraphs.scrollToIndex( child.graphs.getItemIndex( newGraph ) );

			child.lstGraphs.editable = true;
			child.lstGraphs.editedItemPosition = {rowIndex : child.lstGraphs.selectedIndex, columnIndex : 0};

			dispatchEvent( new Event( TPL_CHANGED ) );
		}

		public function createUniqueGraphName( name : String ) : String
		{
			var index : int = 1;
			var isUniqueName : Boolean = true;
			var newName : String = name + '_' + index;

			do
			{
				newName = name + '_' + index;
				isUniqueName = isUniqueGraphNameInGlobal( newName, null );

				index++;
			} while ( !isUniqueName )

			return newName;
		}

		private function isUniqueGraphNameInCategory( graphName : String, category : Object, currentGraph : GraphCanvas = null ) : Boolean
		{
			for each ( var obj : Object in category )
			{
				if ( obj == currentGraph )
					continue;

				if ( obj.name == graphName )
				{
					return false;
				}
			}

			return true;
		}

		public function isUniqueGraphNameInGlobal( graphName : String, currentGraph : GraphCanvas ) : Boolean
		{
			for each ( var accordionChild : AccordionChild in graphsAccordion.getChildren() )
			{
				if ( !isUniqueGraphNameInCategory( graphName, accordionChild.graphs, currentGraph ) )
					return false;
			}

			return true;
		}

		private function confirmToDeleteGraph() : void
		{
			if ( graphs.length == 1 )
			{
				AlertPopup.show("You can not remove the last graph.");
				return;
			}
			
			AlertPopup.show(
					LanguageManager.sentences['alert_delete_graph_text'],
					LanguageManager.sentences['alert_delete_graph_title'],
					Alert.YES | Alert.NO, null, deleteGraphAlertCloseHandler, null, Alert.YES );
			
			function deleteGraphAlertCloseHandler (event : CloseEvent) : void
			{
				if ( event.detail == Alert.YES )
				{
					deleteGraph();
				}
			}
			
		}
			
		private function deleteGraph () : void
		{
			if ( !curGraph)
				return;
			
			var graphToRemove : GraphCanvas = curGraph;
			
			var newIndex : int = curTab.lstGraphs.selectedIndex - 1;
			newIndex = newIndex < 0 ? 0 : newIndex;
			
			var removedGraphName : String = graphToRemove.name;
			
			graphs.removeItemAt( graphs.getItemIndex( graphToRemove ) );
			
			sortGraphs();
			
			curTab.graphs.removeItemAt( curTab.lstGraphs.selectedIndex );
			graphToRemove.dispose();
			
			graphToRemove.removeEventListener( GraphCanvasEvent.GRAPH_CHANGED, onGraphChange );
			graphToRemove.removeEventListener( GraphCanvasEvent.JUMP_TO_GRAPH, onJumpToGraph );
			
			if ( curTab.graphs.length > 0 )
			{
				selectGraph( curTab.graphs[newIndex] );
			}
			else
			{
				var index : int = graphsAccordion.getChildIndex( curTab );
				var graphToSelect : GraphCanvas;
				
				for ( var i : int = index - 1; i >= 0; i-- )
				{
					var tab : AccordionChild = graphsAccordion.getChildAt( i ) as AccordionChild;
					
					if ( tabMap[tab] )
					{
						var arr : ArrayCollection = getTabMapGraphs( tab, true );
						if ( arr.length > 0 )
							graphToSelect = arr[0];
					}
					else if ( tab.graphs.length > 0 )
					{
						graphToSelect = tab.graphs.getItemAt( 0 ) as GraphCanvas;
					}
					
					if ( graphToSelect )
						break;
				}
				
				if ( !graphToSelect )
					graphToSelect = findFirstGraph();
				
				selectGraph( graphToSelect );
			}
			
			dispatchEvent( new Event( TPL_CHANGED ) );
			
			var firstGraphName : String = "";
			if (graphs && graphs.source && graphs.source.length > 0)
				firstGraphName = GraphCanvas(graphs.source[0]).name;
			
			currentTemplate.updateProjectsInitGraphName(removedGraphName, firstGraphName);
		}

		
			
		public static function getGraphByName (graphName : String) : GraphCanvas
		{
			for each (var graph : GraphCanvas in graphs.source)
			{
				if (graph.name == graphName)
					return graph;
			}
			
			return null;
		}
			
		private function sortGraphs () : void
		{
			var sort : Sort = new Sort();
			sort.fields = [new SortField( 'className', true, true ), new SortField( 'name', true )];

			graphs.sort = sort;
			graphs.refresh();
		}
		
		private const GRAPH_FILTER_DEF_TEXT	: String = "Graph filter";
			
		protected function graphFilter_changeHandler(event:Event):void
		{
			if ( graphFilter.text.length > 0 && graphFilter.text != GRAPH_FILTER_DEF_TEXT )
			{
				findGraphs();
			}
			else
			{
				cancelFindGraphs();
			}
		}
			
		private function findGraphs() : void
		{
			founsGraphs.removeAll(); 
			
			for each ( var graph : GraphCanvas in graphs )
			{
				if ( graph.name.toLowerCase().indexOf(graphFilter.text.toLowerCase()) >= 0)
					founsGraphs.addItem(graph);
			}
			
			graphsAccordionsViewStack.selectedChild = filteredGraphsBox;
			
			ctrlBar.lock();
		}
		
		private function cancelFindGraphs() : void
		{
			founsGraphs.removeAll();
			
			graphsAccordionsViewStack.selectedChild = normalGraphsBox;
			
			ctrlBar.unLock();
		}
			
		private function foundGraphsDoubleClickHandler (event : MouseEvent) : void
		{
			if (event.target.parent && 
				(event.target is  UITextField || event.target.parent is GraphThumb))
				selectGraph( event.target.parent.data );
			else if (event.target is GraphThumb)
				selectGraph( event.target.data );
		}
	
		[Bindable]
		public var founsGraphs : ArrayCollection = new ArrayCollection();
		
		protected function graphFilter_focusInHandler(event:FocusEvent):void
		{
			if ( graphFilter.text == GRAPH_FILTER_DEF_TEXT )
				graphFilter.text = "";
		}
		
		protected function graphFilter_focusOutHandler(event:FocusEvent):void
		{
			if ( graphFilter.text == "" )
				graphFilter.text = GRAPH_FILTER_DEF_TEXT;
		}
			
		private var foundCategory : AccordionChild  = new AccordionChild(); 
			
		protected function ctrlBar_itemClickHandler(event:ControlBarEvent):void
		{
			switch (event.targetItemType)
			{
				case GraphsControlBar.ITEM_TYPE_CREATE_NEW_CATEGORY:
				{
					createNewCategory();
					break;
				}
					
				case GraphsControlBar.ITEM_TYPE_CREATE_NEW_GRAPH:
				{
					createNewGraph()
					break;
				}
					
				case GraphsControlBar.ITEM_TYPE_RENAME_GRAPH:
				{
					renameGraph();
					break;
				}
					
				case GraphsControlBar.ITEM_TYPE_EXPORT_GRAPH:
				{
					exportGraph();
					break;
				}
					
				case GraphsControlBar.ITEM_TYPE_COPY_GRAPH:
				{
					copyGraph();
					break;
				}
					
				case GraphsControlBar.ITEM_TYPE_DELETE_GRAPH:
				{
					confirmToDeleteGraph();
					break;
				}
			}
			
		}
			
		public function findValue (value : String, useWholeWord : Boolean = false) : Array
		{
			var resultArray : Array = [];
			
			for each ( var graph : GraphCanvas in graphs )
			{
				var resultStates : Array = graph.findValue(value, useWholeWord);
				
				if (resultStates && resultStates.length > 0)
					resultArray.push( {"graph": graph, "states": resultStates} );
			}
			
			return resultArray;
		}
			
		public static function get allVariables () : Array
		{
			var variables : Array = [];
			
			for each (var graph : GraphCanvas in graphs)
			{
				variables = variables.concat(graph.allVariables);
			}
			
			variables = Utils.filterArrayUniqueValues(variables);
			
			variables.sort();
			
			return variables;
		}
		
		protected function graphsFindAccordion_initializeHandler(event:FlexEvent):void
		{
			foundCategory.label = "Graphs found";
			
			graphsFindAccordion.addChild( foundCategory );
			
			foundCategory.lstGraphs.addEventListener( MouseEvent.DOUBLE_CLICK, foundGraphsDoubleClickHandler );
			
			foundCategory.graphs = founsGraphs;
			foundCategory.setStyle("headerRenderer", null);	
		}
			
		]]>
	</mx:Script>

	<mx:Panel width="100%" height="100%" layout="absolute" title="{LanguageManager.sentences.graph_explorer}">

		<mx:VBox width="100%" height="100%" verticalGap="0">

			<controlbar:GraphsControlBar id="ctrlBar" width="100%"
										 itemClick="ctrlBar_itemClickHandler(event)"/>
			
			<mx:TextInput id="graphFilter" width="100%" 
						  text="{GRAPH_FILTER_DEF_TEXT}" fontStyle="italic"
						  change="graphFilter_changeHandler(event)" 
						  focusIn="graphFilter_focusInHandler(event)" 
						  focusOut="graphFilter_focusOutHandler(event)"/>
			
			<mx:ViewStack id="graphsAccordionsViewStack" 
						width="100%" height="100%">
				
				<mx:Box width="100%" height="100%"
						id="normalGraphsBox">
					<mx:Accordion id="graphsAccordion"
								  change="tabChangeHandler(event);"
								  headerRenderer="net.vdombox.powerpack.panel.graphsClasses.AccordionHeader"
								  fontFamily="Verdana" borderStyle="solid" 
								  width="100%" height="100%"/>
				</mx:Box>
				
				<mx:Box width="100%" height="100%"
						id="filteredGraphsBox">
					<mx:Accordion id="graphsFindAccordion"
								  width="100%" height="100%"
								  fontFamily="Verdana" borderStyle="solid"
								  initialize="graphsFindAccordion_initializeHandler(event)"/>
				</mx:Box>	
			</mx:ViewStack>
			

		</mx:VBox>

	</mx:Panel>

</mx:VBox>