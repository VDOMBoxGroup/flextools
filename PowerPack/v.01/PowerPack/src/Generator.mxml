<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ExtendedAPI="ExtendedAPI.com.controls.*"
	xmlns:resources="PowerPack.customize.*"
	width="770" height="450" verticalAlign="middle" horizontalAlign="center" layout="absolute"	 
	showStatusBar="false" showGripper="false"
	title="{LanguageManager.sentences.app_title}"
	titleIcon="@Embed(source='assets/icons/icon_16.png')" 
	titleBarFactory="PowerPack.customize.core.windowClasses.GeneratorTitleBar"
	statusBarFactory="PowerPack.customize.core.windowClasses.SuperStatusBar"	
	initialize="init()" 
	applicationComplete="show()"
	updateComplete="complete()">
	
	<mx:Style source="style/generator.css"/>
	
	<mx:Fade alphaFrom="0.0" alphaTo="1.0" duration="300" id="canvasShow"/>
	<mx:Fade alphaFrom="1.0" alphaTo="0.0" duration="300" id="canvasHide"/>

 	<mx:Parallel id="picShow">
    	<mx:Move xBy="20" xTo="{tplPic.x}" duration="400"/>
    	<mx:Fade alphaFrom="0" alphaTo="1" duration="400"/>
  	</mx:Parallel>	

	<resources:GeneratorResources id="resources"/>
	
    <mx:XML format="e4x" id="fileMenuData">
        <root> 
	        <menuitem label="{LanguageManager.sentences.menu_file}" id="file">
	            <menuitem label="{LanguageManager.sentences.menu_open_file}" id="open_file"/>
	            <!--menuitem label="{LanguageManager.sentences.menu_run_template}" id="run_template" enabled="false"/-->
	            <!--menuitem label="{LanguageManager.sentences.menu_install_app}" id="install_app" enabled="false"/-->
	            <menuitem type="separator"/>
	            <menuitem label="{LanguageManager.sentences.menu_exit}" id="exit"/>                                                
	        </menuitem>
	        <menuitem label="{LanguageManager.sentences.menu_parameters}" id="parameters">
	            <menuitem label="{LanguageManager.sentences.menu_language}" id="language"/>        
	            <menuitem label="{LanguageManager.sentences.menu_connection}" id="connection"/>        
	            <menuitem label="{LanguageManager.sentences.menu_properties}" id="properties"/>        
	        </menuitem>        
	        <menuitem label="?" id="help"/>
        </root>
    </mx:XML>
    	
	<mx:Script>
		<![CDATA[
			import PowerPack.com.Template;
			import mx.core.Application;
			import flash.utils.getTimer;
			import ExtendedAPI.com.containers.SuperAlert;
			import PowerPack.com.managers.ConnectionManager;
			import generated.webservices.Install_applicationResultEvent;
			import vdom.connection.protect.MD5;
			import vdom.connection.protect.Code;
			import generated.webservices.Close_sessionResultEvent;
			import generated.webservices.List_applicationsResultEvent;
			import mx.rpc.events.FaultEvent;
			import generated.webservices.Open_sessionResultEvent;
			import PowerPack.com.utils.CryptUtils;
			import generated.webservices.Vdom;
			import PowerPack.com.BasicError;
			import GraphicAPI.imageProcessing.Filters;
			import GraphicAPI.GraphicUtils;
			import mx.utils.GraphicsUtil;
			import mx.graphics.codec.PNGEncoder;
			import PowerPack.com.menu.MenuGeneral;
			import PowerPack.com.dialog.GenConnection;
			import PowerPack.com.dialog.GenProperties;
			import mx.events.EffectEvent;
			import mx.events.IndexChangedEvent;
			import PowerPack.com.gen.TemplateStruct;
			import PowerPack.com.dialog.ModalDialog;
			import PowerPack.com.dialog.TemplateKey;
			import PowerPack.com.managers.ProgressManager;
			import ExtendedAPI.com.utils.FileUtils;
			import mx.utils.StringUtil;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import PowerPack.com.managers.ContextManager;
			import PowerPack.com.managers.LanguageManager;			
			import mx.controls.ProgressBarMode;
			
       			
			private var vsLastChanged:DisplayObject;
			private var appGenerated:Boolean;
			private var appInstalled:Boolean;
			private var timer:Number;
			
			private function init():void 
			{
				var defaultCaptions:Object = {

					app_title:"Power Pack Player",
					msg_input_template_key: "Please, input valid template key",	
					msg_exit_app:"Are you sure want to exit?",
					msg_tpl_proceed_with_errs: "Error(s) exist in template\nProceed with launch?",
					msg_gen_welcome: "Lorem ipsum dolor sit amet",
					msg_gen_finish: "Lorem ipsum dolor sit amet",
					
					msg_save_appxml_to_server: "Save application xml to server.",
					msg_connecting_fault: "A fault occured contacting the server. Fault message is:",
					msg_try_to_reconnect: "Try to reconnect.",
					msg_save_appxml_to_file: "Save application xml to file.",
					msg_saving_appxml_fault: "A fault occured saving application xml. Fault message is:",
					msg_proceed_interrupt_app_installing: "Are you sure want to interrupt process?",
					msg_creation_app_interrupted: "Application creation process has been interrupted by user.",
					
					prgrs_gen_tpl: "Generating application xml. Progress %3%%",
					prgrs_save_to_server_tpl: "Saving to server. Progress %3%%",
					prgrs_save_to_file_tpl: "Saving to file. Progress %3%%",
					prgrs_launch_app: "Launching %3%%",
					
					errs_in_tpl: "Errors in template",
					menu_run_template:"_Run",
					gen_result: "Result",
					virtual_host_name: "Virtual host name",
					save_to_server: "Save to server",
					save_to_file: "Save to file"
				};
				
				LanguageManager.setSentences(defaultCaptions);				
				
				if(File.applicationDirectory.resolvePath('style/generator.swf').exists)
					StyleManager.loadStyleDeclarations("style/generator.swf");			
			}
			
			private function show():void
			{
				addEventListener(Event.CLOSING, closingApplicationHandler);
	       		
	       		function closingApplicationHandler(event:Event):void {
	       			event.preventDefault();
	       			exitApplication();	   
	       		}
	       		
	       		mnMain.enabled = true;
	       					
				var file:File;
				var fileStream:FileStream;
				
        	    for each ( file in [ContextManager.instance.dataStorage, 
        	    					ContextManager.instance.settingStorage] )
        	    {
        	    	if(!file.exists)
        	    		file.createDirectory();
        	    }
        	    
				// Load application settings
	            ContextManager.loadSettings();
	            
	            // Fill language menu
	            MenuGeneral.updateLangMenu(fileMenuData);
	            
	            // fill last files menu
	            MenuGeneral.updateLastFilesMenu(fileMenuData);
	            
				// Load language file
				file = File.applicationDirectory.resolvePath("lang/"+ContextManager.instance.lang.file);
	            if(file && file.exists)
	            {
					fileStream = new FileStream();									
					fileStream.addEventListener(Event.COMPLETE, onLanguageLoad);
					fileStream.openAsync(file, FileMode.READ);
	            }
	            
	  		}
	  		
	  		private function complete():void
	  		{
				/*var pngEncoder:PNGEncoder = new PNGEncoder();
				var data:ByteArray = pngEncoder.encode(Filters.reflection(GraphicUtils.objToBitmapData(this)));
				
   				var file:File = new File();
				var fileStream:FileStream = new FileStream();

   				/*file.url = FileUtils.pathToUrl('c:/out.png'); 					
				fileStream.open(file, FileMode.WRITE);
				fileStream.writeBytes(data);
				fileStream.close();*/	            
			}

	       	private function exitApplication(event:Event=null):void
	       	{
       			SuperAlert.show(
       				LanguageManager.sentences['msg_exit_app'],
       				LanguageManager.sentences['confirmation'], 
       				Alert.YES|Alert.NO, null, alertExitHandler, null, Alert.NO);

			    function alertExitHandler(event:CloseEvent):void {
		        	if(event.detail==Alert.YES) {   
						ContextManager.saveSettings();
		       			exit();
		   	     	}
				}
	       	}
			
			private function labelFunction(item:Object):String
			{
				var _item:XML = XML(item);				
				return _item.@label.toString().replace("_", "");
			}
						
			//--------------------------------------------------------------------------
		    //
		    //  Event handlers
		    //
		    //--------------------------------------------------------------------------
		    
	        private function onLanguageLoad(event:Event):void
	        {
        		var fileStream:FileStream = event.target as FileStream;
        		var xml:XML = XML(fileStream.readUTFBytes(fileStream.bytesAvailable));
				fileStream.close();
        		
				LanguageManager.languageXML = xml;
				
				ContextManager.instance.lang.label = LanguageManager.languageXML.@label.toLowerCase();
				ContextManager.instance.lang.file = LanguageManager.languageXML.@data;
	        }		
	            
	        private function onTemplateLoad(event:Event):void
	        {
        		var fileStream:FileStream = event.target as FileStream;
        		var xml:XML = XML(fileStream.readUTFBytes(fileStream.bytesAvailable));
				fileStream.close();
				
				var template:Template = new Template(xml);
				
        		if(ContextManager.instance.templates.length==0)
	    			ContextManager.instance.templates.addItem(template);
    			else
    				ContextManager.instance.templates[0] = template;

   				if(ContextManager.instance.templates[0].picture) {
					tplPic.visible = false;
   					tplPic.source = ContextManager.instance.templates[0].picture;
					tplPic.visible = true;
   				}

				if(template.isEncoded)
				{
					processStep(cKeyRequest);
				}
				else
				{
        			openTemplate();				
				}
	        }	        
            
            private function onKeyAccept(event:Event):void
            {            	
            	openTemplate(txtKey.text);        	
            }
            
            private function openTemplate(key:String=null):void
            {
    			var tpl:Template = ContextManager.instance.templates[0];
    			
    			if(tpl.isEncoded)
    				tpl.key = key;    			
    				
    			tpl.decode();
    			
    			if(!tpl.xmlStructure)
    			{
    				SuperAlert.show(LanguageManager.sentences['msg_cannot_open_tpl']);
					closeTemplateFile();    				
       			}
       			else
       			{
       				if(fileMenuData..menuitem.(hasOwnProperty('@id') && @id == "run_template")[0])
       					fileMenuData..menuitem.(hasOwnProperty('@id') && @id == "run_template")[0].@enabled = 'true';
       				processStep(cGeneral);
       				
       			}
            } 
            
			// Event handler for the MenuBar control's itemClick event.
            private function onMenuClick(event:Object):void  
            {
            	var file:File = ContextManager.instance.lastDir;
				var fileStream:FileStream = new FileStream();
            	var tmplFilter:FileFilter = new FileFilter(
            		StringUtil.substitute("{0} ({1})", LanguageManager.sentences['template'], "*.xml"), 
            		"*.xml");
            	var filter:FileFilter = new FileFilter(
            		StringUtil.substitute("{0} ({1})", LanguageManager.sentences['all'], "*.*"), 
            		"*.*");

                if(event.item.@id == "open_file")
                {		
                	openTemplateFile(null, onOpenBrowseSelect, [tmplFilter, filter]);
                }
                else if(event.item.@id == "run_template")
                {		
                	processStep(1);
                }
				else if(event.item.@tag == "lastfiles")
				{
	            	file.url = FileUtils.pathToUrl(event.item.@data);
                	openTemplateFile(file, onTemplateLoad);
				}     
				else if(event.item.@id == "exit")
				{
					exitApplication();
				}     
				else if(event.item.@id == "connection")
				{
					GenConnection.show();
				}     
				else if(event.item.@id == "properties")
				{
					GenProperties.show();
				}     
				
				if(event.item.@tag == "language")
				{				
					file = File.applicationDirectory.resolvePath("lang/"+event.item.@data);	
					fileStream.addEventListener(Event.COMPLETE, onLanguageLoad);
					fileStream.openAsync(file, FileMode.READ);
				}
            }		    			
            
            private function vsChange(event:IndexChangedEvent):void
            {            	
            	var child:DisplayObject;
            	
            	if(!vsLastChanged || vsLastChanged==event.target)
            	{
	            	if(event.target==vsProcess) {
	            		child = vsProcess.getChildAt(event.newIndex);
	            	}
	            	else if(event.target==vsImages)
	            		child = vsImages.getChildAt(event.newIndex);
	            	
	            	if(child)            	
	            		child.addEventListener(EffectEvent.EFFECT_END, onEffectEnd);
	            	
	            	vsLastChanged=null;
	            }
            }
            
            private function onEffectEnd(event:Event):void
            {
            	event.target.removeEventListener(EffectEvent.EFFECT_END, onEffectEnd);
            	
            	switch(vsProcess.selectedChild)
            	{
            		case cProcess:
            			switch(vsImages.selectedIndex)
            			{
            				case 0:
            					mnMain.enabled = false;
            					runingTemplate();
            					break;
            				case 1:
            					mnMain.enabled = false;
            					saveToServer();
            					break;
            				case 2:
            					mnMain.enabled = false;
            					saveToFile();
            					break;
            				case 3:
            					mnMain.enabled = false;
            					launchApp();
            					break;
            			}
            			break;	

            		case cFileRequest:
            			fileBrowse.text = ContextManager.instance.file.nativePath;
            			break;
            			
            		case cComplete:
            			txtResultBuf.text = '';
            			//txtResultBuf.text = ContextManager.instance.templateStruct.buffer;
            			txtResultBuf.text = (timer/1000).toString();
            			txtResultBuf.verticalScrollPosition = 0;
            			break;
            	}            	            	      	
            }
            
            private function processStep(step:*):void
            {
            	switch(typeof step)
            	{
            		case 'number':
            			switch(step)
            			{
	            			case 1:
				           		vsProcess.selectedChild = cProcess;
				           		vsLastChanged = vsImages.selectedIndex == 0 ? vsProcess : vsImages;
				           		vsImages.selectedIndex = 0;
								progressBar.mode = ProgressBarMode.MANUAL;
								progressBar.setProgress(0, 100);
								LanguageManager.bindSentence('prgrs_gen_tpl', progressBar);
		            			break;
		            		case 2:          
				           		vsProcess.selectedChild = cProcess;
								vsLastChanged = vsImages.selectedIndex == 1 ? vsProcess : vsImages;				           		
				           		vsImages.selectedIndex = 1;
				           		progressBar.mode = ProgressBarMode.MANUAL;
								progressBar.setProgress(0, 100);
								LanguageManager.bindSentence('prgrs_save_to_server_tpl', progressBar);
		            			break
		            		case 3:
				           		vsProcess.selectedChild = cProcess;
				           		vsLastChanged = vsImages.selectedIndex == 2 ? vsProcess : vsImages;
				           		vsImages.selectedIndex = 2;
				           		progressBar.mode = ProgressBarMode.MANUAL;
								progressBar.setProgress(0, 100);
								LanguageManager.bindSentence('prgrs_save_to_file_tpl', progressBar);
		            			break;
		            		case 4:
				           		vsProcess.selectedChild = cProcess;
				           		vsLastChanged = vsImages.selectedIndex == 3 ? vsProcess : vsImages;
				           		vsImages.selectedIndex = 3;
				           		vsLastChanged = vsImages;
				           		progressBar.mode = ProgressBarMode.MANUAL;
								progressBar.setProgress(0, 100);
								LanguageManager.bindSentence('prgrs_launch_app', progressBar);
		            			break;
	            		}
	            		break;
	            	default:
            			switch(step)
            			{	            			
	            			case cWelcome:
	            				vsProcess.selectedChild = cWelcome;
	            				mnMain.enabled = true;
	            				break;
	            			case cKeyRequest:
	            				vsProcess.selectedChild = cKeyRequest;
	            				mnMain.enabled = true;
	            				break;
	            			case cGeneral:
	            				vsProcess.selectedChild = cGeneral;
	            				mnMain.enabled = true;
	            				break;
	            			case cServerRequest:
	            				vsProcess.selectedChild = cServerRequest;
	            				break;	            				
	            			case cFileRequest:
	            				vsProcess.selectedChild = cFileRequest;
	            				break;	            				
	            			case cProcess:
	            				vsProcess.selectedChild = cProcess;
	            				break;
	            			case cInterrupt:
	            				vsProcess.selectedChild = cInterrupt;
	            				mnMain.enabled = true;
	            				break;
	            			case cComplete:
	            				vsProcess.selectedChild = cComplete;
	            				mnMain.enabled = true;
	            				break;
	            			case cFinal:
	            				vsProcess.selectedChild = cFinal;
	            				mnMain.enabled = true;
	            				break;
	            		}
	            		break;
            	}
            }
            
            ////////////////////////////////////////////////////////////
            
            private function clearTemplateDebug():void
            {
            	var tpl:TemplateStruct = ContextManager.instance.templateStruct;
            	
            	if(tpl)
            	{
					tpl.removeEventListener("stepComplete", stepCompleteHandler);
					tpl.removeEventListener("generationComplete", generationComplete);					
					tpl.removeEventListener("error", debugErrorHandler);
					ContextManager.instance.templateStruct = null;
            	}
            }
            
            private function runingTemplate():void
            {
        		try
				{
					mnMain.enabled = false;
					appGenerated = false;
					
	        		var tpl:Template;
    	
    	    		tpl = ContextManager.instance.templates.getItemAt(0) as Template;
		
					ContextManager.instance.templateStruct = new TemplateStruct(tpl.xmlStructure);
					
					var validateArr:Array = ContextManager.instance.templateStruct.validate().array;
					
					if(validateArr && validateArr.filter(isError).length>0)
						alertProceedRun();
					else
						runTemplate();
						
					function isError(element:*, index:int, arr:Array):Boolean {
            			return (element.error.severity == BasicError.FATAL);
        			}						
				}
				catch(e:Error)
				{
					SuperAlert.show(e.message, LanguageManager.sentences['warning']);
					clearTemplateDebug();
					processStep(cGeneral);
				}
            }
            		
			public function alertProceedRun():void
			{			
	     		SuperAlert.show(
	     			LanguageManager.sentences['msg_tpl_proceed_with_errs'], 
	     			LanguageManager.sentences['errs_in_tpl'], 
	     			Alert.YES|Alert.NO, null, alertProceedRunHandler, null, Alert.NO);			     	

				function alertProceedRunHandler(event:CloseEvent):void {
		        	if(event.detail==Alert.YES) {    
		        		runTemplate();
		   	     	}
		   	     	else {
						clearTemplateDebug();
						processStep(cGeneral);
			    	}
				}
			}
			
            private function runTemplate():void
            {
            	var tpl:TemplateStruct = ContextManager.instance.templateStruct;
        		try
        		{
					progressBar.mode = ProgressBarMode.MANUAL;
        			progressBar.maximum = tpl.nodes.length + 1;            
								
					//tpl.isDebug = true;
					//tpl.isStepDebug = true;
												        			
					tpl.addEventListener("error", debugErrorHandler);
					tpl.addEventListener("stepComplete", stepCompleteHandler);
					tpl.addEventListener("generationComplete", generationComplete);
					
					timer = getTimer();
										
					tpl.generate();
				}
				catch(e:Error) 
				{
					Alert.show(e.message, LanguageManager.sentences['warning']);
					clearTemplateDebug();
					processStep(cGeneral);
				}            	
            }
            
           	private function debugErrorHandler(event:Event):void {           		
           		var error:* = event.target.error;     
           		SuperAlert.show(error.message, LanguageManager.sentences['error']);
           		clearTemplateDebug();		
           		processStep(cGeneral);
           	}            						            

            private function stepCompleteHandler(event:Event):void {
            	if(progressBar.value+1<progressBar.maximum/2+1);
            		progressBar.setProgress(progressBar.value+1, progressBar.maximum);
				
				//ContextManager.instance.templateStruct.generate(true);	            		
            }	           	
           	
           	private function generationComplete(event:Event):void {
           		timer = getTimer() - timer;
           		
           		appGenerated = true;
				ContextManager.instance.templateStruct.removeEventListener("stepComplete", stepCompleteHandler);
				ContextManager.instance.templateStruct.removeEventListener("generationComplete", generationComplete);					
				ContextManager.instance.templateStruct.removeEventListener("error", debugErrorHandler);	           		

				if(ContextManager.instance.templateStruct.buffer) {
					infoServerRequest.text = LanguageManager.sentences['msg_save_appxml_to_server'];
					processStep(cServerRequest);
    			}
    			else {
    				processStep(cComplete);
    			}        							           		
           	}
           	
           	////////////////////////////////////////////////////////////////////////////////////
           	
           	private function saveToServer():void
           	{
           		if(chkSaveToServer.selected) {           		
           			connect();
           		}
				else {
					infoFileRequest.text = LanguageManager.sentences['msg_save_appxml_to_file'];
					processStep(cFileRequest);
				}				
           	}
			
			private function connect():void
			{
				appInstalled = false;
				progressBar.setProgress(progressBar.maximum/5, progressBar.maximum);
				
				ConnectionManager.instance.vdom = new Vdom(null, txtHost.text + ":" + txtPort.text + '/SOAP');
				var ws:Vdom = ConnectionManager.instance.vdom;
             	ws.addVdomFaultEventListener(faultHandler);
             	
				function faultHandler(event:FaultEvent):void {
					infoServerRequest.text = LanguageManager.sentences['msg_connecting_fault'] + '\n' + 
						event.fault.faultString + '\n' +
						LanguageManager.sentences['msg_try_to_reconnect'];
					processStep(cServerRequest);
				}
			    
			    login();
			}
			
			private function login():void
			{	
				progressBar.setProgress(progressBar.maximum/3, progressBar.maximum);
				
				var ws:Vdom = ConnectionManager.instance.vdom;
             	var login:String = txtLogin.text;
				//var pwd_md5:String = CryptUtils.hex(CryptUtils.MD5(txtPass.text));   
				var pwd_md5:String = MD5.encrypt(txtPass.text);
				
				ws.addopen_sessionEventListener(loginHandler);
				ws.open_session(login, pwd_md5);

				function loginHandler(event:Open_sessionResultEvent):void {
					var resultXML:XML = new XML(<Result />);
					resultXML.appendChild(XMLList(event.result));
					
					if(resultXML.Error.toString()) {
						infoServerRequest.text = resultXML.Error;
						processStep(cServerRequest);
					} 
					else {					
						// run session protector
						var code:Code = Code.getInstance();
						code.init(resultXML.Session.HashString);
						code.inputSKey(resultXML.Session.SessionKey);
						code.sessionId = resultXML.Session.SessionId;
						
						getAppList()
					}
				}
			}	
			
			private function getAppList():void
			{
				progressBar.setProgress(progressBar.maximum/2, progressBar.maximum);
				
				var ws:Vdom = ConnectionManager.instance.vdom;
				var code:Code = Code.getInstance();
				var sid:String = code.sessionId; 
				var skey:String = code.skey(); 
				
				ws.addlist_applicationsEventListener(getAppListHandler);
				ws.list_applications(sid, skey);
				
				function getAppListHandler(event:List_applicationsResultEvent):void
				{
					var resultXML:XML = new XML(<Result />);
					resultXML.appendChild(XMLList(event.result));
					
					if(resultXML.Error.toString()) {
						infoServerRequest.text = resultXML.Error;
						logout();
						processStep(cServerRequest);						
					} 
					else {	
						trace(resultXML);
						installApp();		
					}
				}
			}
			
			private function installApp():void
			{
				progressBar.setProgress(progressBar.maximum/1.5, progressBar.maximum);
				
				var ws:Vdom = ConnectionManager.instance.vdom;
				var code:Code = Code.getInstance();
				var sid:String = code.sessionId; 
				var skey:String = code.skey(); 
				
				var appxml:String = ContextManager.instance.templateStruct.buffer;
				
				
/*appxml =  
<Application>
    <Information>
      <ID>58963343-afe9-4320-a6d5-fd2880aadf33</ID>      
      <Name>test</Name>
      <Description/>
    </Information>
    
    <Objects/>
    
    <Structure>
    </Structure>
    
    <E2vdom>
      <Events/>
      <Actions/>
    </E2vdom>
    
    <Resources>
    </Resources>
    
    <Databases/>
  </Application>;*/
				
    
				ws.addinstall_applicationEventListener(installAppHandler);				
				ws.install_application(sid, skey, txtVHName.text, appxml);
				
				function installAppHandler(event:Install_applicationResultEvent):void
				{
					var resultXML:XML = new XML(<Result />);
					resultXML.appendChild(XMLList(event.result));
					
					if(resultXML.Error.toString()) {
						infoServerRequest.text = resultXML.Error;
						logout();
						processStep(cServerRequest);						
					} 
					else {	
						progressBar.setProgress(progressBar.maximum, progressBar.maximum);
						appInstalled = true;
						logout();	
						infoFileRequest.text = LanguageManager.sentences['msg_save_appxml_to_file'];					
						processStep(cFileRequest);
					}
				}
			}

			private function logout():void
			{	
             	var ws:Vdom = ConnectionManager.instance.vdom;
				var code:Code = Code.getInstance();
				var sid:String = code.sessionId; 
				
				ws.addclose_sessionEventListener(logoutHandler);
				ws.close_session(sid);
				
				function logoutHandler(event:Close_sessionResultEvent):void {
					var resultXML:XML = new XML(<Result />);
					resultXML.appendChild(XMLList(event.result));
					
					if(resultXML.Error.toString()) {
						trace(resultXML);
					} 
				}			           	
			}						

           	/////////////////////////////////////////////////////////////////////////////////////
           	
           	private function saveToFile():void
           	{
           		if(chkSaveToFile.selected)            		
           			savingToFile();
				else if(appInstalled)
					processStep(4);
				else				
					processStep(cComplete);
           	}        		

           	private function savingToFile():void
           	{
           		var file:File = new File();
           		file.url = FileUtils.pathToUrl(fileBrowse.text);
       			var stream:FileStream = new FileStream();        	
    			
        		stream.addEventListener(OutputProgressEvent.OUTPUT_PROGRESS, onFileStreamProgress);        		
        		stream.addEventListener(IOErrorEvent.IO_ERROR, onFileStreamError);
        		stream.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onFileStreamError);
        		stream.addEventListener(Event.CLOSE, onFileStreamClose);
    			
    			try {
    				stream.openAsync(file, FileMode.WRITE);
    				stream.writeUTFBytes(ContextManager.instance.templateStruct.buffer);
    				stream.close();
    			} catch (e:Error) {
    				closeStream(stream);
	    			infoFileRequest.text = LanguageManager.sentences.msg_saving_appxml_fault + '\n' + 
						LanguageManager.sentences.msg_cannot_save_file;
					processStep(cFileRequest);     				
    			}
    			
	    		function onFileStreamProgress(event:Event):void {
	    			var stream:FileStream = event.target as FileStream;
	    			var total:Number = OutputProgressEvent(event).bytesTotal;
	    			var pending:Number = OutputProgressEvent(event).bytesPending;
					progressBar.setProgress(total+(total-pending), total*2+1);      
					progressBar.validateNow();	
	    		}
	    		        		
	    		function onFileStreamError(event:ErrorEvent):void {
	    			var stream:FileStream = event.target as FileStream;
	    			closeStream(stream);
	    			infoFileRequest.text = LanguageManager.sentences.msg_saving_appxml_fault + '\n' + event.text;
					processStep(cFileRequest);   
	    		}
	        	
	        	function closeStream(stream:FileStream):void {
		    		stream.removeEventListener(OutputProgressEvent.OUTPUT_PROGRESS, onFileStreamProgress);
	        		stream.removeEventListener(IOErrorEvent.IO_ERROR, onFileStreamError);
	        		stream.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onFileStreamError);
		    		stream.removeEventListener(Event.CLOSE, onFileStreamClose);
					stream.close();           		
	    		}				        		
	    		    			
				function onFileStreamClose(event:Event):void {
	    			var stream:FileStream = event.target as FileStream;
	    			closeStream(stream);    			
	    			
	           		if(appInstalled)
						processStep(4);
					else
						processStep(cComplete);
	    		}
           	}           	        
    		 
    		//////////////////////////////////////////////////////////////////////////
    		           
    		private function launchApp():void
    		{
    			var url:String = txtVHName.text;
    			url = /^http:\/\/.*/i.test(url) ? url : 'http://' + url;
            	var request:URLRequest = new URLRequest(url);
            	//var variables:URLVariables = new URLVariables();
            	//variables.exampleSessionId = new Date().getTime();
            	//variables.exampleUserLabel = "guest";
            	//request.data = variables;
            	navigateToURL(request);
            
            	progressBar.setProgress(progressBar.maximum, progressBar.maximum);
            	
    			processStep(cComplete);
    		}
    		
			///////////////////////////////////////////////////////////////////////
			
            private function onOpenBrowseSelect(event:Event):void
            {
               	openTemplateFile(event.target as File, onTemplateLoad);
            }
                       	            
            private function openTemplateFile(file:File, handler:Function, fileFilters:Array=null):*
            {
            	var _file:File = file;
            	var stream:FileStream = new FileStream();
            	
            	if(!_file)
            	{
            		_file = new File();
					_file.addEventListener(Event.SELECT, handler);
					_file.browseForOpen(LanguageManager.sentences['open_file'], fileFilters);
            		return _file;
            	}
            	else
            	{
            		if(_file.isDirectory)
            			return null;
            			
	            	if(!_file.exists) {
	            		SuperAlert.show(
	            			LanguageManager.sentences['msg_file_not_exists'], 
	            			LanguageManager.sentences['error']);
	            		return null; 
	            	}

					ProgressManager.source = stream;
					ProgressManager.start();
				
					stream.addEventListener(Event.COMPLETE, handler);
    				stream.openAsync(_file, FileMode.READ);

            		ContextManager.updateLastFiles(_file);            	
            		MenuGeneral.updateLastFilesMenu(fileMenuData);            		            			
            	}
            	
            	return stream;
            }
            
            private function closeTemplateFile():void
            {
            	clearTemplateDebug();
            	
				ContextManager.instance.lastFile = false;
				if(ContextManager.instance.templates.length>0)
           			ContextManager.instance.templates.removeItemAt(0);
           		if(fileMenuData..menuitem.(hasOwnProperty('@id') && @id == "run_template")[0])
    				fileMenuData..menuitem.(hasOwnProperty('@id') && @id == "run_template")[0].@enabled = 'false';
    			processStep(cWelcome);
            }

			public function alertInterrupt():void
			{
				if(!appGenerated && ContextManager.instance.templateStruct)
					ContextManager.instance.templateStruct.removeEventListener("stepComplete", stepCompleteHandler);
				
	     		SuperAlert.show(
	     			LanguageManager.sentences['msg_proceed_interrupt_app_installing'], 
	     			LanguageManager.sentences['question'], 
	     			Alert.YES|Alert.NO, null, alertProceedInterruptHandler, null, Alert.NO);			     	

				function alertProceedInterruptHandler(event:CloseEvent):void {
		        	if(event.detail==Alert.YES) {    
		        		processStep(cInterrupt);
		   	     	}
		   	     	else if(!appGenerated && ContextManager.instance.templateStruct) {
						ContextManager.instance.templateStruct.addEventListener("stepComplete", stepCompleteHandler);
						ContextManager.instance.templateStruct.generate(true);
			    	}
				}
			}
            				       				
		]]>
	</mx:Script>
	
	<mx:VBox height="100%" width="100%">
		
		<mx:MenuBar id="mnMain" width="100%" dataProvider="{fileMenuData.menuitem}" labelFunction="labelFunction" showRoot="false"
			itemClick="onMenuClick(event);"></mx:MenuBar>
			
		<mx:HBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="left" 
			paddingTop="10" paddingRight="10" paddingLeft="10" paddingBottom="10">
			<ExtendedAPI:Base64Image id="tplPic" source="{resources.strLogo}" horizontalAlign="right" width="220"
				showEffect="{picShow}" height="100%" verticalAlign="top"/>
			<mx:VBox height="100%" width="100%" horizontalAlign="right">
				
				<mx:ViewStack id="vsProcess" width="100%" height="100%" creationPolicy="all" change="vsChange(event)">

					<mx:VBox id="cWelcome" height="100%" width="100%" 
						verticalAlign="middle" horizontalAlign="center"
						showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:Text width="90%" styleName="infoTextStyle"
							text="{LanguageManager.sentences.msg_gen_welcome}">
						</mx:Text>							
					</mx:VBox>

					<mx:VBox id="cKeyRequest" height="100%" width="100%" 
						verticalAlign="middle" horizontalAlign="center"
						showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:TextInput width="90%" editable="false" 
							text="{ContextManager.instance.templates.getItemAt(0).name}" 
							styleName="edtTextStyle"/>							
						<mx:TextArea editable="false" width="90%" height="150" 
							text="{ContextManager.instance.templates.getItemAt(0).description}"/>
						<mx:Label text="{LanguageManager.sentences.msg_input_template_key}:"/>
						<mx:TextInput width="90%" id="txtKey" styleName="edtTextStyle"/>
						
						<mx:ControlBar width="90%" horizontalAlign="right">
							<mx:Button label="{LanguageManager.sentences.cancel}" 
								click="closeTemplateFile()"/>							
							<mx:Button id="btnAcceptKey" label="{LanguageManager.sentences.accept}" 
								click="onKeyAccept(event)"/>
						</mx:ControlBar>							
					</mx:VBox>					

					<mx:VBox id="cGeneral" height="100%" width="100%" 
						verticalAlign="middle" horizontalAlign="center"
						showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:TextInput width="90%" editable="false" 
							text="{ContextManager.instance.templates.getItemAt(0).name}" 
							styleName="edtTextStyle"/>							
						<mx:TextArea editable="false" width="90%" height="150" 
							text="{ContextManager.instance.templates.getItemAt(0).description}"/>
						
						<mx:ControlBar width="90%" horizontalAlign="right">
							<mx:Button label="{LanguageManager.sentences.cancel}" 
								click="closeTemplateFile()"/>							
							<mx:Button id="btnRun" label="{LanguageManager.sentences.run}" 
								click="processStep(1)"/>
						</mx:ControlBar>
					</mx:VBox>

					<mx:VBox id="cServerRequest" height="100%" width="100%" 
						verticalAlign="middle" horizontalAlign="center"
						showEffect="{canvasShow}" hideEffect="{canvasHide}">
						
						<mx:Text width="90%" id="infoServerRequest" styleName="infoTextStyle"/>
					
						<mx:CheckBox id="chkSaveToServer" selected="{ContextManager.instance.saveToServer}"
							label="{LanguageManager.sentences.save_to_server}"/>
						
						<mx:Grid>
							<mx:GridRow>
								<mx:GridItem>
									<mx:Label text="{LanguageManager.sentences.virtual_host_name}:"/>									
								</mx:GridItem>
								<mx:GridItem>
									<mx:TextInput id="txtVHName" width="250" 
										text="www.example.com"/>
								</mx:GridItem>
							</mx:GridRow>							
 
							<mx:GridRow>
								<mx:GridItem>
									<mx:Label text="{LanguageManager.sentences.host}:"/>
								</mx:GridItem>
								<mx:GridItem>
									<mx:TextInput id="txtHost" width="250" 
										text="{ContextManager.instance.host}"/>
								</mx:GridItem>
							</mx:GridRow>

							<mx:GridRow>
								<mx:GridItem>
									<mx:Label text="{LanguageManager.sentences.port}:"/>
								</mx:GridItem>
								<mx:GridItem>
									<mx:TextInput id="txtPort" width="50" 
										text="{ContextManager.instance.port}"/>
								</mx:GridItem>
							</mx:GridRow>

							<mx:GridRow>
								<mx:GridItem>
									<mx:Label text="{LanguageManager.sentences.login}:"/>
								</mx:GridItem>
								<mx:GridItem>
									<mx:TextInput id="txtLogin" width="250" 
										text="{ContextManager.instance.login}"/>
								</mx:GridItem>
							</mx:GridRow>
						
							<mx:GridRow>
								<mx:GridItem>
									<mx:Label text="{LanguageManager.sentences.password}:"/>
								</mx:GridItem>
								<mx:GridItem>
									<mx:TextInput id="txtPass" width="250" displayAsPassword="true" 
										text="{ContextManager.instance.pass}"/>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
						
						<mx:ControlBar width="90%" horizontalAlign="right">
							<mx:Button label="{LanguageManager.sentences.cancel}" 
								click="alertInterrupt()"/>							
							<mx:Button label="{LanguageManager.sentences.next}" 
								click="processStep(2)"/>							
						</mx:ControlBar>
					</mx:VBox>
					
					<mx:VBox id="cFileRequest" height="100%" width="100%" 
						verticalAlign="middle" horizontalAlign="center"
						showEffect="{canvasShow}" hideEffect="{canvasHide}">
						
						<mx:Text width="90%" id="infoFileRequest" styleName="infoTextStyle"/>
					
						<mx:CheckBox id="chkSaveToFile" selected="{ContextManager.instance.saveToFile}"
							label="{LanguageManager.sentences.save_to_file}"/>
						
						<ExtendedAPI:FileBrowseBox id="fileBrowse" width="90%" mode="save" 
						browseLabel="{LanguageManager.sentences.browse}..." 
						browseTitle="{LanguageManager.sentences.open_file}..."
						filterAll="{LanguageManager.sentences.all}"/>
						
						<mx:ControlBar width="90%" horizontalAlign="right">
							<mx:Button label="{LanguageManager.sentences.cancel}" 
								click="alertInterrupt()"/>							
							<mx:Button label="{LanguageManager.sentences.next}" 
								click="processStep(3)"/>
						</mx:ControlBar>
					</mx:VBox>

					<mx:VBox id="cInterrupt" height="100%" width="100%" 
						verticalAlign="middle" horizontalAlign="center"
						showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:Text width="90%" styleName="infoTextStyle"
							text="{LanguageManager.sentences.msg_creation_app_interrupted}"/>
						<mx:ControlBar width="90%" horizontalAlign="right">
							<mx:Button label="{LanguageManager.sentences.next}" 
								click="closeTemplateFile()"/>
						</mx:ControlBar>
					</mx:VBox>

					<mx:VBox id="cProcess" height="100%" width="100%" 
						verticalAlign="middle" horizontalAlign="center"
						showEffect="{canvasShow}" hideEffect="{canvasHide}">					
						<mx:TextInput width="90%" editable="false" 
							text="{ContextManager.instance.templates.getItemAt(0).name}" 
							styleName="edtTextStyle"/>						
						
						<mx:Spacer width="100%" height="30"/>
						
						<mx:ViewStack id="vsImages" width="100%" height="100%" 
							change="vsChange(event)">
							<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom" horizontalGap="0"
								showEffect="canvasShow" hideEffect="canvasHide">
								<mx:Image source="@Embed(source='../resources/Question-on.png')" scaleContent="false"/>
								<mx:Image source="@Embed(source='../resources/Install-off.png')"/>
								<mx:Image source="@Embed(source='../resources/File-off.png')"/>
								<mx:Image source="@Embed(source='../resources/web-site-off.png')"/>
							</mx:HBox>

							<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom" horizontalGap="0"
								showEffect="canvasShow" hideEffect="canvasHide">
								<mx:Image source="@Embed(source='../resources/Question-off.png')" scaleContent="false"/>
								<mx:Image source="@Embed(source='../resources/Install-on.png')"/>
								<mx:Image source="@Embed(source='../resources/File-off.png')"/>
								<mx:Image source="@Embed(source='../resources/web-site-off.png')"/>
							</mx:HBox>

							<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom" horizontalGap="0"
								showEffect="canvasShow" hideEffect="canvasHide">
								<mx:Image source="@Embed(source='../resources/Question-off.png')" scaleContent="false"/>
								<mx:Image source="@Embed(source='../resources/Install-off.png')"/>
								<mx:Image source="@Embed(source='../resources/File-on.png')"/>
								<mx:Image source="@Embed(source='../resources/web-site-off.png')"/>
							</mx:HBox>

							<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom" horizontalGap="0"
								showEffect="canvasShow" hideEffect="canvasHide">
								<mx:Image source="@Embed(source='../resources/Question-off.png')" scaleContent="false"/>
								<mx:Image source="@Embed(source='../resources/Install-off.png')"/>
								<mx:Image source="@Embed(source='../resources/File-off.png')"/>
								<mx:Image source="@Embed(source='../resources/web-site-on.png')"/>
							</mx:HBox>
						</mx:ViewStack>
						<mx:Spacer width="100%" height="10"/>
						<mx:ProgressBar width="90%" minimum="0" maximum="100" id="progressBar"/>

						<mx:ControlBar width="90%" horizontalAlign="right">
							<mx:Button id="btnCancel" label="{LanguageManager.sentences.cancel}" 
								click="alertInterrupt()"/>
						</mx:ControlBar>							
					</mx:VBox>
					
					<mx:VBox id="cComplete" height="100%" width="100%" 
						verticalAlign="middle" horizontalAlign="center"
						showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:Label text="{LanguageManager.sentences.gen_result}:"/>
						<mx:TextArea id="txtResultBuf" editable="false" width="90%" height="250" 
							text=""/>
						<mx:ControlBar width="90%" horizontalAlign="right">
							<mx:Button id="btnNext" label="{LanguageManager.sentences.next}" 
								click="processStep(cFinal)"/>
						</mx:ControlBar>
					</mx:VBox>
					
					<mx:VBox id="cFinal" height="100%" width="100%" 
						verticalAlign="middle" horizontalAlign="center"
						showEffect="{canvasShow}" hideEffect="{canvasHide}">
						<mx:Text styleName="infoTextStyle"
							text="{LanguageManager.sentences.msg_gen_finish}">
						</mx:Text>
						<mx:ControlBar width="90%" horizontalAlign="right">
							<mx:Button id="btnExit" 
								label="{LanguageManager.sentences.exit}" 
								click="exitApplication();"/>
						</mx:ControlBar>
					</mx:VBox>

				</mx:ViewStack>
				
				<mx:HBox width="100%" horizontalAlign="right" verticalAlign="bottom" paddingBottom="10" paddingRight="10">
					<mx:Image source="@Embed(source='../resources/txt_logo.png')"/>
				</mx:HBox>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>

</mx:WindowedApplication>
