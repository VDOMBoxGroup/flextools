<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
		title="{LanguageManager.sentences.app_title}{ContextManager.templates.length &amp;&amp; BuilderTemplate(ContextManager.templates.getItemAt(0)).file ? ' - '+ContextManager.templates.getItemAt(0).file.nativePath : ''} - {ContextManager.templates.length &amp;&amp; BuilderTemplate(ContextManager.templates.getItemAt(0)).selectedProject &amp;&amp; BuilderTemplate(ContextManager.templates.getItemAt(0)).selectedProject.name ? BuilderTemplate(ContextManager.templates.getItemAt(0)).selectedProject.name : LanguageManager.sentences.noname}{ContextManager.templates.length &amp;&amp; ContextManager.templates.getItemAt(0).modified ? '*' : ''}"
		titleIcon="@Embed(source='assets/icons/icon_16.png')"
		layout="absolute"
		statusBarFactory="net.vdombox.powerpack.customize.core.windowClasses.SuperStatusBar"
		preinitialize="preinit()"
		initialize="init()"
		applicationComplete="show()"
		creationComplete="creationCompleteHandler(event)"
		xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns:graph="net.vdombox.powerpack.graph.*"
		xmlns:ui="net.vdombox.powerpack.lib.extendedapi.ui.*"
		xmlns:panel="net.vdombox.powerpack.panel.*"
		xmlns:customize="net.vdombox.powerpack.customize.*"
		xmlns:containers="net.vdombox.powerpack.lib.extendedapi.containers.*"
		closing="closingApplicationHandler(event)"
		styleName="builderWindowStyle" 
		xmlns:customize1="net.vdombox.powerpack.lib.player.customize.*" xmlns:control="net.vdombox.powerpack.control.*">

	<mx:Style source="assets/style/style.css" />
	
	<mx:Move duration="100" id="DockerMove" />
	<mx:Fade duration="100" id="DockerFade" />

	<customize1:GeneratorResources id="resources" />

	<mx:menu>
		<ui:SuperFlexNativeMenu id="flexNativeMenu"
								dataProvider="{fileMenuData}"
								labelField="@label"
								keyEquivalentField="@keyEquivalent"
								showRoot="false"
								itemClick="menuHandler(event);" />
	</mx:menu>

	<mx:XML format="e4x" id="fileMenuData">
		<root>
			<menuitem label="File" id="file">
				<menuitem label="New Template" id="new_template" keyEquivalent="n" ctrlKey="true" />
				<menuitem label="Open File..." id="open_file" />
				<menuitem type="separator" id="separator" />
				<menuitem label="Close" id="close" keyEquivalent="w" ctrlKey="true" />
				<menuitem type="separator" />
				<menuitem label="Save" id="save" keyEquivalent="s" ctrlKey="true" />
				<menuitem label="Save As..." id="save_as" keyEquivalent="s" ctrlKey="true" shiftKey="true" />
				<menuitem type="separator" />
				<menuitem label="Import" id="import">
					
					<menuitem label="From Template..." id="import_from_tpl" />
				</menuitem>
				<menuitem type="separator" />
				<menuitem label="Exit" id="exit" />
			</menuitem>

			<menuitem label="Template" id="template">
				<!--menuitem label="Validate" id="validate"/-->
				<menuitem label="Properties" id="properties" />
				<menuitem label="Build installer" id="air_builder" />
			</menuitem>

			<menuitem label="Run" id="run">
				<menuitem label="Run" id="run" keyEquivalent="r" ctrlKey="true" />
				<menuitem label="Debug" id="debug" keyEquivalent="d" ctrlKey="true" />
				<menuitem label="Step By Step" id="step_by_step" keyEquivalent="d" ctrlKey="true" altKey="true" />
				<menuitem type="separator" />
				<menuitem label="Resume" id="resume" enabled="false" keyEquivalent="m" ctrlKey="true" />
				<menuitem label="Step Into" id="step_into" enabled="false" keyEquivalent="i" ctrlKey="true" />
				<menuitem label="Step Over" id="step_over" enabled="false" keyEquivalent="o" ctrlKey="true" />
				<menuitem label="Step Return" id="step_return" enabled="false" keyEquivalent="e" ctrlKey="true" />
				<menuitem label="Break" id="break" enabled="false" keyEquivalent="b" ctrlKey="true" />
			</menuitem>

			<menuitem label="Properties" id="settings">
				<menuitem label="Language" id="language" enabled="false" />
				
			</menuitem>

			<menuitem label="Help" id="help" enabled="true" >
				<menuitem label="About" id="about_program" enabled="true" />
			</menuitem>
		</root>
	</mx:XML>

	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.collections.HierarchicalData;
			import mx.collections.XMLListCollection;
			import mx.controls.Tree;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexNativeMenuEvent;
			import mx.utils.StringUtil;
			
			import net.vdombox.powerpack.*;
			import net.vdombox.powerpack.control.ControlBarEvent;
			import net.vdombox.powerpack.dialog.AboutProgramDialog;
			import net.vdombox.powerpack.dialog.AirBuildProperties;
			import net.vdombox.powerpack.dialog.EditCaption;
			import net.vdombox.powerpack.dialog.ImportFromTpl;
			import net.vdombox.powerpack.dialog.ModalDialog;
			import net.vdombox.powerpack.dialog.ProjectsSettingsDialog;
			import net.vdombox.powerpack.dialog.TemplateKey;
			import net.vdombox.powerpack.dialog.ValidateDialog;
			import net.vdombox.powerpack.graph.Connector;
			import net.vdombox.powerpack.graph.GraphCanvas;
			import net.vdombox.powerpack.graph.Node;
			import net.vdombox.powerpack.lib.extendedapi.controls.SuperDataGrid;
			import net.vdombox.powerpack.lib.extendedapi.controls.tabBarClasses.SuperTab;
			import net.vdombox.powerpack.lib.extendedapi.ui.SuperNativeMenuItem;
			import net.vdombox.powerpack.lib.extendedapi.utils.FileUtils;
			import net.vdombox.powerpack.lib.player.BasicError;
			import net.vdombox.powerpack.lib.player.gen.Dynamic;
			import net.vdombox.powerpack.lib.player.gen.GraphContext;
			import net.vdombox.powerpack.lib.player.gen.NodeContext;
			import net.vdombox.powerpack.lib.player.gen.TemplateLib;
			import net.vdombox.powerpack.lib.player.gen.TemplateStruct;
			import net.vdombox.powerpack.lib.player.gen.TemplateValidateOptions;
			import net.vdombox.powerpack.lib.player.gen.parse.parseClasses.CodeFragment;
			import net.vdombox.powerpack.lib.player.gen.structs.NodeStruct;
			import net.vdombox.powerpack.lib.player.graph.NodeCategory;
			import net.vdombox.powerpack.lib.player.managers.ContextManager;
			import net.vdombox.powerpack.lib.player.managers.LanguageManager;
			import net.vdombox.powerpack.lib.player.popup.AlertPopup;
			import net.vdombox.powerpack.lib.player.template.Template;
			import net.vdombox.powerpack.lib.player.template.TemplateProject;
			import net.vdombox.powerpack.managers.BuilderContextManager;
			import net.vdombox.powerpack.managers.CashManager;
			import net.vdombox.powerpack.managers.ProgressManager;
			import net.vdombox.powerpack.menu.MenuManager;
			import net.vdombox.powerpack.panel.Console;
			import net.vdombox.powerpack.template.BuilderTemplate;
			import net.vdombox.powerpack.template.BuilderTemplateProject;
			import net.vdombox.powerpack.updater.BuilderUpdater;
			import net.vdombox.powerpack.utils.LibLoader;

		//--------------------------------------------------------------------------
		//
		//  Class methods
		//
		//--------------------------------------------------------------------------

		private var curDebugNode : Node = null;
		private var curDebugBufLen : int = 0;

		private function preinit() : void
		{
			maximize();

			Connector.classConstructed;
			Node.classConstructed;
			GraphCanvas.classConstructed;

			Connector.connectMode = Connector.CM_CENTER;

			var defaultCaptions : Object = {

				app_title : "Power Pack Builder",

				menu_run : "_Run",
				menu_run_template : "_Run",
				menu_debug : "_Debug",
				menu_step_by_step : "_Step By Step",
				menu_resume : "Resu_me",
				menu_step_into : "Step _Into",
				menu_step_over : "Step _Over",
				menu_step_return : "Step _Return",
				menu_break : "_Break"
			};

			LanguageManager.setSentences( defaultCaptions );

			if ( File.applicationDirectory.resolvePath( 'style/builder.swf' ).exists )
				StyleManager.loadStyleDeclarations( "style/builder.swf" );
		}
		
		private function init() : void
		{
			MenuManager.getInstance().menu = flexNativeMenu;
		}
			
		private function show() : void
		{
			pnl_problems.grid.addEventListener( MouseEvent.DOUBLE_CLICK, problemsDoubleClickHandler );

			var langFile : File;
			var langFolder : File;
			var fileStream : FileStream;

			for each ( langFile in [BuilderContextManager.instance.dataStorage, BuilderContextManager.instance.settingStorage] )
			{
				if ( !langFile.exists )
					langFile.createDirectory();
			}

			Application.application.setStyle( "modalTransparencyBlur", 0 );
			Application.application.setStyle( "modalTransparency", 0 );

			CashManager.clear();

			LibLoader.loadLib();

			// Load application settings
			BuilderContextManager.loadSettings();

			MenuManager.getInstance().bindItems();
			MenuManager.getInstance().noTemplate();
			MenuManager.getInstance().updateLangMenu();
			MenuManager.getInstance().updateLastFilesMenu();

			// Load language file
			langFolder = File.applicationDirectory.resolvePath( MenuManager.LANG_FOLDER );
			langFile = langFolder.resolvePath( ContextManager.instance.lang.file );

			if ( langFile && langFile.exists )
			{
				fileStream = new FileStream();

				fileStream.addEventListener( Event.COMPLETE, completeLangHandler );
				fileStream.openAsync( langFile, FileMode.READ );
			}

			openTemplate();
		}

		private function openTemplate() : void
		{
			if ( lastTemplateSaved )
			{
				openLastTemplate();
			}
			else
			{
				newTpl();
			}

		}

		private function get lastTemplateSaved() : Boolean
		{
			return ContextManager.instance.lastFile && ContextManager.instance.files[0];
		}

		private function openLastTemplate() : void
		{
			var tpl : BuilderTemplate = new BuilderTemplate();

			tpl.file = ContextManager.instance.files[0];
			tpl.addEventListener( Event.COMPLETE, completeTemplateHandler );

			tpl.open();
		}

		private function closingApplicationHandler( event : Event ) : void
		{
			event.preventDefault();
			exitApplication();
		}
			
		private function closeWithoutSaveHandler(event : Event):void
		{
			exitApplication(null, false);
		}

		public function exitApplication( event : Event = null, askForSave : Boolean = true ) : void
		{
			if ( ContextManager.templates.length > 0 && currentTemplate.modified && askForSave)
			{
				AlertPopup.show("Do you want to save file before exit?", 
					LanguageManager.sentences['confirmation'], 
					AlertPopup.YES | AlertPopup.NO | AlertPopup.CANCEL, 
					Sprite(Application.application), 
					alertSaveBeforeExitHandler, null, AlertPopup.NO);
			}
			else
			{
				BuilderContextManager.saveSettings();
				exit();
			}

			function alertExitHandler( event : CloseEvent ) : void
			{
				if ( event.detail == AlertPopup.YES )
				{
					BuilderContextManager.saveSettings();
					exit();
				}
			}

			function alertSaveBeforeExitHandler( event : CloseEvent ) : void
			{
				if ( event.detail == AlertPopup.YES )
				{
					currentTemplate.addEventListener( Event.COMPLETE, templateSaveAndExitHandler );
					currentTemplate.xmlStructure = pnl_graphs.toXML();
					currentTemplate.save();
				}
				else if ( event.detail == AlertPopup.NO )
				{
					BuilderContextManager.saveSettings();
					exit();
				}
			}

			function templateSaveAndExitHandler( event : Event ) : void
			{
				var tpl : BuilderTemplate = event.target as BuilderTemplate;
				tpl.removeEventListener( Event.COMPLETE, templateSaveAndExitHandler );

				processSavedTpl();
				BuilderContextManager.saveSettings();
				exit();
			}
		}

		public function closeTpl( askForSave : Boolean = true, action : Function = null, args : Array = null ) : void
		{
			if ( currentTemplate && currentTemplate.modified && askForSave)
			{
				alertSaveAndCloseTemplate( action, args );
				return;
			}

			if ( currentTemplate )
			{
				currentTemplate.dispose();
	
				ContextManager.templates.removeItemAt( 0 );
			}

			ContextManager.instance.lastFile = false;

			pnl_graphs.clear();

			MenuManager.getInstance().noTemplate();

			workStage.visible = false;
			workStage.includeInLayout = false;

			if ( action != null )
				action.apply( this, args );
		}
			
		public function saveTpl( browseForSave : Boolean = false ) : void
		{
			if ( ContextManager.templates.length > 0 )
			{
				currentTemplate.addEventListener( Event.COMPLETE, templateSaveHandler );
				currentTemplate.xmlStructure = pnl_graphs.toXML();
				
				if (browseForSave)
					currentTemplate.browseForSave();
				else
					currentTemplate.save();
			}
			
		}

		public function alertSaveAndCloseTemplate( action : Function = null, args : Array = null ) : void
		{
			AlertPopup.show(
					"Do you want to save template?",
					LanguageManager.sentences['confirmation'],
					AlertPopup.YES | AlertPopup.NO | AlertPopup.CANCEL, this.nativeWindow as Sprite, alertSaveAndCloseHandler, null, AlertPopup.YES );

			function alertSaveAndCloseHandler( event : CloseEvent ) : void
			{
				if ( event.detail == AlertPopup.YES )
				{
					currentTemplate.addEventListener( Event.COMPLETE, templateSaveAndCloseHandler );
					currentTemplate.xmlStructure = pnl_graphs.toXML();
					currentTemplate.save();
				}
				else if ( event.detail == AlertPopup.NO )
				{
					closeTpl( false, action, args );
				}
			}

			function templateSaveAndCloseHandler( event : Event ) : void
			{
				var tpl : BuilderTemplate = event.target as BuilderTemplate;
				tpl.removeEventListener( Event.COMPLETE, templateSaveAndCloseHandler );

				processSavedTpl();

				closeTpl( false, action, args );
			}
		}

		public function processOpenedTpl() : void
		{
			workStage.visible = true;
			workStage.includeInLayout = true;
			workStage.validateNow();

			pnl_graphs.templateXML = currentTemplate.xmlStructure;
			currentTemplate.selectedProject.modified = false;
			currentTemplate.modified = false;

			ContextManager.instance.lastFile = true;
			BuilderContextManager.updateLastFiles( currentTemplate.file );

			MenuManager.getInstance().updateLastFilesMenu();
			MenuManager.getInstance().openedTemplate();
		}

		public function processSavedTpl() : void
		{
			workStage.visible = true;
			workStage.includeInLayout = true;

			currentTemplate.selectedProject.modified = false;
			currentTemplate.modified = false;
			
			ContextManager.instance.lastFile = true;
			BuilderContextManager.updateLastFiles( currentTemplate.file );

			MenuManager.getInstance().updateLastFilesMenu();
			MenuManager.getInstance().openedTemplate();
		}

		public function processNewTpl() : void
		{
			workStage.visible = true;
			workStage.includeInLayout = true;

			if ( currentTemplate )
			{
				pnl_graphs.templateXML = currentTemplate.xmlStructure;
				currentTemplate.selectedProject.modified = false;
				currentTemplate.modified = false;
			}

			ContextManager.instance.lastFile = false;

			MenuManager.getInstance().newTemplate();
		}

		//--------------------------------------------------------------------------
		//
		//  Event handlers
		//
		//--------------------------------------------------------------------------

		private function completeLangHandler( event : Event ) : void
		{
			var fileStream : FileStream = event.target as FileStream;
			fileStream.removeEventListener( Event.COMPLETE, completeLangHandler );

			var xml : XML = XML( fileStream.readUTFBytes( fileStream.bytesAvailable ) );
			fileStream.close();

			LanguageManager.languageXML = xml;

			ContextManager.instance.lang.label = LanguageManager.languageXML.@label.toLowerCase();
			ContextManager.instance.lang.file = LanguageManager.languageXML.@data;
		}

		private function completeTemplateHandler( event : Event ) : void
		{
			var template : BuilderTemplate = event.target as BuilderTemplate;

			template.removeEventListener( Event.COMPLETE, completeTemplateHandler );

			closeTpl( false );

			addTemplate(template);
			
			if ( template.isEncoded )
			{
				TemplateKey.show( onKeyDialogClose );
			}
			else
			{
				processOpenedTpl();
			}
		}

		private function onKeyDialogClose( event : CloseEvent ) : void
		{
			if ( event.detail == ModalDialog.OK )
			{
				if ( event.target.txtKey.text )
				{
					selectedTemplateProject.key = event.target.txtKey.text;

					ProgressManager.start( ProgressManager.DIALOG_MODE, false );

					currentTemplate.processOpened();

					ProgressManager.complete();

					if ( !currentTemplate.isEncoded )
					{
						processOpenedTpl();
						return;
					}
				}

				AlertPopup.show( "Invalid secret key." );
			}

			closeTpl( false );
		}

		public function templateChanged() : void
		{
			if ( MenuManager.getInstance().state != MenuManager.STATE_MOD )
				MenuManager.getInstance().modifiedTemplate();
		}

		public function newTpl() : void
		{
			var template : BuilderTemplate = new BuilderTemplate();

			addTemplate(template);

			processNewTpl();
		}

		public function openTpl( file : File = null ) : void
		{
			var tpl : BuilderTemplate = new BuilderTemplate();
			tpl.addEventListener( Event.COMPLETE, completeTemplateHandler );

			if ( file )
				tpl.file = file;

			tpl.open();
		}

		// Event handler for the MenuBar control's itemClick event.
		private function menuHandler( event : FlexNativeMenuEvent , itemName : String = "") : void
		{
			if (event)
				event.stopImmediatePropagation();

			var menuItemName : String = itemName;
			
			if (event)
			{
				var menuItem : SuperNativeMenuItem = event.nativeMenuItem as SuperNativeMenuItem;
				menuItemName = menuItem.name;
			}
			
			var file : File = BuilderContextManager.instance.lastDir;
			var fileStream : FileStream = new FileStream();
			var tpl : BuilderTemplate;

			switch ( menuItemName )
			{
				case "new_template":
					closeTpl( true, newTpl );
					break;

				case "open_file":
					closeTpl( true, openTpl );
					break;

				case "save":
					saveTpl();
					break;

				case "save_as":
					saveTpl(true);
					break;

				case "close":
					closeTpl();
					break;


				case "import_from_tpl":
					ImportFromTpl.show( onImportFromTplClose );
					break;

				case "exit":
					exitApplication();
					break;

				case "properties":
					ProjectsSettingsDialog.show( Graphs.graphs );
					break;
				
				case "air_builder":
					AirBuildProperties.show();
					break;

				case "about_program":
					AboutProgramDialog.show();
					break;
				
				case "validate":
					//ValidateDialog.show(onValidate);
					onValidate( new CloseEvent( CloseEvent.CLOSE, false, false, ModalDialog.OK ) );
					break;

				case "run":
				case "debug":
				case "step_by_step":
					//try
					{
						if ( ContextManager.templateStruct )
							ContextManager.templateStruct.terminated = true;
	
						ContextManager.templateStruct = new TemplateStruct( pnl_graphs.toXML() );
	
						switch ( menuItemName )
						{
							case 'run':
								ContextManager.templateStruct.isDebug = false;
								ContextManager.templateStruct.isStepDebug = false;
								break;
							case 'debug':
								ContextManager.templateStruct.isDebug = true;
								ContextManager.templateStruct.isStepDebug = false;
								break;
							case 'step_by_step':
								ContextManager.templateStruct.isDebug = true;
								ContextManager.templateStruct.isStepDebug = true;
								break;
						}
						// проверка графа на ошибки
						var validateArr : Array = ContextManager.templateStruct.validate().array;
	
						pnl_problems.array = validateArr;
	
						function isError( element : *, index : int, arr : Array ) : Boolean
						{
							return (element.error.severity == BasicError.FATAL);
						}
	
						if ( validateArr && validateArr.filter( isError ).length > 0 )
						{
							alertProceedRun();
						}
						else
						{
							switchDebug( true );
	
							ProgressManager.start( ProgressManager.WINDOW_MODE, false );
	
							ContextManager.templateStruct.addEventListener( "generationComplete", generationComplete );
							ContextManager.templateStruct.addEventListener( "stepComplete", stepCompleteHandler );
							ContextManager.templateStruct.addEventListener( "error", debugErrorHandler );
							ContextManager.templateStruct.generate();
						}
					}
					/*
					 catch(e:Error)
					 {
					 ProgressManager.complete();

					 switchDebug(false);

					 ContextManager.templatestruct.removeEventListener("generationComplete", generationComplete);
					 ContextManager.templatestruct.removeEventListener("stepComplete", stepCompleteHandler);
					 ContextManager.templatestruct.removeEventListener("error", debugErrorHandler);

					 ContextManager.templatestruct = null;
					 Alert.show(e.message, LanguageManager.sentences['warning']);
					 }
					 */
					break;

				case "resume":
				case "step_into":
				case "step_over":
				case "step_return":
				case "break":
					if ( !ContextManager.templateStruct )
						return;

					switch ( menuItemName )
					{
						case 'resume':
							ProgressManager.start( ProgressManager.WINDOW_MODE, false );
							ContextManager.templateStruct.isStepDebug = false;
							ContextManager.templateStruct.generate( true );
							break;
						case 'step_into':
							ProgressManager.start( ProgressManager.WINDOW_MODE, false );
							ContextManager.templateStruct.isStepDebug = true;
							ContextManager.templateStruct.generate( true );
							break;
						case 'step_over':
							ProgressManager.start( ProgressManager.WINDOW_MODE, false );
							ContextManager.templateStruct.isStepDebug = true;
							ContextManager.templateStruct.generate( true, true );
							break;
						case 'step_return':
							ProgressManager.start( ProgressManager.WINDOW_MODE, false );
							ContextManager.templateStruct.isStepDebug = true;
							ContextManager.templateStruct.generate( true, true, true );
							break;
						case 'break':
							ProgressManager.complete();

							ContextManager.templateStruct.removeEventListener( "generationComplete", generationComplete );
							ContextManager.templateStruct.removeEventListener( "stepComplete", stepCompleteHandler );
							ContextManager.templateStruct.removeEventListener( "error", debugErrorHandler );

							ContextManager.templateStruct.terminated = true;
							ContextManager.templateStruct = null;
							switchDebug( false );
							break;
					}
					
					break;
			}

			if (!event)
				return;
			
			if ( menuItem.groupName == "lastfiles" )
			{
				closeTpl( true, openTpl, [new File( menuItem.data.toString() )] );
			}
			else if ( menuItem.groupName == "language" )
			{
				file = File.applicationDirectory.resolvePath( MenuManager.LANG_FOLDER ).resolvePath( menuItem.data.toString() );
				fileStream.addEventListener( Event.COMPLETE, completeLangHandler );
				fileStream.openAsync( file, FileMode.READ );
			}

		}

		public function get currentTemplate() : BuilderTemplate
		{
			if ( !ContextManager.templates || ContextManager.templates.length == 0 )
				return null;
			
			return ContextManager.templates.getItemAt( 0 ) as BuilderTemplate;
		}
		
		private function onValidate( event : CloseEvent ) : void
		{
			if ( event.detail == ModalDialog.OK )
			{
				var dialog : ValidateDialog = event.target as ValidateDialog;
				var flags : uint = 0;

				if ( dialog )
				{
					if ( dialog.chkClean )	 flags |= TemplateValidateOptions.CLEAN;
					if ( dialog.chkInitGr )	 flags |= TemplateValidateOptions.SET_INIT_GRAPH;
					if ( dialog.chkInitNode )	 flags |= TemplateValidateOptions.SET_INIT_NODES;
					if ( dialog.chkID )		 flags |= TemplateValidateOptions.SET_UIDS;
					if ( dialog.chkAttr )		 flags |= TemplateValidateOptions.SET_ATTRIBUTES;
					if ( dialog.chkNames )	 flags |= TemplateValidateOptions.SET_UNIQ_NAMES;
				}

				ContextManager.templateStruct = new TemplateStruct( currentTemplate.xmlStructure );

				var validateArr : Array = ContextManager.templateStruct.validate( flags ).array;

				pnl_problems.array = validateArr;
			}
		}

		public function alertProceedRun() : void
		{
			AlertPopup.show( "Error(s) exist in template\nProceed with launch?", "Errors in template", AlertPopup.YES | AlertPopup.NO, null, alertProceedRunHandler, null, AlertPopup.NO );
		}

		private function alertProceedRunHandler( event : CloseEvent ) : void
		{
			if ( event.detail == AlertPopup.YES )
			{
				//try
				{
					switchDebug( true );

					ProgressManager.start( ProgressManager.WINDOW_MODE, false );

					ContextManager.templateStruct.addEventListener( "generationComplete", generationComplete );
					ContextManager.templateStruct.addEventListener( "stepComplete", stepCompleteHandler );
					ContextManager.templateStruct.addEventListener( "error", debugErrorHandler );
					ContextManager.templateStruct.generate();
				}
			}
			else
				ContextManager.templateStruct = null;
		}

		private function stepCompleteHandler( event : Event ) : void
		{
			ProgressManager.complete();
			showDebugDetails();
		}

		public function showDebugDetails() : void
		{
			try
			{

				if ( !ContextManager.templateStruct || ContextManager.templateStruct.contextStack.length == 0 )
					return;

				var curGraphContext : GraphContext = ContextManager.templateStruct.curGraphContext;
				var curNodeStruct : NodeStruct = curGraphContext.curNode;

				pnl_graphs.showGraphByName( curGraphContext.curGraph.id );
				var curNode : Node = pnl_graphs.showNodeByName( curNodeStruct.id );

				curNode.setFocus();

				if ( curDebugNode )
				{
					curDebugNode.filters = [];
					for each( var arrow : Connector in curDebugNode.inArrows )
						Connector( arrow ).highlighted = false;
				}

				curDebugNode = curNode;
				curDebugNode.filters = [new GlowFilter( 0xff00ff )];

				if ( ContextManager.templateStruct.nodeStack.length == 0 )
					return;

				var nodeContext : NodeContext = ContextManager.templateStruct.nodeStack[ContextManager.templateStruct.nodeStack.length - 1];

				var prevNode : Node = pnl_graphs.getNodeByName( nodeContext.node.id );

				for each( var arrow1 : Connector in prevNode.outArrows )
					for each( var arrow2 : Connector in curNode.inArrows )
						if ( arrow1 == arrow2 )
							Connector( arrow1 ).highlighted = true;

				// --------------------
				// fill variables panel
				// --------------------

				// get local vars            	   
				var subArr : Array = [];
				var value : Object ;
				var fullValue : Object
				for ( var obj : String in curGraphContext.context )
				{
					fullValue   = curGraphContext.context[obj];
					if ( obj.search( /^__tmp_.*$/ ) < 0 )
					{
						if ( fullValue )
							value = (  fullValue is XML ) ? "[Object XML]" :  fullValue;
						else
							value = fullValue = "null"
					
						subArr.push( {	 Name : "_$" + obj,
							Value : value, FullValue : fullValue } );
					}	
				}

				// get global vars
				var arr : Array = [];
				var context : Dynamic = ContextManager.templateStruct.context
				for ( obj in context )
				{
					if ( !(context[obj] is TemplateLib) )
					{
						if ( obj.search( /^__tmp_.*$/ ) < 0 )
						{
							fullValue  = context[obj];
							value = (  context[obj] is XML ) ? "[Object XML]" :  fullValue;
							
							arr.push( { Name : "$" + obj, Value : value, FullValue : fullValue } );
						}
					}
				}
				arr.push( { Name : "this", Value : curGraphContext.curGraph.name, children : subArr } );

				pnl_variables.grid.dataProvider = new HierarchicalData( arr );
				pnl_variables.grid.invalidateList();

				// --------------------------
				// fill current buffer output
				// --------------------------

				var str : String = "";

				str = curGraphContext.buffer;
				pnl_output.text = str;
				pnl_output.textArea.validateNow();

				var myformat : TextFormat = new TextFormat();
				myformat.color = 0x000000;

				if ( str.length > 0 )
					pnl_output.textArea.field.setTextFormat( myformat, 0, str.length )

				if ( curDebugBufLen < str.length )
				{
					myformat.color = 0xFF0000;

					pnl_output.textArea.field.setTextFormat( myformat,
							curDebugBufLen,
							str.length );
				}

				curDebugBufLen = str.length;

				// --------------------
				// fill node values
				// --------------------

				if ( !pnl_node_value.array )
				{
					pnl_node_value.array = [];
				}

				var nodeCategory : String = nodeContext.node.category;
				var nodeSubCategory : String = "";
				str = "";
				switch ( nodeCategory )
				{
					case NodeCategory.NORMAL:
					case NodeCategory.SUBGRAPH:
						str = nodeContext.block.lastExecutedFragment.retValue;
						break;
					case NodeCategory.RESOURCE:
						str = nodeContext.block.retValue;
						break;
					case NodeCategory.COMMAND:
						switch ( nodeContext.block.ctype )
						{
							case CodeFragment.CT_OPERATION:
								nodeSubCategory = "Operation ";
								str = nodeContext.node.text;
								break;
							case CodeFragment.CT_TEST:
								nodeSubCategory = "Test ";
								str = nodeContext.node.text +
											  " => " + nodeContext.block.lastExecutedFragment.retValue;
								break;
							case CodeFragment.CT_FUNCTION:
								nodeSubCategory = "Function ";
								str = nodeContext.block.lastExecutedFragment.funcName +
											  " => " +
											  nodeContext.block.lastExecutedFragment.retValue;
								break;
						}
						break;
				}

				pnl_node_value.array.push( { label : StringUtil.substitute( "State ({0}{1}): {2}",
						nodeSubCategory,
						nodeCategory,
						str ), data : nodeContext.node } );

				pnl_node_value.list.invalidateList();
				pnl_node_value.list.selectedIndex = pnl_node_value.array.length - 1;
				pnl_node_value.list.callLater( pnl_node_value.list.scrollToIndex, [pnl_node_value.array.length] );

			}
			catch ( e : * )
			{
			}
		}

		public function switchDebug( enable : Boolean = true ) : void
		{
			MenuManager.getInstance().switchDebug(enable);
			
			//if(!enable)
			{
				pnl_variables.grid.dataProvider = null;
				pnl_node_value.array = [];
				pnl_output.text = "";

				curDebugBufLen = 0;
				if ( curDebugNode )
				{
					curDebugNode.filters = [];

					for each( var arrow : Connector in curDebugNode.inArrows )
						Connector( arrow ).highlighted = false;

					curDebugNode = null;
				}
			}
		}

		//--------------------------------------------------------------------------
		//
		//  Event handlers
		//
		//--------------------------------------------------------------------------

		private function problemsDoubleClickHandler( event : MouseEvent ) : void
		{
			var object : Object = event.target;
			while ( object.parent )
			{
				if ( object is SuperDataGrid )
					break;

				object = object.parent;
			}

			var grid : SuperDataGrid = object as SuperDataGrid;

			if ( !grid || !grid.selectedItem || !grid.selectedItem.data )
				return;

			if ( grid.selectedItem.data.node )
			{
				var node : Node = pnl_graphs.showNodeByName( grid.selectedItem.data.node.id );
				node.setFocus();
			}
			else if ( grid.selectedItem.data.graph )
			{
				pnl_graphs.showGraphByName( grid.selectedItem.data.graph.id );
			}
		}

		private function templateSaveHandler( event : Event ) : void
		{
			var tpl : BuilderTemplate = event.target as BuilderTemplate;
			tpl.removeEventListener( Event.COMPLETE, templateSaveHandler );

			processSavedTpl();
		}

		

		private function onCategoryDialogCheckLabel( categoryLabel : String ) : void
		{
			EditCaption.correctCategory = pnl_graphs.checkCategoryLabelUnique( categoryLabel );
		}

		private function onImportFromTplClose( event : Event ) : void
		{
			if ( event is CloseEvent && CloseEvent( event ).detail == ModalDialog.OK )
			{
				var tree : Tree = event.target.tplTree;
				var tpl : BuilderTemplate = event.target.template;
				var xmlListCol : XMLListCollection = new XMLListCollection();

				ProgressManager.start( ProgressManager.WINDOW_MODE, false );

				if ( ContextManager.templates.length == 0 )
				{
					newTpl();
				}

				if ( tpl && tpl.xmlStructure && tree.selectedItems.length > 0 )
				{
					for each( var node : Object in tree.selectedItems )
					{
						if ( node.@isBranch == 'true' )
						{
							var catList : XMLList = tpl.xmlStructure..graph.(@category == node.@label);

							for each( var xml : XML in catList )
								if ( xmlListCol.source.(@category == xml.@category && @name == xml.@name).length() == 0 )
									xmlListCol.addItem( xml );
						}
						else
						{
							xml = null;
							var lst : XMLList = tpl.xmlStructure..graph.(@category == node.@category && @name == node.@label);
							if ( lst.length() > 0 )
								xml = lst[0];

							if ( xml && xmlListCol.source.(@category == xml.@category && @name == xml.@name).length() == 0 )
								xmlListCol.addItem( xml );
						}

					}
				}

				for each ( var itm : XML in xmlListCol )
				{
					var graph : GraphCanvas = new GraphCanvas();
					graph.fromXML( itm );

					var newGraph : GraphCanvas = graph.clone();
					newGraph.initial = false;
					newGraph.name = "Imported_" + graph.name;
					pnl_graphs.addGraph( newGraph );
				}
			}

			ProgressManager.complete();
		}

		private function addTemplate (template : BuilderTemplate) : void
		{
			ContextManager.templates.addItemAt( template, 0 );
			
			BindingUtils.bindSetter(templateChangeHandler, currentTemplate, 'modified');
		}
		
//		private function onImportClose( event : CloseEvent ) : void
//		{
//			if ( event.detail == ModalDialog.OK )
//			{
//				var graphs : Array = event.target.graphs;
//
//				closeTpl( false );
//
//				var template : BuilderTemplate = Import( event.target ).template as BuilderTemplate;
//
//				addTemplate(template);
//
//				processNewTpl();
//
//				ProgressManager.start( ProgressManager.DIALOG_MODE, true );
//
//				var i : int = 0;
//				if ( graphs.length > 0 )
//				{
//					ProgressManager.step( i++, graphs.length );
//
//					for each ( var graph : GraphCanvas in graphs )
//					{
//						pnl_graphs.addGraph( graph );
//					}
//				}
//
//				pnl_graphs.selectGraph( pnl_graphs.findFirstGraph() );
//
//				ProgressManager.complete();
//			}
//		}

		private function generationComplete( event : Event ) : void
		{
			ProgressManager.complete();

			switchDebug( false );

			if ( ContextManager.templateStruct.buffer )
			{
				var file : File = BuilderContextManager.instance.file;
				var stream : FileStream = new FileStream();

				stream.open( file, FileMode.WRITE );
				stream.writeUTFBytes( ContextManager.templateStruct.buffer );
				stream.close();

				Console.show( StringUtil.substitute( "Data saved to {0}.\n{1}", BuilderContextManager.instance.file.nativePath,
						ContextManager.templateStruct.buffer ), "Result" );
			}

			ContextManager.templateStruct.removeEventListener( "generationComplete", generationComplete );
			ContextManager.templateStruct.removeEventListener( "stepComplete", stepCompleteHandler );
			ContextManager.templateStruct.removeEventListener( "error", debugErrorHandler );

			ContextManager.templateStruct = null;
		}

		private function debugErrorHandler( event : Event ) : void
		{
			var error : * = event.target.error;

			ProgressManager.complete();

			showDebugDetails();
			AlertPopup.show( error.message, "Error!", 4, null, onErrAlertClose );
		}

		private function onErrAlertClose( event : Event ) : void
		{
			switchDebug( false );

			ContextManager.templateStruct.removeEventListener( "generationComplete", generationComplete );
			ContextManager.templateStruct.removeEventListener( "stepComplete", stepCompleteHandler );
			ContextManager.templateStruct.removeEventListener( "error", debugErrorHandler );

			ContextManager.templateStruct = null;
		}
		
		private var builderUpdater : BuilderUpdater = new BuilderUpdater();
		private function checkUpdate():void
		{
			builderUpdater.checkForUpdate();
			
		}
		
		protected function creationCompleteHandler(event:FlexEvent):void
		{
			addEventListener("closeWithoutSave", closeWithoutSaveHandler);
			
			checkUpdate();
		}
		
		private function templateChangeHandler (object:Object) : void 
		{
			if (object as Boolean == true)
				templateChanged();
		}
				
		private function get selectedTemplateProject () : BuilderTemplateProject
		{
			return currentTemplate.selectedProject as BuilderTemplateProject;
		}
		
		
		protected function powerpackcontrolbar_creationCompleteHandler(event:FlexEvent):void
		{
			powerpackControlBar.addEventListener(ControlBarEvent.EVENT_ITEM_CLICK, itemClickHandler);
			
			function itemClickHandler (controlBarEvent : ControlBarEvent) : void
			{
				menuHandler(null, controlBarEvent.targetItemType);
			}
			
		}
		
		private function graphsChangeHandler () : void
		{
			if (currentTemplate)
				currentTemplate.modified = true;
		}
		
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">

		<control:PowerPackControlBar 	id="powerpackControlBar"
										creationComplete="powerpackcontrolbar_creationCompleteHandler(event)"/>
		
		<mx:HRule width="100%" />
		
		<containers:Docker>

			<mx:VBox width="100%" height="100%" id="workStage" visible="true" includeInLayout="true">
				
				<mx:HDividedBox height="100%" width="100%">

					<panel:Graphs creationIndex="2"
								  id="pnl_graphs"

								  vsViewStack="{viewstack}"
								  templateChanged="{graphsChangeHandler()}">
					</panel:Graphs>

					<mx:Panel creationIndex="1" width="100%" height="100%" layout="absolute"
							  title="{LanguageManager.sentences.graph_editor}" backgroundAlpha="0.5">

						<mx:VDividedBox height="100%" width="100%">

							<mx:HDividedBox height="100%" width="100%">

								<mx:ViewStack id="viewstack" width="100%" height="100%" borderStyle="solid" />

								<containers:SuperTabNavigator creationPolicy="all" height="100%" dragEnabled="true"
															  dropEnabled="true" closePolicy="{SuperTab.CLOSE_NEVER}">

									<panel:Variables id="pnl_variables" minWidth="150" />

								</containers:SuperTabNavigator>

							</mx:HDividedBox>

							<mx:HDividedBox width="100%">

								<containers:SuperTabNavigator creationPolicy="all" width="100%" height="100%"
															  dragEnabled="true" dropEnabled="true"
															  closePolicy="{SuperTab.CLOSE_NEVER}">

									<panel:Problems id="pnl_problems" />

									<!--panel:Properties id="pnl_properties"/-->

									<panel:Output id="pnl_output" />

								</containers:SuperTabNavigator>

								<containers:SuperTabNavigator creationPolicy="all" width="100%" height="100%"
															  dragEnabled="true" dropEnabled="true"
															  closePolicy="{SuperTab.CLOSE_NEVER}">

									<panel:NodeValue id="pnl_node_value" />

								</containers:SuperTabNavigator>

							</mx:HDividedBox>

						</mx:VDividedBox>
					</mx:Panel>

				</mx:HDividedBox>

			</mx:VBox>

		</containers:Docker>
	</mx:VBox>
	
</mx:WindowedApplication>
