<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication 
	title="{LanguageManager.sentences.app_title} - {ContextManager.instance.templates.length?ContextManager.instance.templates.getItemAt(0).name:'None'}"
	titleIcon="@Embed(source='assets/icons/icon_16.png')" 
	layout="absolute" 
	statusBarFactory="PowerPack.customize.core.windowClasses.SuperStatusBar"
	preinitialize="preinit()"
	initialize="init()" 
	applicationComplete="show()" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ns4="PowerPack.com.graph.*" 
	xmlns:extended="ExtendedAPI.com.containers.*"
	xmlns:controls="ExtendedAPI.com.controls.*" 
	xmlns:ui="ExtendedAPI.com.ui.*" 
	xmlns:panel="PowerPack.com.panel.*" xmlns:customize="PowerPack.customize.*">
    
    <mx:Style source="style/builder.css"/>
    <mx:Move duration="100" id="DockerMove"/>
	<mx:Fade duration="100" id="DockerFade"/>
	
	<customize:GeneratorResources id="resources"/>
    
    <mx:menu>
    	<ui:SuperFlexNativeMenu id="flexNativeMenu" 
    		dataProvider="{fileMenuData}" 
        	labelField="@label" 
        	keyEquivalentField="@keyEquivalent"
        	showRoot="false"
        	itemClick="menuHandler(event);" />        
    </mx:menu>
    
    <mx:XML format="e4x" id="fileMenuData">
        <root> 
	        <menuitem label="{LanguageManager.sentences.menu_file}" id="file">
	            <menuitem label="{LanguageManager.sentences.menu_new_template}" id="new" keyEquivalent="n" ctrlKey="true"/>
	            <menuitem label="{LanguageManager.sentences.menu_new_category}" id="new_category" keyEquivalent="t" ctrlKey="true"/>
	            <menuitem label="{LanguageManager.sentences.menu_open_file}" id="open_file" keyEquivalent="o" ctrlKey="true"/>
	            <menuitem type="separator" id="separator"/>
	            <menuitem label="{LanguageManager.sentences.menu_close}" id="close" keyEquivalent="w" ctrlKey="true"/>
	            <menuitem type="separator"/>
	            <menuitem label="{LanguageManager.sentences.menu_save}" id="save" keyEquivalent="s" ctrlKey="true"/>
	            <menuitem label="{LanguageManager.sentences.menu_save_as}" id="save_as" keyEquivalent="s" ctrlKey="true" shiftKey="true"/> 
	            <menuitem type="separator"/>
	            <menuitem label="{LanguageManager.sentences.menu_import}" id="import">
	            	<menuitem label="{LanguageManager.sentences.import_from_app}" id="import_from_app"/>
	            	<menuitem label="{LanguageManager.sentences.import_from_tpl}" id="import_from_tpl"/> 
				</menuitem>
	            <menuitem type="separator"/>
	            <menuitem label="{LanguageManager.sentences.menu_exit}" id="exit"/>                                                
	        </menuitem>

	        <menuitem label="{LanguageManager.sentences.menu_template}" id="template">
	        	<!--menuitem label="{LanguageManager.sentences.menu_validate}" id="validate"/-->
	        	<menuitem label="{LanguageManager.sentences.menu_properties}" id="properties"/>
	        </menuitem>
	        
	        <menuitem label="{LanguageManager.sentences.menu_run}" id="run">
	        	<menuitem label="{LanguageManager.sentences.menu_run_template}" id="run" keyEquivalent="r" ctrlKey="true"/>
	        	<menuitem label="{LanguageManager.sentences.menu_debug}" id="debug" keyEquivalent="d" ctrlKey="true"/>
	        	<menuitem label="{LanguageManager.sentences.menu_step_by_step}" id="step_by_step" keyEquivalent="d" ctrlKey="true" altKey="true"/>
	            <menuitem type="separator"/>
	        	<menuitem label="{LanguageManager.sentences.menu_resume}" id="resume" enabled="false" keyEquivalent="m" ctrlKey="true"/>
	        	<menuitem label="{LanguageManager.sentences.menu_step_into}" id="step_into" enabled="false" keyEquivalent="i" ctrlKey="true"/>
	        	<menuitem label="{LanguageManager.sentences.menu_step_over}" id="step_over" enabled="false" keyEquivalent="o" ctrlKey="true"/>
	        	<menuitem label="{LanguageManager.sentences.menu_step_return}" id="step_return" enabled="false" keyEquivalent="e" ctrlKey="true"/>
	        	<menuitem label="{LanguageManager.sentences.menu_break}" id="break" enabled="false" keyEquivalent="b" ctrlKey="true"/>
	        </menuitem>
	        
	        <menuitem label="{LanguageManager.sentences.menu_settings}" id="settings">
	            <menuitem label="{LanguageManager.sentences.menu_language}" id="language" enabled="false"/>
	        </menuitem>

	        <menuitem label="{LanguageManager.sentences.menu_help}" id="help" enabled="false"/>
        </root>
    </mx:XML>
    	
	<mx:Script>
		<![CDATA[
			import flash.system.fscommand;
			import PowerPack.customize.Resources;
			import PowerPack.com.managers.CashManager;
			import ExtendedAPI.com.containers.SuperWindow;
			import mx.core.Window;
			import ExtendedAPI.com.containers.SuperAlert;
			import mx.collections.XMLListCollection;
			import mx.controls.Tree;
			import PowerPack.com.dialog.ImportFromTpl;
			import ExtendedAPI.com.controls.SuperDataGrid;
			import ExtendedAPI.com.controls.tabBarClasses.SuperTab;
			import ExtendedAPI.com.ui.SuperFlexNativeMenu;
			import ExtendedAPI.com.ui.SuperNativeMenu;
			import ExtendedAPI.com.utils.FileUtils;
			import ExtendedAPI.com.utils.Utils;
			
			import flash.utils.describeType;
			import flash.utils.setTimeout;
			
			import flexlib.controls.Highlighter;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.HierarchicalData;
			import mx.controls.Alert;
			import mx.controls.FlexNativeMenu;
			import mx.controls.ProgressBarMode;
			import mx.core.Application;
			import mx.core.Singleton;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexNativeMenuEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import PowerPack.com.*;
			import PowerPack.com.dialog.EditCaption;
			import PowerPack.com.dialog.Import;
			import PowerPack.com.dialog.ModalDialog;
			import PowerPack.com.dialog.TemplateKey;
			import PowerPack.com.dialog.TemplateProperties;
			import PowerPack.com.dialog.ValidateDialog;
			import PowerPack.com.gen.*;
			import PowerPack.com.gen.parse.CodeParser;
			import PowerPack.com.graph.Connector;
			import PowerPack.com.graph.GraphCanvas;
			import PowerPack.com.graph.Node;
			import PowerPack.com.graph.NodeCategory;
			import PowerPack.com.managers.ContextManager;
			import PowerPack.com.managers.LanguageManager;
			import PowerPack.com.managers.ProgressManager;
			import PowerPack.com.menu.MenuGeneral;
			import PowerPack.com.panel.Console;
			import PowerPack.com.panel.graphsClasses.AccordionChild;
			
			//--------------------------------------------------------------------------
			//
			//  Class methods
			//
			//--------------------------------------------------------------------------  	
			
			private var curDebugNode:Node = null;
						
			private function preinit():void
			{
				maximize();	
				
            	Connector.classConstructed;
				Node.classConstructed;
				GraphCanvas.classConstructed;
				
				Connector.connectMode = Connector.CM_CENTER;				
				
				var defaultCaptions:Object = {

					app_title:"Power Pack Builder",
					
					menu_run:"_Run",
					menu_run_template:"_Run",
					menu_debug:"_Debug",
					menu_step_by_step:"_Step By Step",
					menu_resume:"Resu_me",
					menu_step_into:"Step _Into",
					menu_step_over:"Step _Over",
					menu_step_return:"Step _Return",
					menu_break:"_Break"
				};
				
				LanguageManager.setSentences(defaultCaptions);
				
				if(File.applicationDirectory.resolvePath('style/builder.swf').exists)
					StyleManager.loadStyleDeclarations("style/builder.swf");				
			}
			
			private function init():void 
			{	            	
		    }
		    
		    private function show():void
		    {
				addEventListener(Event.CLOSING, closingApplicationHandler);					
				pnl_problems.grid.addEventListener(MouseEvent.DOUBLE_CLICK, onProblemsDoubleClick);			
				
				var file:File;
				var fileStream:FileStream;
				
        	    for each ( file in [ContextManager.instance.dataStorage, 
        	    					ContextManager.instance.settingStorage] )
        	    {
        	    	if(!file.exists)
        	    		file.createDirectory();
        	    }
        	    
        	    Application.application.setStyle("modalTransparencyBlur", 0);
				Application.application.setStyle("modalTransparency", 0);
        	    
        	    CashManager.clear();
        	    
				// Load application settings
	            ContextManager.loadSettings();
	            
	            MenuGeneral.noTemplate(fileMenuData);
	            
	            // Fill language menu
	            MenuGeneral.updateLangMenu(fileMenuData);
	            
	            // fill last files menu
	            MenuGeneral.updateLastFilesMenu(fileMenuData);
	            
				// Load language file
				file = File.applicationDirectory.resolvePath("lang/"+ContextManager.instance.lang.file);
	            if(file && file.exists)
	            {
					fileStream = new FileStream();
									
					fileStream.addEventListener(Event.COMPLETE, completeLangHandler);
					fileStream.openAsync(file, FileMode.READ);
	            }
	            	            
	            // Load template  
	            if(ContextManager.instance.lastFile && ContextManager.instance.files[0])
    	        {
    	        	var tpl:Template = new Template();    	        	
					tpl.file = ContextManager.instance.files[0];
					tpl.addEventListener(Event.COMPLETE, completeTemplateHandler);
					
					tpl.open();
            	}
            	
            	//trace(LanguageManager.getSentences("<sentense id='' label='{0}'>{1}</sentense>\n"));
            	//trace(describeType(Dynamic));
		    	       	
	       		function closingApplicationHandler(event:Event):void {
	       			event.preventDefault();
	       			exitApplication();	   
	       		}            	
		    }
		    		    
		    private function onProblemsDoubleClick(event:MouseEvent):void
		    {
		    	var object:Object = event.target;
		    	while(object.parent) 
		    	{
		    		if(object is SuperDataGrid)
		    			break;
		    			
		    		object = object.parent;
		    	}
		    	
		    	var grid:SuperDataGrid = object as SuperDataGrid;
		    	
		    	if(!grid || !grid.selectedItem || !grid.selectedItem.data)
		    		return;
		    	
		    	if(grid.selectedItem.data.node)
		    	{
		    		var node:Node = pnl_graphs.showNodeByName(grid.selectedItem.data.node.id);
		    		node.setFocus();
		    	}
		    	else if(grid.selectedItem.data.graph)
		    	{
		    		pnl_graphs.showGraphByName(grid.selectedItem.data.graph.id);
		    	}
		    }
	       	
	       	public function exitApplication(event:Event=null):void
	       	{
	       		if(ContextManager.instance.templates.length>0 && ContextManager.instance.templates[0].modified)
	       		{
       				SuperAlert.show(
       					"Do you want to save file before exit?", 
       					LanguageManager.sentences['confirmation'], 
       					Alert.YES|Alert.NO|Alert.CANCEL, this.nativeWindow, alertSaveBeforeExitHandler, null, Alert.YES);
       			}
       			else
       			{
	       			SuperAlert.show(
	       				"Are you sure want to exit?", 
	       				LanguageManager.sentences['confirmation'], 
	       				Alert.YES|Alert.NO, this.nativeWindow, alertExitHandler, null, Alert.NO);
       			}
       			
			    function alertExitHandler(event:CloseEvent):void 
			    {
		        	if(event.detail==Alert.YES)
		        	{  		
						ContextManager.saveSettings();
		       			exit();
		   	     	}
				}	      
				
			    function alertSaveBeforeExitHandler(event:CloseEvent):void 
			    {
		        	if(event.detail==Alert.YES)
		        	{   
              			var tpl:Template = ContextManager.instance.templates[0];
              			tpl.addEventListener(Event.COMPLETE, templateSaveAndExitHandler);
              			tpl.xmlStructure = pnl_graphs.toXML();
              			tpl.save();				
		        	}
		        	else if(event.detail==Alert.NO)
		       		{
						ContextManager.saveSettings();
		       			exit();	       		
		       		}	   	     	
				}	      
			    
			    function templateSaveAndExitHandler(event:Event):void 
			    {
			    	var tpl:Template = event.target as Template;
			    	tpl.removeEventListener(Event.COMPLETE, templateSaveAndExitHandler);
			    	
			    	processSavedTpl();
					ContextManager.saveSettings();
		       		exit();	 			    	
			    }       			
	       	}
	       	
			public function closeTpl(ask:Boolean = true, action:Function=null, args:Array=null):void
			{
				if(ContextManager.instance.templates.length>0)
				{
					var tpl:Template = ContextManager.instance.templates[0];
				
					if((tpl.modified || !tpl.file) && ask)
					{
						alertSaveAndCloseTemplate(action, args);
						return;
					}
				
					ContextManager.instance.templates.removeItemAt(0);
				}
				
	   	  		ContextManager.instance.lastFile = false;
	       	    
	       	    pnl_graphs.clear();
	           	
	           	workStage.visible = false;
	           	workStage.includeInLayout = false;
	           	
				MenuGeneral.noTemplate(fileMenuData);
				
				if(action!=null)
					callLater(action, args);
			}

	       	public function alertSaveAndCloseTemplate(action:Function=null, args:Array=null):void
	       	{
   				SuperAlert.show(
   					"Do you want to save template?", 
   					LanguageManager.sentences['confirmation'], 
   					Alert.YES|Alert.NO|Alert.CANCEL, this.nativeWindow, alertSaveAndCloseHandler, null, Alert.YES);
			    
			    function alertSaveAndCloseHandler(event:CloseEvent):void {
		        	if(event.detail==Alert.YES)
		        	{   
	        			var tpl:Template = ContextManager.instance.templates[0];
	          			tpl.addEventListener(Event.COMPLETE, templateSaveAndCloseHandler);
	          			tpl.xmlStructure = pnl_graphs.toXML();
	          			tpl.save();
		        	}
		        	else if(event.detail==Alert.NO)
		        	{
						closeTpl(false, action, args);	 			    	
		        	}	
				}	       	
	
			    function templateSaveAndCloseHandler(event:Event):void {
					var tpl:Template = event.target as Template;
	          		tpl.removeEventListener(Event.COMPLETE, templateSaveAndCloseHandler);			    	
			    	processSavedTpl();
					closeTpl(false, action, args);	 			    	
			    }       			
	       	}
	    	    
			public function processOpenedTpl():void
			{
				var tpl:Template = Template(ContextManager.instance.templates[0]);
       			pnl_graphs.templateXML = tpl.xmlStructure;

                workStage.visible = true;
   	            workStage.includeInLayout = true;
   	            
   	            ContextManager.instance.lastFile = true;
				ContextManager.updateLastFiles(tpl.file);            	
				
				MenuGeneral.updateLastFilesMenu(fileMenuData);
				MenuGeneral.openedTemplate(fileMenuData);    	            
			}
			
			public function processSavedTpl():void
			{
				var tpl:Template = Template(ContextManager.instance.templates[0]);

                workStage.visible = true;
   	            workStage.includeInLayout = true;
   	            
   	            ContextManager.instance.lastFile = true;
				ContextManager.updateLastFiles(tpl.file);            	
				
				MenuGeneral.updateLastFilesMenu(fileMenuData);
				MenuGeneral.openedTemplate(fileMenuData);    	            
			}
						
			public function processNewTpl():void
			{
				var tpl:Template = Template(ContextManager.instance.templates[0]);
       			pnl_graphs.templateXML = tpl.xmlStructure;

                workStage.visible = true;
   	            workStage.includeInLayout = true;
   	            
   	            ContextManager.instance.lastFile = false;
				
				MenuGeneral.newTemplate(fileMenuData);    	            
			}
							
			//--------------------------------------------------------------------------
		    //
		    //  Event handlers
		    //
		    //--------------------------------------------------------------------------
		    
	        private function completeLangHandler(event:Event):void
	        {
        		var fileStream:FileStream = event.target as FileStream;        		
        		fileStream.removeEventListener(Event.COMPLETE, completeLangHandler);
        		
        		var xml:XML = XML(fileStream.readUTFBytes(fileStream.bytesAvailable));
				fileStream.close();
        		
				LanguageManager.languageXML = xml;
				
				ContextManager.instance.lang.label = LanguageManager.languageXML.@label.toLowerCase();
				ContextManager.instance.lang.file = LanguageManager.languageXML.@data;
	        }
	        
	        private function completeTemplateHandler(event:Event):void
	        {
	        	var template:Template = event.target as Template;

	        	template.removeEventListener(Event.COMPLETE, completeTemplateHandler);
	        	
	        	closeTpl(false);
	        	
    			ContextManager.instance.templates.addItemAt(template, 0);
					
				if(template.isEncoded)
				{
					TemplateKey.show(onKeyDialogClose);
				}
				else
				{
					processOpenedTpl();
				}
	        }	        
	        
            private function onKeyDialogClose(event:CloseEvent):void
            {            	
            	if(event.detail == ModalDialog.OK)
            	{
            		if(event.target.txtKey.text)
            		{
            			var tpl:Template = ContextManager.instance.templates[0];
            			
            			tpl.key = event.target.txtKey.text;
            			
            			ProgressManager.start(ProgressManager.DIALOG_MODE, false);
            			
            			tpl.decode();
            			
						if(tpl.xmlStructure)
							tpl.cash();
							
						processOpenedTpl();
						
						ProgressManager.complete();			
						
						return;        					
					}
        			
        			SuperAlert.show("Invalid secret key.");
            	}
				
				closeTpl(false);
            }
            	    	    
           	public function templateChanged():void
           	{
           		if(ContextManager.instance.templates.length>0)
           		{
           			var tpl:Template = ContextManager.instance.templates[0];
           			
           			if(MenuGeneral.state != MenuGeneral.STATE_MOD)
           			{
           				tpl.modified = true;
           				MenuGeneral.modifiedTemplate(fileMenuData);
           			}
           		}	
           	}	
			
			public function newTpl():void
			{
                var template:Template = new Template();

   				ContextManager.instance.templates.addItemAt(template, 0);
				
				processNewTpl();									
			}
			
			public function openTpl(file:File=null):void
			{
	        	var tpl:Template = new Template();    	        	
				tpl.addEventListener(Event.COMPLETE, completeTemplateHandler);
				if(file)
					tpl.file = file;				
				tpl.open();		
			}
				
           	
            // Event handler for the MenuBar control's itemClick event.
            private function menuHandler(event:Object):void  
            {
            	var file:File = ContextManager.instance.lastDir;
				var fileStream:FileStream = new FileStream();
				var tpl:Template;

                if(event.item.@id == "new")
                {
                	closeTpl(true, newTpl);
                }
                else if(event.item.@id == "open_file")
                {		
    	        	closeTpl(true, openTpl);
                }
				else if(event.item.@tag == "lastfiles")
				{					
					closeTpl(true, openTpl, [new File(event.item.@data)]);
				}     
    	        else if(event.item.@id == "save")
    	        {
    	        	if(ContextManager.instance.templates.length>0)
    	        	{
    	        		tpl = ContextManager.instance.templates[0];
						tpl.addEventListener(Event.COMPLETE, templateSaveHandler);
						tpl.xmlStructure = pnl_graphs.toXML();    	        		    	        		
    	        		tpl.save();
    	        	}
    	        }
				else if(event.item.@id == "save_as")
				{
    	        	if(ContextManager.instance.templates.length>0)
    	        	{
    	        		tpl = ContextManager.instance.templates[0];
						tpl.addEventListener(Event.COMPLETE, templateSaveHandler);
						tpl.xmlStructure = pnl_graphs.toXML();    	        		    	        		
    	        		tpl.browseForSave();
    	        	}
				}
                else if(event.item.@id == "close")
                {		
                	closeTpl();
                }                
                else if(event.item.@id == "new_category")
                {
                	EditCaption.show("New category", onCatDialogClose);
                }
				else if(event.item.@id == "import_from_app")
				{
					Import.show(onImportClose);
				}
				else if(event.item.@id == "import_from_tpl")
				{
					ImportFromTpl.show(onImportFromTplClose);
				}
				else if(event.item.@id == "exit")
				{
					exitApplication();
				}     
				else if(event.item.@id == "properties")
				{
					TemplateProperties.show(onTemplatePropertiesClose);
				} 				
				else if(event.item.@id == "validate")
				{
					//ValidateDialog.show(onValidate);
					onValidate( new CloseEvent(CloseEvent.CLOSE, false, false, ModalDialog.OK));		
				}  				
				else if(event.item.@id == "run" || event.item.@id == "debug" || event.item.@id == "step_by_step")
				{
					try
					{
						ContextManager.instance.templateStruct = new TemplateStruct(
							pnl_graphs.toXML(),
							(ContextManager.instance.templates.getItemAt(0) as Template).ID);
							
						switch(event.item.@id.toString())
						{
							case 'run':
								ContextManager.instance.templateStruct.isDebug = false;
								ContextManager.instance.templateStruct.isStepDebug = false;
								break;
							case 'debug':
								ContextManager.instance.templateStruct.isDebug = true;
								ContextManager.instance.templateStruct.isStepDebug = false;
								break;
							case 'step_by_step':
								ContextManager.instance.templateStruct.isDebug = true;
								ContextManager.instance.templateStruct.isStepDebug = true;
								break;
						}
						
						var validateArr:Array = ContextManager.instance.templateStruct.validate().array;
						
						pnl_problems.array = validateArr;
					
						function isError(element:*, index:int, arr:Array):Boolean {
            				return (element.error.severity == BasicError.FATAL);
	        			}	
        									
						if(validateArr && validateArr.filter(isError).length>0)
						{
							alertProceedRun();
						}
						else
						{
							switchDebug(true);
							
							ProgressManager.start(ProgressManager.WINDOW_MODE, false);
							
							ContextManager.instance.templateStruct.addEventListener("generationComplete", generationComplete);					
							ContextManager.instance.templateStruct.addEventListener("stepComplete", stepCompleteHandler);
							ContextManager.instance.templateStruct.addEventListener("error", debugErrorHandler);
							ContextManager.instance.templateStruct.generate();
						}
					}
					catch(e:Error) 
					{
						ProgressManager.complete();
						
						switchDebug(false);
						
						ContextManager.instance.templateStruct.removeEventListener("generationComplete", generationComplete);					
						ContextManager.instance.templateStruct.removeEventListener("stepComplete", stepCompleteHandler);
						ContextManager.instance.templateStruct.removeEventListener("error", debugErrorHandler);
													
						ContextManager.instance.templateStruct = null;
						Alert.show(e.message, "Warning!");
					}
				}
				else if(event.item.@id == "resume" ||
					event.item.@id == "step_into" ||
					event.item.@id == "step_over" ||
					event.item.@id == "step_return" ||
					event.item.@id == "break")
				{
					if(!ContextManager.instance.templateStruct)
						return;
												
					//try {
						switch(event.item.@id.toString())
						{
							case 'resume':
								ProgressManager.start(ProgressManager.WINDOW_MODE, false);
								ContextManager.instance.templateStruct.isStepDebug = false;
								ContextManager.instance.templateStruct.generate(true);
								break;
							case 'step_into':
								ProgressManager.start(ProgressManager.WINDOW_MODE, false);
								ContextManager.instance.templateStruct.isStepDebug = true;
								ContextManager.instance.templateStruct.generate(true);
								break;
							case 'step_over':
								ProgressManager.start(ProgressManager.WINDOW_MODE, false);
								ContextManager.instance.templateStruct.isStepDebug = true;
								ContextManager.instance.templateStruct.generate(true, true);
								break;
							case 'step_return':
								ProgressManager.start(ProgressManager.WINDOW_MODE, false);
								ContextManager.instance.templateStruct.isStepDebug = true;
								ContextManager.instance.templateStruct.generate(true, true, true);
								break;
							case 'break':
								ProgressManager.complete();

								ContextManager.instance.templateStruct.removeEventListener("generationComplete", generationComplete);					
								ContextManager.instance.templateStruct.removeEventListener("stepComplete", stepCompleteHandler);
								ContextManager.instance.templateStruct.removeEventListener("error", debugErrorHandler);
								
								ContextManager.instance.templateStruct = null;
								switchDebug(false);
								break;
						}							
					/*} catch(e:Error) {
						ProgressManager.complete();

						ContextManager.instance.templateStruct.removeEventListener("generationComplete", generationComplete);					
						ContextManager.instance.templateStruct.removeEventListener("stepComplete", stepCompleteHandler);
						ContextManager.instance.templateStruct.removeEventListener("error", debugErrorHandler);
						
						ContextManager.instance.templateStruct = null;
						switchDebug(false);
						SuperAlert.show(e.message, "Warning!");
					}*/									
				}
				
				if(event.item.@tag == "language")
				{				
					file = File.applicationDirectory.resolvePath("lang").resolvePath(event.item.@data);	
					fileStream.addEventListener(Event.COMPLETE, completeLangHandler);
					fileStream.openAsync(file, FileMode.READ);
				}
				
            }
            
            private function onTemplatePropertiesClose(event:CloseEvent):void
            {
				if(event.detail == ModalDialog.OK)
            	{
            		var tpl:Template = ContextManager.instance.templates[0]; 
            		var propDlg:TemplateProperties = event.target as TemplateProperties;
            		
            		tpl.name = propDlg.txtName.text;
					tpl.description = propDlg.txtDesc.text;
					tpl.picture = new File(StringUtil.trim(propDlg.picBrowse.text));
					tpl.key = StringUtil.trim(propDlg.txtKey.text);
					
					templateChanged();
            	}            	
            }
            
            private function onValidate(event:CloseEvent):void
            {
            	if(event.detail == ModalDialog.OK)
            	{
            		var dialog:ValidateDialog = event.target as ValidateDialog;
            		var tpl:Template = ContextManager.instance.templates[0];
            		 
            		var flags:uint = 0;
            		
            		if(dialog)
            		{
	            		if(dialog.chkClean) 	flags|=TemplateValidateOptions.CLEAN;
	            		if(dialog.chkInitGr) 	flags|=TemplateValidateOptions.SET_INIT_GRAPH;
	            		if(dialog.chkInitNode) 	flags|=TemplateValidateOptions.SET_INIT_NODES;
	            		if(dialog.chkID) 		flags|=TemplateValidateOptions.SET_UIDS;
	            		if(dialog.chkAttr) 		flags|=TemplateValidateOptions.SET_ATTRIBUTES;
	            		if(dialog.chkNames) 	flags|=TemplateValidateOptions.SET_UNIQ_NAMES;
	            	}
            		            		
					ContextManager.instance.templateStruct = new TemplateStruct(tpl.xmlStructure, tpl.ID);
					var validateArr:Array = ContextManager.instance.templateStruct.validate(flags).array;
	
					pnl_problems.array = validateArr;
            	}            
            }
			
			public function alertProceedRun():void
			{			
	     		SuperAlert.show("Error(s) exist in template\nProceed with launch?", "Errors in template", Alert.YES|Alert.NO, null, alertProceedRunHandler, null, Alert.NO);			     	
			}
			
			private function alertProceedRunHandler(event:CloseEvent):void 
		    {
	        	if(event.detail==Alert.YES)
	        	{    
	        		try
	        		{
		       			switchDebug(true);
		       			
		       			ProgressManager.start(ProgressManager.WINDOW_MODE, false);
								
						ContextManager.instance.templateStruct.addEventListener("generationComplete", generationComplete);					
						ContextManager.instance.templateStruct.addEventListener("stepComplete", stepCompleteHandler);
						ContextManager.instance.templateStruct.addEventListener("error", debugErrorHandler);
						ContextManager.instance.templateStruct.generate();
					}
					catch(e:Error) 
					{
						ProgressManager.complete();
						
						switchDebug(false);

						ContextManager.instance.templateStruct.removeEventListener("generationComplete", generationComplete);					
						ContextManager.instance.templateStruct.removeEventListener("stepComplete", stepCompleteHandler);
						ContextManager.instance.templateStruct.removeEventListener("error", debugErrorHandler);
						
						ContextManager.instance.templateStruct = null;
						SuperAlert.show(e.message, "Warning!");
					}
	   	     	}
	   	     	else
	   	     		ContextManager.instance.templateStruct = null;
			}
				            
            private function stepCompleteHandler(event:Event):void
            {
            	ProgressManager.complete();
            	showDebugDetails();
            }
            
            public function showDebugDetails():void
            {
            	try
            	{
            		
				if(!ContextManager.instance.templateStruct || ContextManager.instance.templateStruct.contextStack.length==0)
					return;
            	
            	var curNode:Node = pnl_graphs.showNodeByName(GraphContext(ContextManager.instance.templateStruct.contextStack[ContextManager.instance.templateStruct.contextStack.length-1]).curNode.id);
            	curNode.setFocus();
            	
            	if(curDebugNode)
            	{
            		curDebugNode.filters = [];
            		for each(var arrow:Connector in curDebugNode.inArrows)
            			Connector(arrow).highlighted = false;            		
            	}
            	
            	curNode.filters = [new GlowFilter(0xff00ff)];  	
				
            	curDebugNode = curNode;
            	
            	if(ContextManager.instance.templateStruct.nodeStack.length==0)
            		return;
            		
				var nodeContext:NodeContext = ContextManager.instance.templateStruct.nodeStack[ContextManager.instance.templateStruct.nodeStack.length-1];

            	var prevNode:Node = pnl_graphs.getNodeByName(nodeContext.node.id);

           		for each(var arrow1:Connector in prevNode.outArrows)
		           	for each(var arrow2:Connector in curNode.inArrows)
        	   			if(arrow1==arrow2)
           					Connector(arrow1).highlighted = true;

            	// fill variables
            	            	
				var subArr:Array = [];
				for (var obj:String in GraphContext(ContextManager.instance.templateStruct.contextStack[ContextManager.instance.templateStruct.contextStack.length-1]).context) {
					var value:Object = GraphContext(ContextManager.instance.templateStruct.contextStack[ContextManager.instance.templateStruct.contextStack.length-1]).context[obj];
					subArr.push( { 	Name: "$"+obj, 
									Value: value!=null ? value.toString() : 'null' } );						
				}					

				var arr:Array = [];
				for (obj in ContextManager.instance.templateStruct.context) {
					if(!(ContextManager.instance.templateStruct.context[obj] is TemplateStruct))
						arr.push( { Name:"$"+obj, Value:ContextManager.instance.templateStruct.context[obj] } );						
				}			
				arr.push( { Name:"this", Value: GraphContext(ContextManager.instance.templateStruct.contextStack[ContextManager.instance.templateStruct.contextStack.length-1]).curGraph.name, children:subArr } );
				
				pnl_variables.grid.dataProvider = new HierarchicalData(arr);
				pnl_variables.grid.invalidateList();

				// fill output
				
				var str:String="";
				
				str = GraphContext(ContextManager.instance.templateStruct.contextStack[ContextManager.instance.templateStruct.contextStack.length-1]).buffer;
				pnl_output.text = str;
				pnl_output.textArea.validateNow();
				
				var myformat:TextFormat = new TextFormat();
				myformat.color = 0x000000;
				
				if(str.length>0)
					pnl_output.textArea.field.setTextFormat(myformat, 0, str.length) 
					
				if(	nodeContext.node.parsedNode && 
					nodeContext.node.parsedNode.hasOwnProperty('string') && nodeContext.node.parsedNode.string &&
					nodeContext.node.parsedNode.print)
				{
					myformat.color = 0xFF0000;
				
					pnl_output.textArea.field.setTextFormat(myformat,
						str.length - nodeContext.node.parsedNode.string.toString().length-1,
						str.length);
				}
					
				// fill node values
				
				if(!pnl_node_value.array) {
					pnl_node_value.array = [];
				}					
				
				var nodeCategory:String = nodeContext.node.category;
				var nodeSubCategory:String = "";
				str = "";
				switch(nodeCategory)
				{
					case NodeCategory.NORMAL:
					case NodeCategory.SUBGRAPH:
						str = nodeContext.node.parsedNode.string;
						break;
					case NodeCategory.COMMAND:
						switch(nodeContext.node.parsedNode.type)
						{
							case CodeParser.CT_OPERATION:
								nodeSubCategory = "Operation ";
								str = nodeContext.node.text;
								break;
							case CodeParser.CT_TEST:
								nodeSubCategory = "Test ";
								str = nodeContext.node.text + 
									" => " + nodeContext.node.parsedNode.string;
								break;
							case CodeParser.CT_FUNCTION:
								nodeSubCategory = "Function ";
								str = nodeContext.node.parsedNode.func +
									" => " + nodeContext.node.parsedNode.string;
								break;
						}
						break;
				}
				
				pnl_node_value.array.push( { label:
					StringUtil.substitute("State ({0}{1}): {2}", 
						nodeSubCategory,
						nodeCategory,
						str), data: nodeContext.node } );
						
				pnl_node_value.list.invalidateList();
				pnl_node_value.list.selectedIndex = pnl_node_value.array.length-1;
				pnl_node_value.list.callLater(pnl_node_value.list.scrollToIndex, [pnl_node_value.array.length]);
				
            	} catch (e:*) {}
            }
            
            public function switchDebug(enable:Boolean=true):void
            {
            	fileMenuData..menuitem.(hasOwnProperty('@id') && @id == "resume")[0].@enabled = enable?"true":"false";
				fileMenuData..menuitem.(hasOwnProperty('@id') && @id == "step_into")[0].@enabled = enable?"true":"false";
				fileMenuData..menuitem.(hasOwnProperty('@id') && @id == "step_over")[0].@enabled = enable?"true":"false";
				fileMenuData..menuitem.(hasOwnProperty('@id') && @id == "step_return")[0].@enabled = enable?"true":"false";
				fileMenuData..menuitem.(hasOwnProperty('@id') && @id == "break")[0].@enabled = enable?"true":"false";
				
				//if(!enable)
				{
					pnl_variables.grid.dataProvider = null;
					pnl_node_value.array = [];
					pnl_output.text = "";
            		
            		if(curDebugNode)
            		{
            			curDebugNode.filters = [];
            			
            			for each(var arrow:Connector in curDebugNode.inArrows)
            				Connector(arrow).highlighted = false;
            				     
            			curDebugNode = null;       		
            		}					
				}
            }
	
			//--------------------------------------------------------------------------
			//
			//  Event handlers
			//
			//--------------------------------------------------------------------------
		    private function templateSaveHandler(event:Event):void 
		    {
		    	var tpl:Template = event.target as Template;		    	
		    	tpl.removeEventListener(Event.COMPLETE, templateSaveHandler); 
		    	processSavedTpl();
		    } 
			    	            
            private function onCatDialogClose(event:CloseEvent):void
            {            	
            	if(event.detail == ModalDialog.OK)
            	{
            		if(event.target.txtCaption.text)
            			pnl_graphs.createCategoryTab(event.target.txtCaption.text);
            	}
            }
            
            private function onImportFromTplClose(event:Event):void
            {            	
            	if(event is CloseEvent && CloseEvent(event).detail == ModalDialog.OK)
            	{
            		var tree:Tree = event.target.tplTree;
            		var tpl:Template = event.target.template;
					var xmlListCol:XMLListCollection = new XMLListCollection();
            		
					ProgressManager.start(ProgressManager.WINDOW_MODE, false);
					
            		if(ContextManager.instance.templates.length==0)
    	        	{
	                	newTpl();
            		}
            		
					if(tpl && tpl.xmlStructure && tree.selectedItems.length>0)
					{
						for each(var node:Object in tree.selectedItems)	
						{
							if(node.@isBranch=='true')
							{
								var catList:XMLList = tpl.xmlStructure..graph.(@category==node.@label);
								
								for each(var xml:XML in catList)
									if(xmlListCol.source.(@category==xml.@category && @name==xml.@name).length()==0)
										xmlListCol.addItem(xml);
							}
							else
							{
								xml = null;
								var lst:XMLList = tpl.xmlStructure..graph.(@category==node.@category && @name==node.@label);
								if(lst.length()>0)
									xml = lst[0];
	
								if(xml && xmlListCol.source.(@category==xml.@category && @name==xml.@name).length()==0)
									xmlListCol.addItem(xml);
							}
							
						}
					}
					
					for each (var itm:XML in xmlListCol) 
					{
						var graph:GraphCanvas = new GraphCanvas();
						graph.fromXML(itm);
						
						var newGraph:GraphCanvas = graph.clone();
						newGraph.initial = false;
						newGraph.name = "Imported_" + graph.name;
						pnl_graphs.addGraph(newGraph);
					}    		
            	}
            	
            	ProgressManager.complete();
            }            

            private function onImportClose(event:CloseEvent):void
            {            	
           		if(event.detail == ModalDialog.OK) 
            	{
            		var graphs:Array = event.target.graphs;
            		
	        		closeTpl(false);
	        		
	                var template:Template = Import(event.target).template;

    				ContextManager.instance.templates.addItemAt(template, 0);
    					
					processNewTpl()

            		ProgressManager.start(ProgressManager.DIALOG_MODE, true);
            		
            		var i:int = 0;
            		if(graphs.length>0)
            		{
            			ProgressManager.step(i++, graphs.length);
            			 
	            		for each (var graph:GraphCanvas in graphs) {
	            			pnl_graphs.addGraph(graph);
						}
            		}
            		
	            	ProgressManager.complete();
            	}
            	
            }  
                        
           	private function generationComplete(event:Event):void
           	{
           		ProgressManager.complete();
           		
           		switchDebug(false);
           		
				if(ContextManager.instance.templateStruct.buffer)
				{            	
            		var file:File = ContextManager.instance.file;
           			var stream:FileStream = new FileStream();
            	
        			stream.open(file, FileMode.WRITE);
        			stream.writeUTFBytes(ContextManager.instance.templateStruct.buffer);
        			stream.close();
           			
           			Console.show(StringUtil.substitute("Data saved to {0}.\n{1}", ContextManager.instance.file.nativePath, 
           				ContextManager.instance.templateStruct.buffer), "Result");
    			}
    			
				ContextManager.instance.templateStruct.removeEventListener("generationComplete", generationComplete);					
				ContextManager.instance.templateStruct.removeEventListener("stepComplete", stepCompleteHandler);
				ContextManager.instance.templateStruct.removeEventListener("error", debugErrorHandler);
    			
    			ContextManager.instance.templateStruct = null;        							           		
           	}

           	private function debugErrorHandler(event:Event):void
           	{           		
           		var error:* = event.target.error;           		
           		
           		ProgressManager.complete();
           		
           		showDebugDetails();           		
           		SuperAlert.show(error.message, "Error!", 4, null, onErrAlertClose);
           	}
           	
           	private function onErrAlertClose(event:Event):void
           	{           		
           		switchDebug(false);

				ContextManager.instance.templateStruct.removeEventListener("generationComplete", generationComplete);					
				ContextManager.instance.templateStruct.removeEventListener("stepComplete", stepCompleteHandler);
				ContextManager.instance.templateStruct.removeEventListener("error", debugErrorHandler);
           		
    			ContextManager.instance.templateStruct = null;
           	}

		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%">
	
	<!--mx:MenuBar width="100%"
    	dataProvider="{fileMenuData}"
    	labelField="@label"
    	showRoot="false"
    	itemClick="menuHandler(event);">    	
    </mx:MenuBar-->
	
	<extended:Docker>

	<mx:VBox width="100%" height="100%" id="workStage" visible="false" includeInLayout="false">
    
		<mx:HDividedBox height="100%" width="100%">
				
			<panel:Graphs creationIndex="2"
				id="pnl_graphs"
				
				vsViewStack="{viewstack}"
				templateChanged="templateChanged();">
			</panel:Graphs>
			
			<mx:Panel creationIndex="1" width="100%" height="100%" layout="absolute" 
				title="{LanguageManager.sentences.graph_editor}" backgroundAlpha="0.5">
				
				<mx:VDividedBox height="100%" width="100%">
				
					<mx:HDividedBox height="100%" width="100%">
						
						<mx:ViewStack id="viewstack" width="100%" height="100%" borderStyle="solid"/>						
						
						<extended:SuperTabNavigator creationPolicy="all" height="100%" dragEnabled="true" dropEnabled="true" closePolicy="{SuperTab.CLOSE_NEVER}">
						
							<panel:Variables id="pnl_variables"  minWidth="150"/>
							
						</extended:SuperTabNavigator>
						
					</mx:HDividedBox>
					
					<mx:HDividedBox width="100%">
						
						<extended:SuperTabNavigator creationPolicy="all" width="100%" height="100%" dragEnabled="true" dropEnabled="true" closePolicy="{SuperTab.CLOSE_NEVER}">
							
							<panel:Problems id="pnl_problems"/>
							
							<!--panel:Properties id="pnl_properties"/-->
							
							<panel:Output id="pnl_output"/>
							
						</extended:SuperTabNavigator>

						<extended:SuperTabNavigator creationPolicy="all" width="100%" height="100%" dragEnabled="true" dropEnabled="true" closePolicy="{SuperTab.CLOSE_NEVER}">
							
							<panel:NodeValue id="pnl_node_value"/>
							
						</extended:SuperTabNavigator>
						
					</mx:HDividedBox>
					
				</mx:VDividedBox>
			</mx:Panel>
			
		</mx:HDividedBox>

	</mx:VBox>

	</extended:Docker>
	</mx:VBox>

</mx:WindowedApplication>
