<?xml version="1.0" encoding="utf-8"?>
<ModalDialog 
	xmlns="PowerPack.com.dialog.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:controls="ExtendedAPI.com.controls.*" 
	width="450" height="460"
	modal="true"
	title="{LanguageManager.sentences.lbl_import}" 
	xmlns:dialogClasses="PowerPack.com.dialog.dialogClasses.*"
	close="ConnectionManager.instance.window = null">
	
	<mx:Script>
		<![CDATA[
			import PowerPack.com.importation.ImportApp;
			import ExtendedAPI.com.utils.FileUtils;
			import generated.webservices.Get_all_typesResultEvent;
			import PowerPack.com.managers.ProgressManager;
			import PowerPack.com.managers.ConnectionManager;
			import generated.webservices.Export_applicationResultEvent;
			import vdom.connection.protect.MD5;
			import generated.webservices.List_applicationsResultEvent;
			import generated.webservices.Close_sessionResultEvent;
			import generated.webservices.Open_sessionResultEvent;
			import generated.webservices.Vdom;
			import vdom.connection.protect.Code;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;
			import mx.rpc.soap.WebService;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.soap.LoadEvent;
			import vdom.connection.soap.SoapEvent;
			import vdom.connection.soap.Soap;
			import mx.events.ItemClickEvent;
			import mx.utils.StringUtil;
			import PowerPack.com.managers.ContextManager;
			import PowerPack.com.managers.LanguageManager;
			
			private static var _dialog:Import;
			private var appsXML:XMLList;
			private var appXML:XML;
			public var graphs:Array = [];
			
			static public function show(closeHandler:Function = null):Import
			{
				if(!_dialog || _dialog.closed) 
				{
					_dialog = new Import();	
					_dialog.open();
					_dialog.show(CANCEL, closeHandler, null, CANCEL);		
					ConnectionManager.instance.window = _dialog;
												
					var defaultCaptions:Object = {
						lbl_import: "Import",
						import_template: "Import template"
					};
					
					LanguageManager.setSentences(defaultCaptions);
				}				
				else 
				{
					_dialog.activate();
				}	
				
				return _dialog;
			}
			
			private function nextHandler(event:Event):void
			{
				if(vsStep.numChildren-1>vsStep.selectedIndex)
				{
					switch(vsStep.selectedChild)
					{
						case step1:
							if(step1.radServer.selected)
							{
								ProgressManager.start(ProgressManager.WINDOW_MODE, false);
								ContextManager.instance.host = step1.txtHost.text;
								ContextManager.instance.port = step1.txtPort.text;
								ContextManager.instance.login = step1.txtLogin.text;
								ContextManager.instance.pass = step1.txtPass.text;
								ContextManager.instance.save_pass = step1.chkSavePass.selected;					
							
								ConnectionManager.endpointURI = step1.txtHost.text + ":" + 
									(step1.radDefPort.selected ? ContextManager.instance.default_port : step1.txtPort.text) + 
									"/SOAP"
											
								ConnectionManager.exec('list_applications', getAppListHandler); 								
							}
							else if(step1.radFile.selected && FileUtils.isValidPath(step1.fileBrowse.text))
							{
								var file:File = new File(step1.fileBrowse.text);
					            if(file && file.exists)
					            {
									var fileStream:FileStream = new FileStream();									

					            	ProgressManager.source = fileStream;
									ProgressManager.start();
					
									fileStream.addEventListener(Event.COMPLETE, onAppFileLoad);
									fileStream.openAsync(file, FileMode.READ);
					            }								
							}  
							break;
							
						case step2:
							if(step2.lstApps.selectedItem)
							{
								ProgressManager.start(ProgressManager.WINDOW_MODE, false);
								var appID:String = XML(step2.lstApps.selectedItem).@ID;				
								ConnectionManager.exec('export_application', importAppHandler, appID);
							}												
							break;
							
						case step3:
							//Import application
							graphs = [];
							ProgressManager.start(ProgressManager.WINDOW_MODE, false);
							var imprt:ImportApp = new ImportApp(appXML);
							
							graphs.push(imprt.parseIndex());
							
							var arr:Array = imprt.parseStructure();
							for each (var elm:Object in arr)
								graphs.push(elm);
							
							arr = imprt.parseObjects();
							for each (elm in arr)
								graphs.push(elm);
							
							arr = imprt.parseE2vdom();
							for each (elm in arr)
								graphs.push(elm);

							arr = imprt.parseResources();
							for each (elm in arr)
								graphs.push(elm);

							arr = imprt.parseDatabases();
							for each (elm in arr)
								graphs.push(elm);

							ProgressManager.complete();
							vsStep.selectedIndex++;
							break;						
					}				
				}					
			}
			
			private function backHandler(event:Event):void
			{
				if(vsStep.selectedIndex==2 && step1.radFile.selected)
					vsStep.selectedIndex-=2;
				else if(vsStep.selectedIndex>0)
					vsStep.selectedIndex--;
			}


			private  function getAllTypesHandler(event:Get_all_typesResultEvent):void
			{
				var resultXML:XML = new XML(<Result />);
				resultXML.appendChild(XMLList(event.result));	
				
				if(resultXML.Error.toString() == 'Error') {
					Alert.show(resultXML.Error);
				} 
				else {	
					ConnectionManager.logout();
					vsStep.selectedIndex = 2;
					ProgressManager.complete();	
				}
			}

	        private function onAppFileLoad(event:Event):void
	        {
        		var fileStream:FileStream = event.target as FileStream;
        		var xml:XML = XML(fileStream.readUTFBytes(fileStream.bytesAvailable));
				fileStream.close();
        		
				appXML = xml..Application[0];
				
				//trace(appXML);
				vsStep.selectedIndex = 2;
				ProgressManager.complete();	
	        }	
	        
			private  function getAppListHandler(event:List_applicationsResultEvent):void
			{
				var resultXML:XML = new XML(<Result />);
				resultXML.appendChild(XMLList(event.result));	
				
				if(resultXML.Error.toString() == 'Error') {
					Alert.show(resultXML.Error);
				} 
				else {	
					//trace(resultXML);
					appsXML = resultXML..Application;

					vsStep.selectedIndex++;
					ProgressManager.complete();				
				}
			}
			
			private function onStep2Show():void
			{
				step2.lstApps.dataProvider = appsXML;									
				step2.lstApps.labelFunction = labelFunction;
				step2.lstApps.iconFunction = iconFunction;
				
				function labelFunction(item:Object):String {
					var _item:XML = XML(item);
					var label:String = String(_item.Information.Name[0]);
					label = StringUtil.trim(label) ? label : LanguageManager.sentences['noname'];				
					
					return label + " (" + _item.@ID + ")";				
				}				
				
				function iconFunction(item:Object):Class {
					var _item:XML = XML(item);				
					return ContextManager.iconClass;				
				}				
			}
			
			private function onStep3Show():void
			{
				step3.txtName.text = appXML.Information.Name[0];				
			}	
					
			private function onStep4Show():void
			{
				btnBack.enabled = false;
				Button(ctrlBar.getChildByName("CANCEL")).label = LanguageManager.sentences["finish"];							
			}	
			
			private  function importAppHandler(event:Export_applicationResultEvent):void
			{
				var resultXML:XML = new XML(<Result />);
				resultXML.appendChild(XMLList(event.result));	
				
				if(resultXML.Error.toString() == 'Error') {
					Alert.show(resultXML.Error);
				} 
				else {
					appXML = resultXML.Application[0];
					
					//
					var file:File = File.documentsDirectory.resolvePath('application.xml');

					var stream:FileStream = new FileStream();					
					stream.open(file, FileMode.WRITE);
					stream.writeUTFBytes(appXML.toXMLString());
					stream.close();
					//
					
        			ConnectionManager.exec('get_all_types', getAllTypesHandler);
				}
			}
			
			private function onVSChange():void
			{
				btnBack.enabled = vsStep.selectedIndex==0 ? false : true;
				btnNext.enabled = vsStep.selectedIndex==vsStep.numChildren-1 ? false : true;
			}
					
		]]>
	</mx:Script>
	
	<mx:VBox styleName="dlgHeader" width="100%">
		<mx:Label text="{LanguageManager.sentences.import_template}" styleName="headerLabel"/>
	</mx:VBox>
	
	<mx:HRule width="100%"/>
	
	<mx:ViewStack width="100%" height="100%" selectedIndex="0" id="vsStep" change="onVSChange()">

		<dialogClasses:ImportStep1 styleName="dlgContent" width="100%" height="100%" id="step1"/>
		
		<dialogClasses:ImportStep2 styleName="dlgContent" width="100%" height="100%" id="step2" show="onStep2Show()"/>
		
		<dialogClasses:ImportStep3 styleName="dlgContent" width="100%" height="100%" id="step3" show="onStep3Show()"/>
		
		<dialogClasses:ImportStep4 styleName="dlgContent" width="100%" height="100%" id="step4" show="onStep4Show()"/>
		
	</mx:ViewStack>

	<mx:HRule width="100%"/>
	
	<mx:ControlBar width="100%" styleName="dlgFooter" id="ctrlBar">
		<mx:Button id="btnBack" label="&lt; {LanguageManager.sentences.back}" click="backHandler(event)" enabled="false"/>
		<mx:Button id="btnNext" label="{LanguageManager.sentences.next} &gt;" click="nextHandler(event)"/>
	</mx:ControlBar>
	
</ModalDialog>
