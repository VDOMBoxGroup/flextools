<?xml version="1.0" encoding="utf-8"?>
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%"
	initialize="init()">

	<mx:Script>
		<![CDATA[
			import PowerPack.com.gen.parse.CodeParser;
			import mx.core.UIComponent;
			import PowerPack.com.managers.LanguageManager;
			import mx.events.ListEventReason;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			
			[Bindable]
			public var graphs:ArrayCollection = new ArrayCollection();

			//--------------------------------------------------------------------------
			//
			//  Class methods
			//
			//--------------------------------------------------------------------------	
						
			private function init():void
			{				
				graphs.addEventListener(CollectionEvent.COLLECTION_CHANGE, onGraphsChange);	
			}

            private function BeginningEdit(event:ListEvent):void 
            {
            	//
            	
            	return;
            }
                        
            private function beginEdit(event:ListEvent):void 
            { 
            	event.preventDefault();
            	
            	var list:List = List(event.target);
            	
            	list.createItemEditor(event.columnIndex, event.rowIndex); 
            	list.editedItemRenderer.visible = false;
				
            	var editInst:GraphThumb = GraphThumb(list.itemEditorInstance);
            	
				editInst.editable = true;
				
				editInst.data = list.selectedItem;
				editInst.txtThumb.setFocus();
				editInst.txtThumb.setSelection(0, editInst.txtThumb.text.length);
           	}
            
            private function endEdit(event:ListEvent):void 
            {    
                event.preventDefault();	
                
            	var list:List = List(event.target);
            	var editInst:GraphThumb = GraphThumb(list.itemEditorInstance);                
				
				editInst.txtThumb.errorString = null;
                var newData:String = editInst.txtThumb.text;
                
                if (event.reason == ListEventReason.CANCELLED)
                {
                    // Do not update item.
	                // Close the cell editor.
	                list.editedItemRenderer.visible = true;
	                list.destroyItemEditor();
	                list.editable = false; 
                	return;
                }
            	
            	// Disable copying data back to the control.
                if(CodeParser.ParseSubgraphNode(newData).error)
                {	      
                	editInst.txtThumb.errorString = LanguageManager.sentences['msg_enter_valid_graph_name'];
                	editInst.txtThumb.setFocus();
                	event.stopImmediatePropagation();
            	}            	
            	else
				{				
	                // Get new label from editor.
	                list.editedItemRenderer.data.name =
						newData;

	            	list.editedItemRenderer.visible = true;

	                // Close the cell editor.
	                list.destroyItemEditor();

	                // Notify the list control to update its display.
	        		list.dataProvider.notifyItemUpdate(list.editedItemRenderer);
	        		
	        		var evnt:ListEvent = new ListEvent(
	        			"editingComplete",
	        			event.bubbles, 
	        			event.cancelable, 
	        			event.columnIndex,
	        			event.rowIndex, 
	        			null,
	        			event.itemRenderer);
	        		
		   			list.editable = false;
		   			
	        		list.dispatchEvent(evnt);
	   			}
            }

			//--------------------------------------------------------------------------
		    //
		    //  Event handlers
		    //
		    //--------------------------------------------------------------------------
			
			public function onGraphsChange(event:CollectionEvent):void	
			{
				if(!event || event.kind!=CollectionEventKind.REFRESH)
				{
					var sort:Sort = new Sort();
     				sort.fields = [new SortField('name', true)];
     			
     				graphs.sort = sort;
       				graphs.refresh();
    			}
			}            
		]]>
	</mx:Script>
			
	<mx:List id="lstGraphs"		
		width="100%" height="100%" 
		allowMultipleSelection="false" 
		textAlign="center" 
		borderStyle="none"
		dataProvider="{graphs}"
		labelField="name"
		dragEnabled="true"
		allowDragSelection="true"
		alternatingItemColors="[#FFFFFF, #f6f6f6]"
		doubleClickEnabled="true"
		itemRenderer="PowerPack.com.panel.graphsClasses.GraphThumb"
		itemEditor="PowerPack.com.panel.graphsClasses.GraphThumb"
		editorDataField="returnText"
		itemEditBeginning="BeginningEdit(event);"
		itemEditBegin="beginEdit(event);"
		itemEditEnd="endEdit(event);"></mx:List>

</mx:VBox>
