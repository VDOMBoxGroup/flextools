<?xml version="1.0" encoding="utf-8"?>
<CanvasButtonAccordionHeader
	xmlns="flexlib.containers.accordionClasses.*" 
	xmlns:flexlib="http://code.google.com/p/flexlib/" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off"
	doubleClickEnabled="true" 
	mouseChildren="true"
	dragEnter="dragEnterHandler(event);"
	dragDrop="dragDropHandler(event);"
	creationComplete="show();">
	
	<mx:Script>
		<![CDATA[
			import PowerPack.com.managers.LanguageManager;
			import PowerPack.com.panel.Graphs;
			import PowerPack.com.graph.GraphCanvas;
			import mx.controls.Alert;
			import mx.utils.ArrayUtil;
			import mx.containers.Accordion;
			import mx.core.IUIComponent;
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			
			[Bindable]
			private var _label:String;
			
			override public function set label(value:String):void 
			{
				super.label = "";
				
				_label = value;
			}
			
			private function show():void
			{
				lblCaption.percentWidth = 100;
			}
			
			private function doubleClickHandler(event:Event):void
			{
				beginEdit();
			}
			
			private function closeTabHandler(event:Event):void
			{
				var accordChild:AccordionChild = data as AccordionChild;
				
				if(accordChild.graphs && accordChild.graphs.length>0)
				{	
					Alert.show(LanguageManager.sentences['msg_cannot_remove_nonempty_cat']);					
					return;
				}
					
				event.stopPropagation();
				accordChild.parent.removeChild(accordChild);
			}
			
			public function beginEdit():void
			{
				lblCaption.visible = false;
				lblCaption.width = 0;
				
				txtCaption.visible = true;
				txtCaption.percentWidth = 100;
				
				txtCaption.setFocus();				
			}
			
			public function endEdit(event:Event):void
			{				
				var bCommit:Boolean = true;
				var bEndEdit:Boolean = true;
				
				if(event is KeyboardEvent)
				{
					// escape
				    if(KeyboardEvent(event).charCode == 27)
				    {
		    			bCommit = false;
						bEndEdit = true;
		    		}
		    		// enter
				    else if(KeyboardEvent(event).charCode == 13)
				    {
		    			bCommit = true;
						bEndEdit = true;
				    }
					else
						bEndEdit = false;
		  		}
				
				if(bEndEdit)
				{		    	
					if(bCommit)
						data.label = txtCaption.text;
					else
						txtCaption.text = _label;
						
					txtCaption.visible = false;
					txtCaption.width = 0;
				
					lblCaption.visible = true;
					lblCaption.percentWidth = 100;
					
					if(bCommit)
						EventDispatcher(data).dispatchEvent(new Event("captionChanged"));
				}
			}
			
		    private function dragEnterHandler(event:DragEvent):void
		    {
	            if (	event.dragSource.hasFormat("items") && 
			            event.dragSource.dataForFormat("items") &&
	            		(event.dragSource.dataForFormat("items") as Array).length>0)
	            {
	            	if(	(event.dragSource.dataForFormat("items") as Array)[0] is GraphCanvas &&
	            		event.target.data.lstGraphs != event.dragInitiator)
	            	{
	                	DragManager.acceptDragDrop(IUIComponent(event.target));
		                DragManager.showFeedback(DragManager.MOVE);
		            }
	            }	    	
		    }
		    
		    private function dragDropHandler(event:DragEvent):void
		    {
		    	var items:Array = 
	                    event.dragSource.dataForFormat("items") as Array;
		    	
		    	if(items[0] is GraphCanvas)
		    	{
		    		var graph:GraphCanvas = items[0] as GraphCanvas;
		    		var source:AccordionChild = AccordionChild(event.dragInitiator.parent);
		    		var destination:AccordionChild = AccordionChild(event.target.data);
					
					source.graphs.removeItemAt(source.graphs.getItemIndex(graph));
					graph.category = destination.label;					
					destination.graphs.addItem(graph);
					
					Graphs(destination.parent.parent.parent.parent).selectGraph(graph);
		    	}
		    }
	    			
		]]>
	</mx:Script>
	
	<mx:HBox id="boxHeader" width="100%" verticalAlign="middle" horizontalGap="0">

		<mx:Label id="lblCaption" text="{_label}" paddingLeft="5" 
			doubleClickEnabled="true" doubleClick="doubleClickHandler(event);"/>
		
		<mx:TextInput id="txtCaption" text="{_label}" width="0" visible="false"
			focusOut="endEdit(event);" enter="endEdit(event);" keyDown="endEdit(event);" focusIn="event.stopPropagation();"/>
		
		<mx:ControlBar id="cbarHeader" horizontalAlign="right" paddingTop="2" paddingBottom="2" paddingRight="2" paddingLeft="2">
		
			<flexlib:CanvasButton
				click="closeTabHandler(event);">
				<mx:Label text="x"/>
			</flexlib:CanvasButton>
		
		</mx:ControlBar>
		
	</mx:HBox>
		
</CanvasButtonAccordionHeader>
