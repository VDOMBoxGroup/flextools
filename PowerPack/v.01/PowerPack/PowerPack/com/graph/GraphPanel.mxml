<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		initialize="init();"
		height="100%">
	
	<mx:XML id="langXML"></mx:XML>
	<mx:XML id="templateXML"></mx:XML>
	
	<mx:Script>
		<![CDATA[
			import mx.managers.FocusManager;
			import mx.controls.List;
            import PowerPack.com.graph.GraphThumb;
			import mx.events.DropdownEvent;
            import mx.events.ListEvent;
			import mx.collections.ArrayCollection;
			import mx.containers.ViewStack;
			import mx.controls.ComboBox;
			import mx.binding.utils.*;
            import mx.utils.ObjectProxy;
            import PowerPack.com.graph.GraphAccordionHeader;
		    
		    //--------------------------------------------------------------------------
		    //
		    //  Variables and properties
		    //
		    //--------------------------------------------------------------------------			
			
			public var vsViewStack:ViewStack;	
			
			public var curAccordionChild:GraphAccordionChild;
			
			[Bindable]
			private var initGraphs:ArrayCollection = new ArrayCollection();	
			
			//--------------------------------------------------------------------------
			//
			//  Class methods
			//
			//--------------------------------------------------------------------------
					
			private function init():void
			{
				initGraphs.addItem(new ObjectProxy({	name: "none", 
														initial: false }));	
				
				// Binding to first initial combobox element label
				BindingUtils.bindSetter(
					function(xml:XML):void {
						if(xml && initGraphs)
							initGraphs[0].name = xml.none;
					}, this, "langXML");
				
				// We need to repopulate graphs if templateXML has been changed
				BindingUtils.bindSetter(populateGraphs, this, "templateXML");
				
				for each(var label:String in ["application", "container", "resources"])
				{
					var graphAccordionChild:GraphAccordionChild = new GraphAccordionChild();
					graphAccordionChild.label = label;
					graphsAccordion.addChild(graphAccordionChild);

					graphAccordionChild.lstGraphs.addEventListener(ListEvent.CHANGE, changeLstGraphsHandler);
					graphAccordionChild.lstGraphs.addEventListener("doubleClick", btnRenameClickHandler);
					graphAccordionChild.lstGraphs.addEventListener("completeEdit", completeEditLstGraphsHandler);					
				}
				
				btnNew.addEventListener(MouseEvent.CLICK, btnNewClickHandler);	
				btnRename.addEventListener(MouseEvent.CLICK, btnRenameClickHandler);	
				btnDelete.addEventListener(MouseEvent.CLICK, btnDeleteClickHandler);	
				btnHelp.addEventListener(MouseEvent.CLICK, btnHelpClickHandler);	
				
				cbInitGraph.addEventListener(DropdownEvent.CLOSE, cbInitGraphCloseHandler);	
			}
			
			/** 
			 *	Fill in viewstack, list and combobox with graphs
			 */	 
			public function populateGraphs(xml:XML):void
			{	
				if(!xml)
					return;

				clear();				
				
				for each (var graphXML:XML in templateXML.elements("graph"))
				{					
					var newGraph:GraphCanvas = new GraphCanvas();
					newGraph.langXML = langXML;
					BindingUtils.bindProperty(newGraph, "langXML", this, "langXML");				

					initGraphs.addItem(newGraph);
					vsViewStack.addChild(newGraph);

					newGraph.fromXML(graphXML.toXMLString());

					var graphAccordionChild:GraphAccordionChild = null;

					for(var i:int=0; i<graphsAccordion.numChildren; i++)
					{
						if(GraphAccordionChild(graphsAccordion.getChildAt(i)).label==newGraph.category)
						{
							graphAccordionChild = graphsAccordion.getChildAt(i) as GraphAccordionChild;
							break;
						}
					}
					
					if(!graphAccordionChild)
					{
						graphAccordionChild = new GraphAccordionChild();
						graphAccordionChild.label = newGraph.category;
						graphsAccordion.addChild(graphAccordionChild);

						graphAccordionChild.lstGraphs.addEventListener(ListEvent.CHANGE, changeLstGraphsHandler);
						graphAccordionChild.lstGraphs.addEventListener("doubleClick", btnRenameClickHandler);
						graphAccordionChild.lstGraphs.addEventListener("completeEdit", completeEditLstGraphsHandler);
					
					}

					graphAccordionChild.graphs.addItem(newGraph);
				}	
								
				graphsAccordion.selectedIndex = 0;
				curAccordionChild = GraphAccordionChild(graphsAccordion.getChildAt(0));
				curAccordionChild.lstGraphs.selectedIndex = 0;
				vsViewStack.selectedChild = GraphCanvas(curAccordionChild.lstGraphs.selectedItem);
				
				// set initial graph in combobox
				cbInitGraph.selectedIndex=0;
				for(i=0; i<initGraphs.length; i++)
				{
					if(initGraphs[i].initial)
					{
						cbInitGraph.selectedIndex=i;
						break;
					}
				}
			}
			
			public function changeLstGraphsHandler(event:Event):void
			{
				if(graphsAccordion.selectedChild != curAccordionChild)
				{
					curAccordionChild.lstGraphs.selectedIndex = -1;
					curAccordionChild = GraphAccordionChild(graphsAccordion.selectedChild);
				}
				
				vsViewStack.selectedChild = GraphCanvas(List(event.target).selectedItem);
			}
			
			public function completeEditLstGraphsHandler(event:ListEvent):void
			{        	
				vsViewStack.invalidateDisplayList();
				cbInitGraph.invalidateDisplayList();       						
			}
						
			/** 
			 *	Gen XML that represents template
			 */	
			public function toXML():XML
			{
				var tmplXML:XML = new XML(<template></template>);
				
				for each (var child:DisplayObject in vsViewStack.getChildren())
				{
					if(child is GraphCanvas)
					{
						var graphXML:XML = GraphCanvas(child).toXML();		
						tmplXML.appendChild(graphXML);
					}
				} 
				
				return tmplXML;
			}
			
			public function clear():void
			{
				// remove all except first 'none' position
				while(initGraphs.length>1)
					initGraphs.removeItemAt(1);				
				

				for each (var child:DisplayObject in graphsAccordion.getChildren())
				{
					GraphAccordionChild(child).graphs.removeAll();
				}

				//graphsAccordion.removeAllChildren();
				
				for each (child in vsViewStack.getChildren())
				{
					if(child is GraphCanvas)
						GraphCanvas(child).destroy();
				}
			}
		
			//--------------------------------------------------------------------------
		    //
		    //  Event handlers
		    //
		    //--------------------------------------------------------------------------		
	    			
	    	// Change initial graph
			private function cbInitGraphCloseHandler(event:DropdownEvent):void
			{
				for each (var child:DisplayObject in vsViewStack.getChildren())
				{
					if(child is GraphCanvas)
						GraphCanvas(child).initial = false;
				}
				
				if(ComboBox(event.target).selectedIndex > 0)
					GraphCanvas(ComboBox(event.target).selectedItem).initial = true;
			}
			
			public function btnNewClickHandler(event:MouseEvent):void
			{
				var child:GraphAccordionChild = GraphAccordionChild(graphsAccordion.selectedChild);

				var newGraph:GraphCanvas = new GraphCanvas();
				newGraph.langXML = langXML;
				BindingUtils.bindProperty(newGraph, "langXML", this, "langXML");
									
				newGraph.label = newGraph.name;
				newGraph.category = child.label;

				initGraphs.addItem(newGraph);
				child.graphs.addItem(newGraph);										
				vsViewStack.addChild(newGraph);

				curAccordionChild.lstGraphs.selectedIndex = -1;
				curAccordionChild = GraphAccordionChild(graphsAccordion.selectedChild);				
				
				child.lstGraphs.selectedItem = newGraph;	
				vsViewStack.selectedChild = newGraph;
				
				child.lstGraphs.validateNow();
				child.lstGraphs.verticalScrollPosition = child.lstGraphs.maxVerticalScrollPosition;
				
				child.lstGraphs.editable = true; 
				child.lstGraphs.editedItemPosition = {rowIndex: child.lstGraphs.selectedIndex, columnIndex: 0};				
			}
				
			public function btnRenameClickHandler(event:Object):void
			{
				graphsAccordion.selectedChild = curAccordionChild;
				
				if(!curAccordionChild.lstGraphs.selectedItem)
					return;
					
				curAccordionChild.lstGraphs.editable = true;
				curAccordionChild.lstGraphs.editedItemPosition = {rowIndex: curAccordionChild.lstGraphs.selectedIndex, columnIndex: 0};
			}	
					
			private function btnDeleteClickHandler(event:MouseEvent):void
			{
				var child:GraphAccordionChild = curAccordionChild;
				var selectedItem:Object = child.lstGraphs.selectedItem;

				graphsAccordion.selectedChild = curAccordionChild;

				if(!selectedItem)
					return;					
				
				if(cbInitGraph.selectedItem == selectedItem)
					cbInitGraph.selectedIndex = 0;
				
				for(var i:int=0; i<initGraphs.length; i++)
				{
					if(selectedItem == initGraphs.getItemAt(i))
					{
						initGraphs.removeItemAt(i);
						break;
					}
				}
				
				child.graphs.removeItemAt(child.lstGraphs.selectedIndex);
				GraphCanvas(vsViewStack.selectedChild).destroy();
				
				child.lstGraphs.validateNow();
				vsViewStack.validateNow();
				
				//if(child.graphs.length==0)
				{
					vsViewStack.selectedIndex = 0;
					
					for(i=0; i<graphsAccordion.numChildren; i++)
					{
						for(var j:int=0; j<GraphAccordionChild(graphsAccordion.getChildAt(i)).graphs.length; j++)
						{
							if(GraphAccordionChild(graphsAccordion.getChildAt(i)).graphs[j] == vsViewStack.getChildAt(0))
							{
								curAccordionChild = GraphAccordionChild(graphsAccordion.getChildAt(i));

								graphsAccordion.selectedIndex = i;
								curAccordionChild.lstGraphs.selectedIndex = j;
								break;
							}
						}
					}					
				}
				//else if(selectedIndex>=graphs.length)
				//{
					//lstGraphs.selectedIndex=graphs.length-1;
					//vsViewStack.selectedIndex=graphs.length-1;			
				//}
				//else
				//{
					//lstGraphs.selectedIndex=selectedIndex;
					//vsViewStack.selectedIndex=selectedIndex;
				//}
			}	
						    		
			private function btnHelpClickHandler(event:MouseEvent):void
			{
				// TODO
			}			
								
		]]>
	</mx:Script>
	
	<mx:Panel width="100%" height="100%" layout="absolute" title="{langXML.navigatorpanel.title}">
				
		<mx:VBox width="100%" height="100%" verticalGap="0">
		
			<mx:ControlBar paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" horizontalGap="0" width="100%" horizontalAlign="center" id="ctrlBar">
				<mx:Button label="{langXML.navigatorpanel.graphs.btnnew}" labelPlacement="bottom" fontFamily="Arial" textAlign="center" cornerRadius="0" alpha="0.5" id="btnNew" width="100%" paddingRight="0" paddingLeft="0" fontSize="9" icon="@Embed('../../../resources/Button.png')" paddingBottom="3" horizontalGap="0" verticalGap="0" paddingTop="0"/>
				<mx:Button label="{langXML.navigatorpanel.graphs.btnrename}" labelPlacement="bottom" fontFamily="Arial" cornerRadius="0" alpha="0.5" id="btnRename" width="100%" textAlign="center" paddingLeft="0" paddingRight="0" fontSize="9" icon="@Embed('../../../resources/Button.png')" paddingBottom="3" horizontalGap="0" verticalGap="0" paddingTop="0"/>
				<mx:Button label="{langXML.navigatorpanel.graphs.btndelete}" fontFamily="Arial" cornerRadius="0" labelPlacement="bottom" alpha="0.5" id="btnDelete" width="100%" paddingLeft="0" paddingRight="0" textAlign="center" fontSize="9" icon="@Embed('../../../resources/Button.png')" paddingBottom="3" horizontalGap="0" verticalGap="0" paddingTop="0"/>
				<mx:Button label="{langXML.navigatorpanel.graphs.btnhelp}" fontFamily="Arial" cornerRadius="0" labelPlacement="bottom" alpha="0.5" id="btnHelp" width="100%" paddingLeft="0" paddingRight="0" textAlign="center" fontSize="9" icon="@Embed('../../../resources/Button.png')" paddingBottom="3" horizontalGap="0" verticalGap="0" paddingTop="0"/>
			</mx:ControlBar>
			
			<mx:Accordion id="graphsAccordion" headerRenderer="PowerPack.com.graph.GraphAccordionHeader" fontFamily="Verdana" borderStyle="solid" height="100%" width="100%" >		
			</mx:Accordion>
			
		</mx:VBox>

	</mx:Panel>
	
	<mx:Panel width="100%" layout="absolute" title="{langXML.initialgraphpanel.title}">
		<mx:ComboBox width="100%" id="cbInitGraph" dataProvider="{initGraphs}" labelField="name"></mx:ComboBox>
	</mx:Panel>
	
</mx:VBox>