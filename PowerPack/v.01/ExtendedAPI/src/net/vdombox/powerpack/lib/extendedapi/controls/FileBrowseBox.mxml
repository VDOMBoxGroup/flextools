<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:events="flash.events.*"
	horizontalGap="4" 
	horizontalAlign="right" 
	disabledOverlayAlpha="0.0"
	preinitialize="onPreinitialize(event)"
	childAdd="onChildAdd(event)">

	<mx:String id="browseTitle">Select file...</mx:String>
	<mx:String id="browseLabel">Browse...</mx:String>
	<mx:String id="filterAll">All</mx:String>
	<mx:String id="mode">{MODE_OPEN}</mx:String>
	<mx:String id="text"></mx:String>
 	
 	<mx:Metadata>
        [Event(name="change", type="flash.events.Event")] 
        [Event(name="select", type="flash.events.Event")] 
        [Event(name="selectMultiple", type="flash.events.FileListEvent")] 
    </mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.FlexEvent;
			import mx.core.UIComponent;
			import src.net.vdombox.powerpack.lib.extendedapi.utils.FileUtils;
			import mx.utils.StringUtil;
			
			public static const MODE_OPEN:String = "open";
			public static const MODE_SAVE:String = "save";
			public static const MODE_DIR:String = "dir";
			public static const MODE_MULTI:String = "multi";
			
			public static var memPath:String = File.documentsDirectory.nativePath;

			public var files:Array = [];
			public var filterArray:Array = [];

		    //----------------------------------
		    //  enabled
		    //----------------------------------
		
		    /**
		     *  @private
		     */			
			override public function get enabled():Boolean
			{
				return super.enabled;
			}
			override public function set enabled(value:Boolean):void
			{
				super.enabled = value;
				
				for each (var child:UIComponent in getChildren())
					child.enabled = value;
			}	
			
		    //--------------------------------------------------------------------------
		    //
		    //  Event handlers
		    //
		    //--------------------------------------------------------------------------
			
			private function onPreinitialize(event:Event):void
			{
				text = memPath;
			}
			
			private function onChildAdd(event:ChildExistenceChangedEvent):void
			{
				UIComponent(event.relatedObject).enabled = enabled;
			}
			
			private function onInputTextChange(event:Event):void
			{
				text = txtInput.text; 
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			private function onBrowseClick(event:MouseEvent):void
			{			
            	var file:File;
            	
            	if(text)
            	{
            		try {
            			file = new File(text);
	    
	            		if(!file.exists)
    	        			file = null;
            		} catch(e:*) {
            			file = null;
            		}
            	}
            	
            	if(!file)
            		file = new File(File.documentsDirectory.nativePath);
            	
            	var filter:FileFilter = new FileFilter(
            		StringUtil.substitute("{0} ({1})", filterAll, "*.*"), 
            		"*.*");
            		
            	var filters:Array = filterArray.length>0 ? filterArray : [filter];
            		            	
				file.addEventListener(Event.SELECT, onSelect);
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, onMultiSelect);
				
				//	use try..catch block to prevent browse exception 
				//	(Only one file browsing session may be performed at a time.)				 
				try
				{
					switch(mode.toLowerCase())
					{
						case 'save':
							file.browseForSave(browseTitle);
							break;
							
						case 'dir':
							file.browseForDirectory(browseTitle);
							break;
							
						case 'multi':
							file.browseForOpenMultiple(browseTitle, filters);
							break;
													
						default:
							file.browseForOpen(browseTitle, filters);
					}
				} 
				catch(e:*){}
			}
				    
		    private function onSelect(event:Event):void
            {
            	var file:File = event.target as File;
           		
           		memPath = file.nativePath;
				txtInput.text = file.nativePath;
				
				files = [];
				files.push(file);
				
				txtInput.dispatchEvent(new Event(Event.CHANGE));
				dispatchEvent(new Event(Event.SELECT));
            }

		    private function onMultiSelect(event:FileListEvent):void
            {
            	files = event.files;
            	
            	if(files && files.length)
            	{
	           		memPath = File(files[0]).parent.nativePath;
					txtInput.text = memPath;
	
					txtInput.dispatchEvent(new Event(Event.CHANGE));
            	}
            	
            	dispatchEvent(new FileListEvent(FileListEvent.SELECT_MULTIPLE));
            }					
            
		]]>
	</mx:Script>
	
	<mx:TextInput id="txtInput"
		width="100%"   
		text="{text}" 
		change="onInputTextChange(event)"/>
		
	<mx:Button id="btnBrowse"
		label="{browseLabel}"		
		paddingLeft="2" paddingRight="2" paddingTop="0" paddingBottom="0" 
		click="onBrowseClick(event)"/>
		
</mx:HBox>
