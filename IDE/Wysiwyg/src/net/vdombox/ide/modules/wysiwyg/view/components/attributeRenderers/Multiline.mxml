<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  height="20"
		  width="100%"
		  horizontalAlign="right"
		  verticalAlign="middle">

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.ValidationResultEvent;
			
			import net.vdombox.ide.common.model._vo.AttributeVO;
			import net.vdombox.ide.modules.wysiwyg.events.AttributeEvent;
			import net.vdombox.ide.modules.wysiwyg.events.MultilineWindowEvent;
			import net.vdombox.ide.modules.wysiwyg.view.components.windows.MultilineWindow;
			import net.vdombox.utils.WindowManager;

			public var multilineWindow : MultilineWindow;

			private var _title : String = "Multiline Window";

			[Bindable]
			private var _toolTipValue : String;
			
			private var _attributeVO : AttributeVO;

			[Bindable]
			public function get attributeVO():AttributeVO
			{
				return _attributeVO;
			}

			public function set attributeVO(value:AttributeVO):void
			{
				_attributeVO = value;
			}
			
			public function get value() : String
			{
				return _attributeVO.value;
			}

			public function set title( attrValue : String ) : void
			{
				_title = attrValue;
			}

			override public function validationResultHandler( event : ValidationResultEvent ) : void
			{
				super.validationResultHandler( event );
				if ( event.type == "valid" )
					setStyle( "borderColor", "white" );
				else if ( event.type == "ivalid" )
					setStyle( "borderColor", "red" );
			}

			public function refresh() : void
			{
				if ( attributeVO.value.length > 50 )
					_toolTipValue = attributeVO.value.substr( 0, 50 );
				else
					_toolTipValue = attributeVO.value;
			}

			private function applyMultiLinaWindow( event : MultilineWindowEvent ) : void
			{
				var currentTarget : Object = event.currentTarget;

				if ( currentTarget is MultilineWindow )
				{
					if ( event.type == MultilineWindowEvent.APPLY )
					{
						if ( attributeVO.value != event.value )
						{
							attributeVO.value = event.value;
							dispatchEvent( new Event( Event.CHANGE ) );
						}
					}

					UIComponent( currentTarget ).removeEventListener( MultilineWindowEvent.APPLY, applyMultiLinaWindow, false );
				}
			}

			private function openWindow() : void
			{
				multilineWindow = new MultilineWindow();

				multilineWindow.attributeValue = attributeVO.value;
				multilineWindow.title = resourceManager.getString( 'Wysiwyg_General', 'multiline_window_title' );

				dispatchEvent( new AttributeEvent( AttributeEvent.CHOSE_RESOURCES_IN_MULTILINE ) ); // ?

				multilineWindow.addEventListener( MultilineWindowEvent.APPLY, applyMultiLinaWindow, false, 0, true );

				WindowManager.getInstance().addWindow( multilineWindow, UIComponent( UIComponent( parent ).parentApplication ), true );
			}

			protected function button1_keyDownHandler( event : KeyboardEvent ) : void
			{
				if ( event.keyCode == Keyboard.ENTER )
					openWindow();
			}
		]]>
	</fx:Script>
	<s:Group width="100%"
			 height="20">

		<s:Rect width="100%"
				height="100%">
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Rect>

		<s:TextInput id="lbl"
					 textAlign="left"
					 text="Multiline"
					 editable="false"
					 width="100%"
					 height="100%"
					 toolTip="{_toolTipValue}"/>

	</s:Group>


	<mx:Button height="19"
			   label="..."
			   width="22"
			   cornerRadius="0"
			   paddingLeft="2"
			   paddingRight="2"
			   click="openWindow()"
			   keyDown="button1_keyDownHandler(event)"/>
</s:HGroup>
