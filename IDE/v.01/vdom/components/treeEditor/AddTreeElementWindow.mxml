<?xml version="1.0" encoding="utf-8"?>
<!--
	Resource Browser component for VDOM Box IDE
	Developed by Vadim A. Usoltsev, Tomsk, Russia, 2008
-->
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" width="600" height="450"
	title="{resourceManager.getString('Tree','new_page')}"
	creationComplete="creationComplete()"
	showCloseButton="true"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" 
	xmlns:resourceBrowser="vdom.controls.resourceBrowser.*"
	borderAlpha="0.98" cornerRadius="1" 
	visible="true" shadowDirection="right"
	borderColor="#636363" titleStyleName="resourceBrowserTitle"
	borderThicknessLeft="1" borderThicknessRight="1"
>
	<mx:Style>
		.resourceBrowserTitle {
			color:#FFFFFF;
			fontWeight:bold;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			import mx.collections.ArrayCollection;
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			import mx.events.CloseEvent;
			
			import vdom.controls.externalEditorButton.SpinnerScreen;
			import vdom.events.AddTreeElementEvent;
			import vdom.managers.FileManager;
			import vdom.events.ResourceBrowserEvent;
			import vdom.controls.resourceBrowser.ResourceBrowser;
			import vdom.managers.DataManager;
			import vdom.events.DataManagerEvent;

			import flash.utils.ByteArray;
			
			
			
			   [Bindable]
   			public var selectedAppl:Object; 
   				[Bindable]
   			private var arrAppl: Array = new Array();
   		
   			[Embed(source='/assets/treeEditor/treeEditor.swf', symbol='cube')]
				[Bindable]
			private var cube:Class;
			
			    [Bindable]
            private var myDP:ArrayCollection = new ArrayCollection(
                ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P']);
    	
		
			
			private var dataManager:DataManager  = DataManager.getInstance();
			private var fileManager:FileManager = FileManager.getInstance();
			
			
			private var treeElementID:String;
			private var trElementType:String;
			private var resourceID:String = '';
			private var typeResourse:String = '';
			
			private function creationComplete():void 
			{
				addEventListener(CloseEvent.CLOSE, closeHandler); 
				PopUpManager.centerPopUp(this)
				setDisplayNames();
//				image.source = cube;
			}
		
		/****
		 * 
		 * 
		 *        comBox 
		 * 
		 * 
		 * */
		private function setDisplayNames():void
		{
			arrAppl = [];
			var types:XMLList = dataManager.getTopLevelTypes();
			for each(var lavel:XML in types )
			{																
					var strLabel:String = getLanguagePhrase(lavel.Information.Name, lavel.Information.DisplayName);
					var strDescription:String = getLanguagePhrase(lavel.Information.Name, lavel.Information.Description);
					var strID:String = lavel.Information.ID;
					var _strLabel:String = lavel.Information.Icon;
					var	iconResID:String = _strLabel.substr(5, 36);
					arrAppl.push({label:strLabel, typeID:strID, description:strDescription ,iconResID:iconResID, select:true});
			}
			
			function searchIndex():int
			{
				for(var i:String in arrAppl)
				{
					trace(arrAppl[i].typeID);
					if (arrAppl[i].typeID == '2330fe83-8cd6-4ed5-907d-11874e7ebcf4') 
						return Number(i);	
				}
				return 0;
			}
//			titleList.selectedIndex = searchIndex();
//			titleList.validateDisplayList();
		//	if(!comBoxAppl.selectedIndex) comBoxAppl.selectedIndex = 0;
//			selectedAppl = comBoxAppl.selectedItem;
		}
		
		public function getLanguagePhrase(name:String, phrase:String):String
		{
			var phraseRE:RegExp = /#Lang\((\w+)\)/;
			var phraseID:String = phrase.match(phraseRE)[1]; //001
			
			return resourceManager.getString(name, phraseID);
		}
		
		private function comBoxClose(evt:Object):void
		{
			selectedAppl = List(evt).selectedItem;
			OK.enabled = true;
//			OK.
//			selectedAppl.dispatchEvent(Event.ACTIVATE);
		}
		
		/****
		 * 
		 * 
		 *   creation tree Element
		 * 
		 * 
		 * */
		 
		private var spinner:SpinnerScreen;
		private function okPressed():void 
		{
			/* PopUp spinner while something doing... */
//			spinner = new SpinnerScreen();
//			PopUpManager.addPopUp(spinner, DisplayObject(Application.application), true);				 

			OK.enabled = false;
		
			dataManager.createObject(selectedAppl.typeID);
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
					
		}	
		
		
		
		
	//	resourse brouser
		private function getIcon(ID:String):String
		{
			var types:XMLList = dataManager.getTopLevelTypes();
			for each(var lavel:XML in types )
			{																//2330fe83-8cd6-4ed5-907d-11874e7ebcf4 /#Lang(001)
					if( lavel.Information.ID == ID) 
					{
						var strLabel:String = lavel.Information.Icon;
						return  strLabel.substr(5, 36);
					}
			}
			return  '';
		}
		
				
		/*
		private function updateAttributeCompleteHandler(dmEvt:DataManagerEvent):void
		{
			dataManager.removeEventListener(DataManagerEvent.UPDATE_ATTRIBUTES_COMPLETE, updateAttributeCompleteHandler);
			dispatchEvent(new AddTreeElementEvent(AddTreeElementEvent.TREE_ELEMENT_ADDED,treeElementID,resourceID,
																				txt.text, descript.text, selectedAppl.label, typeResourse));
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			
			/* Remove spinner in case that all is done 
			PopUpManager.removePopUp(spinner);
		}
		*/
		
		
		/****
		 * 
		 * 			resource Browser Launcher
		 * 
		 * 
		 * */
		private function resourceBrowserLauncher():void 
		{
			var rbWnd:ResourceBrowser = ResourceBrowser(PopUpManager.createPopUp(this, ResourceBrowser, true));
			rbWnd.selectedItemID = resourceID;
			rbWnd.addEventListener(ResourceBrowserEvent.RESOURCE_SELECTED, resourseSelectedHandler);
		}
		
		
		private function resourseSelectedHandler(rbEvt:ResourceBrowserEvent):void 
		{
				resourceID = rbEvt.resourceID;
				fileManager.loadResource(dataManager.currentApplicationId,  resourceID, this);
		}	
		
				
		private var loader:Loader = new Loader();
		public function set resource(data:Object):void
		{
			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadComplete);
			loader.loadBytes(data.data);
		}
		
		
		private function loadComplete(evt:Event):void 
		{
   			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);		
   		
//   			image.source = loader.content;
   		}
		
		/***
		 * 
		 * 
		 *    close
		 * 
		 * 
		 * */
		private function cancelPressed():void 
		{
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
		}
			
		
		private function closeHandler(cEvent:CloseEvent):void 
		{
			PopUpManager.removePopUp(this);
		}
		
		private function chHandl(evt:ListEvent):void
		{
//			MouseEvent.

		}

		
		
		]]>
		
	
		
	</mx:Script>
	
	
	<mx:VBox 	width="100%" height="373" verticalGap="20"
		paddingBottom="5"  paddingTop="10"  y="5">
    	<mx:Label text="{resourceManager.getString('Tree','palese_select') + ':'}" fontSize="16" fontWeight="bold" color="#AEAEAE"  width="584" textAlign="center"/>
    	<mx:List id="titleList"  width="100%" height="100%" borderColor="#FFFFFF"
    		 dataProvider="{arrAppl}" change="{comBoxClose(event.target)}" 
    		itemRenderer="vdom.components.treeEditor.TypeContainerRander"	
    		selectionColor="#dbdbdb"   rollOverColor="#E5E5E5" />
    	
	</mx:VBox>
	<mx:ControlBar horizontalAlign="right"
			height="35" paddingTop="2" paddingBottom="2" paddingLeft="10" paddingRight="10" color="#FFFFFF" >
    		<mx:Button id="OK" label="Ok" enabled="false"  click="okPressed()"/>
    		<mx:Button label="{resourceManager.getString('Tree','cancel')}" click="cancelPressed()"/>
	</mx:ControlBar>
</mx:TitleWindow>
