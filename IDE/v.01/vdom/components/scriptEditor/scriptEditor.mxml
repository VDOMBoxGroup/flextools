<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="vdom.components.scriptEditor.containers.*"
	xmlns:containers1="vdom.containers.*" xmlns:controls="vdom.controls.*" xmlns:eventEditor="vdom.components.eventEditor.*"
	xmlns:richTextToolBarClasses="vdom.controls.richTextToolBarClasses.*"
	
	backgroundColor="#3d3d3d"
	
	hide="hideHandler()" show="showHandler()">
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import mx.collections.ArrayCollection;
			import vdom.events.ScriptEditorEvent;
			import vdom.events.ServerScriptsEvent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import vdom.components.treeEditor.AddTreeElementWindow;
			import vdom.events.DataManagerEvent;
			import vdom.managers.DataManager;
			import vdom.events.EventEditorEvent;
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;

			[Bindable]
			private var dataManager : DataManager = DataManager.getInstance();

			[Bindable]
			private var arrAppl : ArrayCollection = new ArrayCollection();

			private var curContainerID : String;
			private var curContainerTypeID : String;

			private var changeWatcher : ChangeWatcher;

			private var libraries : XMLList;

			private var _changed : Boolean = false;

			private var currentEditing : String;
			
			private function addNewLibrary() : void
			{
				
			}
			
			private function deleteLibrary() : void
			{
				
			}
			
			private function showHandler() : void
			{
//	 			changeWatcher = BindingUtils.bindProperty(trContainer, 'dataProvider', dataManager, 'listPages')
//	 			trContainer.showHandler();
//	 			trContainer.addEventListener(EventEditorEvent.DATA_CHANGED, dataChangedListener);

				curContainerID = dataManager.currentPageId;
				if ( curContainerID )
				{
					curContainerTypeID = dataManager.getTypeByObjectId( curContainerID ).Information.ID.toString();
				}

				dataManager.addEventListener( DataManagerEvent.PAGE_CHANGED, pageChangeHandler );
				dataManager.addEventListener( DataManagerEvent.OBJECT_CHANGED, objectChangeHandler );
				dataManager.addEventListener( DataManagerEvent.GET_LIBRARIES_COMPLETE,
											  glch );

				dataManager.getLibraries();

				arrAppl.removeAll();
				arrAppl.addItem( { label : "Session Actions", ID : "session", iconResID : "", typeID : "" } );
				/*	for each(var lavel:XML in dataManager.listPages )
				   {
				   var ID:String = lavel.@ID;
				   var strLabel:String =  lavel.Attributes.Attribute.(@Name == "title");
				   var _strLabel:String = lavel.Information.Icon;
				   var	iconResID:String = _strLabel.substr(5, 36);

				   arrAppl.push({label:strLabel, ID:ID, iconResID:iconResID});
				   }

				   arrAppl = [];
				 */
				for each ( var lavel : XML in dataManager.listPages )
				{
					var ID : String = lavel.@ID;
					var strLabel : String = lavel.Attributes.Attribute.( @Name == "title" );

					var typeID : String = lavel.@Type.toString();
					var iconResID : String = getIcon( typeID );

					arrAppl.addItem( { label : strLabel, ID : ID, iconResID : iconResID, typeID : typeID } );
				}


				var sort : Sort = new Sort();
				sort.fields = [ new SortField( "typeID" ), new SortField( "label",
																		  true ) ];
				arrAppl.sort = sort;
				arrAppl.refresh();

				function searchIndex() : int
				{
					var curID : String = dataManager.currentPageId;
					for ( var i : String in arrAppl )
					{
//						trace(arrAppl[i].typeID);
						if ( arrAppl[ i ].ID == curID )
							return Number( i );
					}
					return 0;
				}

				changeContainer.selectedIndex = searchIndex();
				serverScripts.dataProvider = dataManager.currentPageId;
				containersBranch.currentPageID = dataManager.currentPageId;
			}

			private function glch( event : DataManagerEvent ) : void
			{
				libraries = event.result.*;
				librariesList.dataProvider = libraries;
			}

			private function hideHandler() : void
			{
//	 			changeWatcher.unwatch();
//	 			trContainer.hideHandler();
//	 			trContainer.removeEventListener(EventEditorEvent.DATA_CHANGED, dataChangedListener);

				dataManager.removeEventListener( DataManagerEvent.PAGE_CHANGED, pageChangeHandler );
				dataManager.removeEventListener( DataManagerEvent.OBJECT_CHANGED,
												 objectChangeHandler );
			}


			private var massIconResouceID : Array = new Array();

			private function getIcon( ID : String ) : String
			{
				if ( massIconResouceID[ ID ] )
					return massIconResouceID[ ID ];

				for each ( var lavel : XML in dataManager.getTopLevelTypes() )
				{ //2330fe83-8cd6-4ed5-907d-11874e7ebcf4 /#Lang(001)
					if ( lavel.Information.ID == ID )
					{
						var strLabel : String = lavel.Information.StructureIcon;
						return massIconResouceID[ ID ] = strLabel.substr( 5, 36 );
					}
				}
				return '';
			}

			private var getApplEventID : String;

			private function dataChangedListener( eeEvt : EventEditorEvent ) : void
			{
				serverScripts.dataProvider = eeEvt.objID;
			}

			private function treeContainerChangeHandler( evt : Event ) : void
			{

			}

			/*
			   private function getIcon(value:Object):Class
			   {
			   var xmlData:XML = XML(value);
			   var data:Object = {typeId:xmlData.@Type, resourceId:xmlData.@resourceID}

			   return IconUtil.getClass(trContainer, data, 16, 16);
			   }
			 */
			private function addNewScript() : void
			{
				var rbWnd : CreatingNewActionWindow = CreatingNewActionWindow( PopUpManager.createPopUp( this,
																										 CreatingNewActionWindow,
																										 true ) );
				rbWnd.addEventListener( ScriptEditorEvent.SET_NAME, creatingNewActionWindowtHandler );
				rbWnd.inputText.setFocus();

			}

			private function creatingNewActionWindowtHandler( ssEvt : ScriptEditorEvent ) : void
			{
				var dataXML : XML = new XML( '<Action/>' );
				var last7 : String = ssEvt.scriptName.slice( -7, ssEvt.scriptName.length );
				if ( last7 == "_python" )
				{
					dataXML.@Name = ssEvt.scriptName.substr( 0, ssEvt.scriptName.length - 7 );
					dataXML.@Language = "python";
				}
				else
				{
					dataXML.@Name = ssEvt.scriptName;
					dataXML.@label = ssEvt.scriptName;
					dataXML.@Language = "vscript";
				}

				dataXML.@Top = "5";
				dataXML.@Left = "5";
				dataXML.@State = "true";

				serverScripts.addScript = dataXML;

				save();
			}

			private function deleteScript() : void
			{
				serverScripts.deleteScript();
				save();
			}

			private function setScript() : void
			{
				btSave.setStyle( "color", "0x000000" );
				btSave.setStyle( "borderColor", "0xAAB3B3" );

				librariesList.selectedIndex = -1;

				if ( serverScripts.dataEnabled && serverScripts.script != 'null' )
				{
					textArea.enabled = true;
					textArea.text = serverScripts.script;
					currentEditing = "script";
				}
				else
				{
					textArea.enabled = false;
					currentEditing = "none";
				}
			}

			private function setLibrary( event : ListEvent ) : void
			{
				btSave.setStyle( "color", "0x000000" );
				btSave.setStyle( "borderColor", "0xAAB3B3" );

				if ( event.itemRenderer && event.itemRenderer.data )
				{
					var data : XML = event.itemRenderer.data as XML;
					textArea.enabled = true;
					textArea.text = data.toString();
					currentEditing = "library";
				}
				else
				{
					textArea.enabled = false;
					currentEditing = "none";
				}
			}

			private function save() : void
			{
				if ( !textArea.enabled )
					return;

				if ( currentEditing == "script" )
					serverScripts.script = textArea.text;
				else if ( currentEditing == "library" )
				{
					var data : XML = librariesList.selectedItem as XML;
					var name : String = data.@Name;
					dataManager.setLibrary( name, textArea.text );
				}

				btSave.setStyle( "color", "0x000000" );
				btSave.setStyle( "borderColor", "0xAAB3B3" );

				_changed = false;
			}

			private function revert() : void
			{
				btSave.setStyle( "color", "0x000000" );
				btSave.setStyle( "borderColor", "0xAAB3B3" );

				textArea.text = serverScripts.script;

				_changed = false;
			}

			private function textAreaDataChangeHandler( event : KeyboardEvent ) : void
			{
//				if( _changed )
//					return;

				btSave.setStyle( "color", "0xCC0000" );
				btSave.setStyle( "borderColor", "0xEE0000" );

				_changed = true;
			}

			private function pageChangeHandler( dmEvt : DataManagerEvent ) : void
			{
//				changeTree(dataManager.currentPageId);
				containersBranch.currentPageID = dataManager.currentPageId;
//				serverScripts.dataProvider = dataManager.currentPageId;
//				dataManager.getApplicationEvents();

			}

			private function objectChangeHandler( dmEvt : DataManagerEvent ) : void
			{
//				changeTree(dataManager.currentPageId);
//				containersBranch.currentPageID = dataManager.currentPageId;
				serverScripts.dataProvider = dataManager.currentObjectId;
//				dataManager.getApplicationEvents();

			}


			[Bindable]
			public var selectedAppl : Object;

			private function changeContainerHandler( obj : Object ) : void
			{
				selectedAppl = ComboBox( obj ).selectedItem;
//				changeTree(selectedAppl.ID);
				if ( selectedAppl.ID == "session" )
				{
					containersBranch.currentPageID = selectedAppl.ID;
					serverScripts.dataProvider = selectedAppl.ID;
				}
				else
					dataManager.changeCurrentPage( selectedAppl.ID );
			}
		]]>
	</mx:Script>
	<mx:HDividedBox 
		height="100%" width="100%">
		<mx:VBox 
			id="vBox"
			
			height="100%" width="100%"
			
			paddingLeft="10" paddingTop="10">
			<controls:TextEditor 
				id="textArea"
				
				height="100%" text="same Text of code" width="100%"
				keyDown="textAreaDataChangeHandler( event )"/>
			<mx:HBox 
				paddingBottom="5">
				<mx:Button 
					id="btSave"
					
					label="Save"
					
					click="{save()}"/>
				<mx:Button 
					label="Revert"
					
					click=" revert(); "/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox 
			height="{textArea.height + 25}" horizontalScrollPolicy="off" minWidth="250"
			verticalScrollPolicy="auto" width="250"
			
			paddingLeft="3" paddingRight="10" paddingTop="10" verticalGap="10">
			<mx:Panel 
				width="100%"
				
				color="#FFFFFF"
				title="PAGES">
				<mx:ComboBox 
					id="changeContainer"
					
					dataProvider="{arrAppl}" minWidth="200" width="100%"
					
					color="#000000"
					
					change="{changeContainerHandler(event.target)}"
					itemRenderer="vdom.components.eventEditor.PanelItemRender" rowCount="20"/>
			</mx:Panel>
			<containers:ContainersBranch 
				id="containersBranch"
				
				height="150" width="100%"
				
				paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"
				title="Containers"/>
			<containers:ServerScripts 
				id="serverScripts"
				
				width="100%"
				
				paddingBottom="0" paddingLeft="5" paddingRight="0" paddingTop="0"
				dataChanged="setScript()" title="serverScripts"/>
			<mx:HBox width="100%">
				<mx:Button 
					label="Add Script"
					
					click="addNewScript()"/>
				<mx:Button 
					label="Delete Script"
					
					click="deleteScript()"/>
			</mx:HBox>
			<containers1:ClosablePanel 
				width="100%" title="Libraries">
				<mx:List 
					id="librariesList"
					
					labelField="@Name" width="100%"
					
					change="setLibrary( event )"/>
			</containers1:ClosablePanel>
			<mx:HBox width="100%">
				<mx:Button 
					label="Add Library"
					
					click="addNewLibrary()"/>
				<mx:Button 
					label="Delete Library"
					
					click="deleteLibrary()"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HDividedBox>
</mx:Canvas>
