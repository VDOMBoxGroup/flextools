<?xml version="1.0" encoding="utf-8"?>
<mx:HTML 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	
	hide="hideHandler()" preinitialize="initalizeHandler()" show="showHandler()"
	complete="completeHandler()">
	<mx:Metadata> 
        [Event(name="save", type="vdom.events.EditAreaEvent")]  
    </mx:Metadata>
	<mx:Script>
		<![CDATA[
			import vdom.managers.LanguageManager;
			import vdom.events.EditAreaEvent;
			private const ID : String = "code_editor";
			private const BASE_URL : String = "app-storage:/libs/edit_area/";
			
//			private var editAreaLoader : *;
//			private var editAreas : *;
			
			private var languageManager : LanguageManager = LanguageManager.getInstance();
			
			private var _syntax : String = "vscript";
			
			private var _content : String;
			private var isEditorLoaded : Boolean = false;
			
			public function get syntax() : String
			{
				return _syntax;
			}
			
			public function set syntax( value : String ) : void
			{
				_syntax = value;
			}
			
			public function get content() : String
			{
				if ( editAreaLoader )
					return editAreaLoader.getValue( ID );
				else
					return null;
			}
			
			public function set content( value : String ) : void
			{
				_content = value;
				
				if( !isEditorLoaded )
					return;
				
				if ( editAreaLoader )
				{
					try
					{
						editAreaLoader.setValue( ID, value );
						var editArea : * = domWindow.window.frames[ "frame_" + ID ].editArea;
						var saveImg : * = domWindow.window.frames[ "frame_" + ID ].document.getElementById( "save" );
						editArea.switchClassSticky( saveImg, 'editAreaButtonDisabled', true );
//						
						editArea.previous = [];
						editArea.check_redo();
						editArea.next = [];
						editArea.check_undo( true );
					}
					catch( error : Error )
					{
						var d : * = "";
					}
				}
			}
			
			private function get editAreaLoader() : *
			{
				return domWindow.editAreaLoader;
			}
			
			/* private function load( ... arg ) : void
			{
//				isEditorLoaded = true;
				
//				editAreaLoader = domWindow.editAreaLoader;
				
				content = _content; // FIXME fix!
				
				if ( !editAreaLoader )
					return;
				
				editAreaLoader.init( {
					id: ID, 
					start_highlight: true, 
					font_family: "verdana, monospace", 
					toolbar: "save, |, search, go_to_line, |, undo, redo, |, select_font, |, change_smooth_selection, highlight, |, help", 
					allow_resize: "none", 
					allow_toggle: false, 
					language: "en", 
					save_callback: save_code,
					change_callback: change_code,
					syntax: "python"
				} );
			} */
			private function save_code( id : String, content : String ) : void
			{
				var editArea : * = domWindow.window.frames[ "frame_" + ID ].editArea;
				var saveImg : * = domWindow.window.frames[ "frame_" + ID ].document.getElementById( "save" );
				editArea.switchClassSticky( saveImg, 'editAreaButtonDisabled', true );
				var eae : EditAreaEvent = new EditAreaEvent( EditAreaEvent.SAVE );
				eae.content = content;
				dispatchEvent( eae );
			}
			
			private function test( ...arg ) : void
			{
				var d : * = "";
			}
			
			private function getTemplateString() : String
			{
				var template : String = "";

				try
				{
					var file : File = new File( BASE_URL + "template.html" );
					var fs : FileStream = new FileStream();
					fs.open( file, FileMode.READ );
					template = fs.readUTFBytes( fs.bytesAvailable );
				}
				catch ( error : Error )
				{
				}

				return template;
			}

			private function saveCompiledTemplate( path : String, content : String ) : Boolean
			{
				try
				{
					var file : File = new File( path );
					var fs : FileStream = new FileStream();
					fs.open( file, FileMode.WRITE );
					fs.writeUTFBytes( content );
				}
				catch ( error : Error )
				{
					return false;
				}
				return true;
			}

			private function initalizeHandler() : void
			{
				var file : File = new File( BASE_URL );

				//if ( !file.exists )
				//{
					var fileApp : File = new File( "app:/libs/edit_area" );
					if ( fileApp.exists )
					{
						fileApp.copyTo( file, true );
					}
				//}
			}
			
			private function completeHandler() : void
			{	
				if( location == "about:blank")
					return;
				
				domWindow.getTemplateString = getTemplateString;
				domWindow.saveCompiledTemplate = saveCompiledTemplate;
				domWindow.test = test;
				//domWindow.window.onload = load;
				
				isEditorLoaded = true;
				
				if ( !editAreaLoader )
					return;
				
				editAreaLoader.init( {
					id: ID, 
					start_highlight: true, 
					font_family: "verdana, monospace", 
					toolbar: "save, |, search, go_to_line, |, undo, redo, |, select_font, |, change_smooth_selection, highlight, |, help", 
					allow_resize: "none",
					allow_toggle: false, 
					language: languageManager.currentLocale,
					save_callback: save_code,
					syntax: _syntax
				} );
				
				if( _content )
					content = _content; // FIXME fix!
			}
			
		private function showHandler() : void
		{
			location= BASE_URL + "init.html";
		}
		
		private function hideHandler() : void
		{
			location= "about:blank";
			isEditorLoaded = false;
		}
		
		override protected function keyDownHandler( event : KeyboardEvent ) :void
		{
			super.keyDownHandler( event );
			if( isEditorLoaded && !event.ctrlKey && !event.shiftKey && !event.altKey && !event.commandKey && !event.controlKey )
			{
				var editArea : * = domWindow.window.frames[ "frame_" + ID ].editArea;
				var saveImg : * = domWindow.window.frames[ "frame_" + ID ].document.getElementById( "save" );
				editArea.switchClassSticky( saveImg, 'editAreaButtonNormal', true );
			}
		}
		]]>
	</mx:Script>
</mx:HTML>