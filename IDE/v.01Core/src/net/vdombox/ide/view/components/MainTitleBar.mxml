<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" doubleClickEnabled="true" height="50"
	creationComplete="creationCompleteHandler();">
	<mx:Metadata>
		[Event(name="logout", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.core.windowClasses.TitleBar;
			import mx.core.WindowedApplication;
			import mx.core.Application;
			import mx.core.IWindow;

			private function creationCompleteHandler() : void
			{
				addEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler );
				addEventListener( MouseEvent.DOUBLE_CLICK, doubleClickHandler );

				minimizeButton.setStyle( "skin", getStyle( "minimizeButton" ) );
				minimizeButton.focusEnabled = false;
				minimizeButton.enabled = window.minimizable;
				minimizeButton.addEventListener( MouseEvent.MOUSE_DOWN, button_mouseDownHandler );
				minimizeButton.addEventListener( MouseEvent.CLICK, minimizeButton_clickHandler );


				maximizeButton.setStyle( "skin", getStyle( "maximizeButton" ) );
				maximizeButton.focusEnabled = false;
				maximizeButton.enabled = window.maximizable;
				maximizeButton.addEventListener( MouseEvent.MOUSE_DOWN, button_mouseDownHandler );
				maximizeButton.addEventListener( MouseEvent.CLICK, maximizeButton_clickHandler );


				closeButton.setStyle( "skin", getStyle( "closeButton" ) );
				closeButton.focusEnabled = false;
				closeButton.addEventListener( MouseEvent.MOUSE_DOWN, button_mouseDownHandler );
				closeButton.addEventListener( MouseEvent.CLICK, closeButton_clickHandler );
			}

			private function get window() : IWindow
			{
				return IWindow( Application.application );
			}

			private static function isMac() : Boolean
			{
				return Capabilities.os.substring( 0, 3 ) == "Mac";
			}

			override protected function updateDisplayList( unscaledWidth : Number,
														   unscaledHeight : Number ) : void
			{
				super.updateDisplayList( unscaledWidth, unscaledHeight );
				
				if( window.nativeWindow.closed )
					return;
				
				if ( !isMac() )
				{

					if ( window.nativeWindow.displayState == NativeWindowDisplayState.MAXIMIZED )
					{

						if ( getStyle( "restoreButton" ) )
							maximizeButton.setStyle( "skin", getStyle( "restoreButton" ) );

					}
					else
						maximizeButton.setStyle( "skin", getStyle( "maximizeButton" ) );
				}
			}

			private function minimizeButton_clickHandler( event : Event ) : void
			{
				window.minimize();
			}

			private function maximizeButton_clickHandler( event : Event ) : void
			{
				if ( window.nativeWindow.displayState == NativeWindowDisplayState.MAXIMIZED )
					window.restore();

				else
				{
					window.maximize();
					// work around bug  Bug SDK-9547
					maximizeButton.dispatchEvent( new MouseEvent( MouseEvent.ROLL_OUT ) );
				}
			}

			private function closeButton_clickHandler( event : Event ) : void
			{
				window.close();
			}

			private function mouseDownHandler( event : MouseEvent ) : void
			{
				/* if( event.target == logoffButton )
					return; */
				window.nativeWindow.startMove();

				event.stopPropagation();
			}

			private function doubleClickHandler( event : MouseEvent ) : void
			{
				if ( isMac() )
					window.minimize();

				else
				{

					if ( window.nativeWindow.displayState == NativeWindowDisplayState.MAXIMIZED )

						window.restore();

					else
						window.maximize();

				}
			}

			private function button_mouseDownHandler( event : MouseEvent ) : void
			{

				event.stopPropagation();
			}

			private function logout() : void
			{
//				dataManager.close();
				dispatchEvent( new Event( "logout" ) );
			}
		]]>
	</mx:Script>
	<mx:Button 
		id="minimizeButton"
		height="13" width="13"
		right="41" top="5"/>
	<mx:Button 
		id="maximizeButton"
		height="13" width="13"
		right="23" top="5"/>
	<mx:Button 
		id="closeButton"
		height="13" width="13"
		right="5" top="5"/>
	<mx:Button height="16" width="24" y="1"
		cornerRadius="0" fillAlphas="[1.0, 1.0]" fillColors="[#FF0000, #FF0000]"
		right="69"
		visible="false"/>
	<mx:Label y="5" text="Vdom IDE User: " horizontalCenter="0" color="#969696" fontWeight="bold" fontSize="14"/>
	<!--<mx:LinkButton id="logoffButton" label="{ resourceManager.getString( 'Application','logout' ) }"
		color="#FFFFFF" fontWeight="bold" right="10" rollOverColor="#333333" selectionColor="#333333"
		textRollOverColor="#FFFFFF" textSelectedColor="#FFFFFF" top="24"
		click="logout();"/>-->
</mx:Canvas>
