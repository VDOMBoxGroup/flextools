<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="true"
				minHeight="22"
				width="100%"
				doubleClickEnabled="true"
				doubleClick="itemrenderer1_doubleClickHandler(event)"
				keyDown="itemrenderer1_keyDownHandler(event)">

	<fx:Script>
		<![CDATA[
			import net.vdombox.ide.common.events.PopUpWindowEvent;
			import net.vdombox.ide.common.model._vo.ServerActionVO;
			import net.vdombox.ide.common.view.components.VDOMImage;
			import net.vdombox.ide.common.view.components.button.AlertButton;
			import net.vdombox.ide.common.view.components.windows.Alert;
			import net.vdombox.ide.common.view.components.windows.NameObjectWindow;
			import net.vdombox.ide.modules.scripts.events.ListItemRendererEvent;
			import net.vdombox.utils.WindowManager;

			private var renameItem : ContextMenuItem;

			private var deleteItem : ContextMenuItem

			override public function set data( value : Object ) : void
			{
				super.data = value;

				if ( !contextMenu )
					contextMenu = new ContextMenu();

//				contextMenu.removeAllItems();

				if ( value && value is ServerActionVO )
				{
					if ( value.script == "" )
						itemName.setStyle( "color", 0x00FF00 );
					else
						itemName.setStyle( "color", 0xFFFFFF );

					renameItem = new ContextMenuItem( "Rename" );
					renameItem.addEventListener( Event.SELECT, renameContextMenuHandler, false, 0, true );
//					contextMenu.addItem( renameItem );
				}

				deleteItem = new ContextMenuItem( "Delete" );
				deleteItem.addEventListener( Event.SELECT, deleteContextMenuHandler, false, 0, true );
//				contextMenu.addItem( deleteItem );
			}

			private function renameContextMenuHandler( event : Event ) : void
			{
				var renameWindow : NameObjectWindow = new NameObjectWindow( data.name, resourceManager.getString( "Scripts_General", "create_action_window_action_title" ) );
				renameWindow.addEventListener( PopUpWindowEvent.APPLY, applyHandler );
				renameWindow.addEventListener( PopUpWindowEvent.CANCEL, cancelHandler );

				WindowManager.getInstance().addWindow( renameWindow, this, true );

				function applyHandler( event : PopUpWindowEvent ) : void
				{
					WindowManager.getInstance().removeWindow( renameWindow );
					var renameEvent : ListItemRendererEvent = new ListItemRendererEvent( ListItemRendererEvent.NAME_CHANGE );

					renameEvent.object = event.name;
					dispatchEvent( renameEvent );
				}

				function cancelHandler( event : PopUpWindowEvent ) : void
				{
					WindowManager.getInstance().removeWindow( renameWindow );
				}
			}

			private function deleteContextMenuHandler( event : Event ) : void
			{
				Alert.setPatametrs( "Delete", "Cancel", VDOMImage.Delete );

				Alert.Show( resourceManager.getString( 'Scripts_General', 'delete_server_action' ), resourceManager.getString( 'Scripts_General', 'delete_Renderer' ), AlertButton.OK_No, parentApplication, closeHandler );

				function closeHandler( event : PopUpWindowEvent ) : void
				{
					if ( event.detail == Alert.YES )
						dispatchEvent( new ListItemRendererEvent( ListItemRendererEvent.DELETE_PRESS ) );
				}
			}

			protected function itemrenderer1_doubleClickHandler( event : MouseEvent ) : void
			{
				// TODO Auto-generated method stub
				dispatchEvent( new ListItemRendererEvent( ListItemRendererEvent.ITEM_CHENGED ) );
			}

			override public function set selected( value : Boolean ) : void
			{
				super.selected = value;

				currentState = value ? "selected" : "normal"
			}

			protected function itemrenderer1_keyDownHandler( event : KeyboardEvent ) : void
			{
				if ( event.keyCode == Keyboard.DELETE )
					dispatchEvent( new ListItemRendererEvent( ListItemRendererEvent.DELETE_PRESS ) );
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>

	<s:Rect width="100%"
			height="100%">
		<s:fill>
			<s:SolidColor color.normal="#3A3A3A"
						  color.selected="#0000FF"/>
		</s:fill>
	</s:Rect>

	<s:Label id="itemName"
			 text="{data.name}"
			 color="#FFFFFF"
			 height="100%"
			 verticalAlign="middle"
			 paddingLeft="10"/>

	<s:Line top="0"
			left="0"
			width="100%">
		<s:stroke>
			<s:SolidColorStroke color="#FFFFFF"
								alpha="0.5"
								weight="1"/>
		</s:stroke>
	</s:Line>

	<s:Line bottom="0"
			left="0"
			width="100%">
		<s:stroke>
			<s:SolidColorStroke color="#000000"
								alpha="0.5"
								weight="1"/>
		</s:stroke>
	</s:Line>

</s:ItemRenderer>
