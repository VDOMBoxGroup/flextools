<?xml version="1.0" encoding="utf-8"?>
<ClosablePanel	
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="vdom.containers.*"
	
	creationComplete="creationCompleteHendler();"

xmlns:containers="vdom.components.edit.containers.*" >

<mx:Metadata>
		[Event(name="change", type="mx.events.ListEvent")]
</mx:Metadata>

<mx:Script>
	<![CDATA[
		import mx.collections.XMLListCollection;
		import mx.validators.ValidationResult;
		import mx.messaging.AbstractConsumer;
		import vdom.utils.IconUtil;
		import vdom.managers.DataManager;
		import mx.events.ListEvent;
		import mx.controls.listClasses.ListBase;
		import vdom.managers.FileManager;
		import mx.controls.Image;
		import mx.messaging.management.Attribute;
		import mx.events.FlexEvent;
		import mx.controls.Tree;
		import mx.core.Application;
			
		    
  		
		
		[Bindable]
		private var publicData:Object;
		private var dataManager:DataManager;
		private var xmlTreeData:XMLListCollection;
		[Bindable]
		private var topLevelObjectId:Object;
		private var arrPicture:Array = new Array();
		private var topLevelTypes:XMLList;
		
		public var selectedItem:XMLList;
		
		private function getIcon(value:Object):Class {
			
			var xmlData:XML = XML(value);
			var data:Object = {typeId:xmlData.@Type, resourceId:xmlData.@resourceID}
		 	
	 		return IconUtil.getClass(tree, data, 16, 16);
		}
		
		private function creationCompleteHendler():void
		{
//			trace('creationCompleteHendler');
			dataManager = DataManager.getInstance();
				tree.showRoot = true; 
				
				tree.labelField = "@label";
				tree.addEventListener(FlexEvent.UPDATE_COMPLETE, treeUpdateComletLister);
				tree.addEventListener(Event.CHANGE, treeChangeLister);
				tree.iconFunction = getIcon;
		}
		
		public function set dataProvider(xmlData:XMLList):void {

//trace('dataProvider');
			if(xmlData) 
			{
				// создаем обьекты верхнего уровня
				 xmlTreeData = new XMLListCollection;
				for each(var xmlLabel:XML in xmlData)
				{
					if (xmlLabel.name() == 'Parent') continue;
					
					var xmlList:XMLList = new XMLList('<Object/>');
					xmlList.@label = xmlLabel.@Name;
					xmlList.@showInList = 'true';
					xmlList.@ID = xmlLabel.@ID;
					xmlList.@Type = xmlLabel.@Type;
					
					 xmlList.@resourceID = getSourceID(xmlLabel.@Type); 
					
					xmlList.appendChild(findOjects(xmlLabel.Objects));
					
					xmlTreeData.addItem(xmlList);
				} 
				
				tree.dataProvider = xmlTreeData;
				tree.validateNow();
				
//				trace(dataManager.currentObjectId +' : '+dataManager.currentPageId)
				if(dataManager.currentObjectId != dataManager.currentPageId)
				{
					var currentElement:XML = xmlTreeData.source..Object.(@ID == dataManager.currentObjectId)[0];
					openTree(currentElement);
				
					tree.selectedItem = currentElement;
//					trace('obj: \n'+currentElement.toXMLString());
				
				}else
				{
					var item:XML = xmlTreeData.source.(@ID == dataManager.currentPageId)[0];
					tree.expandItem(item, true);
					tree.selectedItem = item;
//					trace('page: \n'+item.toXMLString());
				}	
				
				var index:int =  tree.getItemIndex(tree.selectedItem);
				tree.scrollToIndex(index);
					
				
			} else
			{
				tree.dataProvider = null;
			}
			
		
		}
		
		private var masResourceID:Array = new Array();
		private function getSourceID(ID:String):String
		{
//			trace('getSourceID');
			if (masResourceID[ID]) 
				return masResourceID[ID];
				
			var xml:XML = dataManager.getTypeByTypeId(ID);
			var str:String = xml.Information.StructureIcon;
			
			masResourceID[ID] = str.substr(5, 36);
			
			return masResourceID[ID];
		}
	
		private function treeUpdateComletLister(evt:Event):void
		{	
//			trace('treeUpdateComletLister');
			if(!xmlTreeData)
				return;
				
			//select current Object;
			if(topLevelObjectId) 
				tree.selectedItem = xmlTreeData.source.*.(@ID == dataManager.currentObjectId)[0];
				//select current Page;
			if(!tree.selectedItem )
			{
				tree.selectedItem = xmlTreeData.source.(@ID == dataManager.currentPageId)[0];
				tree.expandItem(tree.selectedItem, true);
			}
		}
		
		private function treeChangeLister(evt:Event):void
		{
//			trace('treeChangeLister');
			  var selectedNode:XML = Tree(evt.target).selectedItem as XML;
			  if(!selectedNode)
			  	return;
              var ID:String = selectedNode.@ID;

              if(xmlTreeData.source.(@ID == ID).toXMLString() != "" )
          		   	dataManager.changeCurrentPage(selectedNode.@ID);
              	else
              		dataManager.changeCurrentObject(ID);
		}

	
		private function findOjects(xmlIn:XMLList):XMLList
		{
//			trace('findOjects');
			var xmllReturn:XMLList  = new XMLList();
			for each(var xmlLabel:XML in xmlIn.children())
			{
				var xmlTemp:XML = new XML('<Object/>');
					xmlTemp.@label 	= xmlLabel.@Name;
					xmlTemp.@ID 	= xmlLabel.@ID;
					xmlTemp.@Type 	= xmlLabel.@Type;
					xmlTemp.@resourceID = getSourceID(xmlLabel.@Type); 
					
				// проверяем есть ли еще обьекты в нутри
				var numObjects:int = xmlLabel.Objects.*.length(); 
				if(numObjects > 0)	xmlTemp.appendChild(findOjects(xmlLabel.Objects));
				
				xmllReturn += xmlTemp;
			}
			return xmllReturn;
		}
		
		public function set currentObject(xml:XML):void
		{
//			trace('currentObject');
			if(!xml) 
				return;
			
			
			var currentElement:XML = xmlTreeData.source..Object.(@ID == xml.@ID)[0];
			if(!currentElement)
				currentElement = xmlTreeData.source.(@ID == dataManager.currentPageId)[0];
			
//			if(!currentElement)
//				return;
//			
			openTree(currentElement);
			
			tree.selectedItem = currentElement;
			
			var index:int =  tree.getItemIndex(tree.selectedItem);
//			tree.selectedIndex = index;
//			tree.rowCount;
			tree.scrollToIndex(index);
			
		}
		
		private function openTree(item:Object):void
		{
//			trace('openTree');
			var parentItem:Object = XML(item).parent();
			if (parentItem)
			{
				 openTree(parentItem);
				tree.expandItem(parentItem, true, false);
				tree.validateNow();
			}
		}
	]]>
</mx:Script>
	<containers:OTree id="tree"  width="100%"/>
	
</ClosablePanel>
