<?xml version="1.0" encoding="utf-8"?>
<ClosablePanel	
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="vdom.containers.*"
	
	creationComplete="creationCompleteHendler();"
	
	width="100%"
>

<mx:Metadata>
		[Event(name="change", type="mx.events.ListEvent")]
</mx:Metadata>

<mx:Script>
	<![CDATA[
		import vdom.utils.IconUtil;
		import vdom.managers.DataManager;
		import mx.events.ListEvent;
		import mx.controls.listClasses.ListBase;
		import vdom.managers.FileManager;
		import mx.controls.Image;
		import mx.messaging.management.Attribute;
		import mx.collections.XMLListCollection;
		import mx.events.FlexEvent;
		import mx.controls.Tree;
		import mx.core.Application;
			
		[Embed(source="/assets/objectsPanel/HAccordion.png")]
        public var accordion_icon:Class; 

        [Embed(source="/assets/objectsPanel/DragScrollingCanvas.png")]
        public var drag_icon:Class;
    
  		
		
		[Bindable]
		private var publicData:Object;
		private var dataManager:DataManager;
		private var tree:Tree = new Tree();
		private var xmlTreeData:XML;
		[Bindable]
		private var topLevelObjectId:Object;
		private var arrPicture:Array = new Array();
		private var topLevelTypes:XMLList;
		
		public var selectedItem:XMLList;
		
		private function getIcon(value:Object):Class {
			
			var xmlData:XML = XML(value);
			var data:Object = {typeId:xmlData.@Type, resourceId:xmlData.@resourceID}
		 	
	 		return IconUtil.getClass(tree, data, 16, 16);
		}
		
		private function creationCompleteHendler():void
		{
			 
			dataManager = DataManager.getInstance();
			    tree.percentHeight = 100;//width = 200;
			    tree.percentWidth = 100;
				tree.showRoot = false; 
				
				tree.labelField = "@label";
				tree.addEventListener(FlexEvent.UPDATE_COMPLETE, treeUpdateComletLister);
				tree.addEventListener(Event.CHANGE, treeChangeLister);
				tree.iconFunction = getIcon;
			    
			    addChild(tree);
			    
			    
		}
		
		public function set dataProvider(xmlData:XMLList):void {

			if(xmlData) 
			{
				// создаем обьекты верхнего уровня
				 xmlTreeData = <root/>;
				for each(var xmlLabel:XML in xmlData)
				{
					if (xmlLabel.name() == 'Parent') continue;
					
					var xmlList:XMLList = new XMLList('<Object/>');
					xmlList.@label = xmlLabel.@Name;
					xmlList.@showInList = 'true';
					xmlList.@ID = xmlLabel.@ID;
					xmlList.@Type = xmlLabel.@Type;
					
					/// завести массивчик ID-шников.
					
					 xmlList.@resourceID = getSourceID(xmlLabel.@Type); 
					xmlList.@icon	= 'accordion_icon';
					
					xmlList.appendChild(findOjects(xmlLabel.Objects));
				//	trace(xmlLabel.Objects)
					
					xmlTreeData.appendChild(xmlList);
			} 
				tree.dataProvider = xmlTreeData;
			//getIcons();
			}
		}
		
		private var masResourceID:Array = new Array();
		private function getSourceID(ID:String):String
		{
			if (masResourceID[ID]) 
				return masResourceID[ID];
				
			var xml:XML = dataManager.getTypeByTypeId(ID);
			var str:String = xml.Information.StructureIcon;
			
			masResourceID[ID] = str.substr(5, 36);
			
			return masResourceID[ID];
		}
	
		private function treeUpdateComletLister(evt:Event):void
		{	
				topLevelObjectId = dataManager.currentPageId //publicData.topLevelObjectId;
				if(topLevelObjectId && xmlTreeData) 
					tree.selectedItem = xmlTreeData.Object.(@ID == topLevelObjectId)[0];
		}
		
		private function treeChangeLister(evt:Event):void
		{
			  var selectedNode:XML = Tree(evt.target).selectedItem as XML;
              var ID:String = selectedNode.@ID;
            //  trace('selected: ' + ID);
              if(xmlTreeData.Object.(@ID == ID).toXMLString() != "" )
              {
          		   	dataManager.changeCurrentPage(selectedNode.@ID);
              } else
              {
              		dataManager.changeCurrentObject(ID);
              }
              
		}

	//	public var  change:String = Event.CHANGE; 
	
		private function findOjects(xmlIn:XMLList):XMLList
		{
			var xmllReturn:XMLList  = new XMLList();
			for each(var xmlLabel:XML in xmlIn.children())
			{
				var xmlTemp:XML = new XML('<Object/>');
					xmlTemp.@label 	= xmlLabel.@Name;
					xmlTemp.@ID 	= xmlLabel.@ID;
					xmlTemp.@Type 	= xmlLabel.@Type;
					xmlTemp.@resourceID = getSourceID(xmlLabel.@Type); 
					
					xmlTemp.@icon	= 'drag_icon';
				// проверяем есть ли еще обьекты в нутри
				var numObjects:int = xmlLabel.Objects.*.length(); 
				if(numObjects > 0)	xmlTemp.appendChild(findOjects(xmlLabel.Objects));
				
				xmllReturn += xmlTemp;
			}
			return xmllReturn;
		}
		
		/* private function getIcons ():void
		{
			trace('run function getIcon');	
		} */
		
		/* public function set resource (object:Object):void
		{
		//	trace('run function set Resource: ' + object.resourceID);	
			arrPicture[object.resourceID] = object.data;
		} */
		
		public function set currentObject(xml:XML):void
		{
			if(!xml) return;
			
			var ID:String = xml.@ID;
			//trace('currentObject: \n'+xmlTreeData..*.Object.(@ID == ID)[0]);
			tree.selectedItem = xmlTreeData..*.Object.(@ID == ID)[0];
		}
		
		
	]]>
</mx:Script>
	
</ClosablePanel>
