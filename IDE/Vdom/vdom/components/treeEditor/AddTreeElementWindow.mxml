<?xml version="1.0" encoding="utf-8"?>
<!--
	Resource Browser component for VDOM Box IDE
	Developed by Vadim A. Usoltsev, Tomsk, Russia, 2008
-->
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" width="500" height="350"
	title="Resource Manager"
	creationComplete="creationComplete()"
	showCloseButton="true"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" 
	xmlns:resourceBrowser="vdom.controls.resourceBrowser.*"
>
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import vdom.controls.externalEditorButton.SpinnerScreen;
			import vdom.events.AddTreeElementEvent;
			import vdom.managers.FileManager;
			import vdom.events.ResourceBrowserEvent;
			import vdom.controls.resourceBrowser.ResourceBrowser;
			import vdom.managers.DataManager;
			import vdom.events.DataManagerEvent;
			import mx.managers.PopUpManager;
			import mx.events.CloseEvent;
			import flash.utils.ByteArray;
			
			
			
			   [Bindable]
   			public var selectedAppl:Object; 
   				[Bindable]
   			private var arrAppl: Array = new Array();
   		
   			[Embed(source='/assets/treeEditor/treeEditor.swf', symbol='cube')]
				[Bindable]
			private var cube:Class;
		
			
			private var dataManager:DataManager  = DataManager.getInstance();
			private var fileManager:FileManager = FileManager.getInstance();
			
			
			private var treeElementID:String;
			private var trElementType:String;
			private var resourceID:String = '';
			private var typeResourse:String = '';
			
			private function creationComplete():void 
			{
				addEventListener(CloseEvent.CLOSE, closeHandler); 
				PopUpManager.centerPopUp(this)
				setDisplayNames();
				image.source = cube;
			}
		
		/****
		 * 
		 * 
		 *        comBox 
		 * 
		 * 
		 * */
		private function setDisplayNames():void
		{
			arrAppl = [];
			var types:XMLList = dataManager.getTopLevelTypes();
			for each(var lavel:XML in types )
			{																
					var strLabel:String = getLanguagePhrase(lavel.Information.Name, lavel.Information.DisplayName);
					var strID:String = lavel.Information.ID;
					arrAppl.push({label:strLabel, data:strID});
			}
			comBoxAppl.selectedIndex = 0;
			selectedAppl = comBoxAppl.selectedItem;
		}
		
		public function getLanguagePhrase(name:String, phrase:String):String
		{
			var phraseRE:RegExp = /#Lang\((\w+)\)/;
			var phraseID:String = phrase.match(phraseRE)[1]; //001
			
			return resourceManager.getString(name, phraseID);
		}
		
		private function comBoxClose(evt:Object):void
		{
			selectedAppl = ComboBox(evt).selectedItem;
		}
		
		/****
		 * 
		 * 
		 *   creation tree Element
		 * 
		 * 
		 * */
		 
		private var spinner:SpinnerScreen;
		private function okPressed():void 
		{
			/* PopUp spinner while something doing... */
			spinner = new SpinnerScreen();
			PopUpManager.addPopUp(spinner, DisplayObject(Application.application), true);				 

			OK.enabled = false;
			dataManager.addEventListener(DataManagerEvent.OBJECTS_CREATED, createObjectHandler);
			dataManager.createObject(selectedAppl.data);		
		}	
		
		
		private var obID:String;
		private function  createObjectHandler(dmEvt:DataManagerEvent):void
		{
			dataManager.removeEventListener(DataManagerEvent.OBJECTS_CREATED, createObjectHandler);
			var xmlObj:XML = new XML(dmEvt.result);
				obID = xmlObj.Object.@ID;
			var typeID:String = xmlObj.Object.@Type.toXMLString();
			
			treeElementID = obID;
			typeResourse = getIcon(typeID);
			dataManager.addEventListener('currentPageChanged', changePagesHandler);
			dataManager.changeCurrentPage(obID);
		}
	
		private function changePagesHandler(dmEvt:DataManagerEvent):void
		{
			dataManager.removeEventListener('currentPageChanged', changePagesHandler);
			
			dataManager.addEventListener("currentObjectChanged", changeObjectHandler);
			
			dataManager.changeCurrentObject(obID);
		}
		
	//	resourse brouser
		private function getIcon(ID:String):String
		{
			var types:XMLList = dataManager.getTopLevelTypes();
			for each(var lavel:XML in types )
			{																//2330fe83-8cd6-4ed5-907d-11874e7ebcf4 /#Lang(001)
					if( lavel.Information.ID == ID) 
					{
						var strLabel:String = lavel.Information.Icon;
						return  strLabel.substr(5, 36);
					}
			}
			return  '';
		}
		
		private function changeObjectHandler(dmEvt:Event):void
		{
			dataManager.removeEventListener("currentObjectChanged", changeObjectHandler)
			//dataManager.removeEventListener(DataManagerEvent.CURRENT_PAGE_CHANGED, changeAttributesHandler);
			
			if(!dataManager.currentObject)
			{
				PopUpManager.removePopUp(spinner);
				return;
			}

			dataManager.addEventListener(DataManagerEvent.UPDATE_ATTRIBUTES_COMPLETE, updateAttributeCompleteHandler);
		
			var str:String = 
			 	'<Attributes>' + 
			 		' <Attribute Name="description">' + descript.text+'</Attribute>'+
			 		' <Attribute Name="title">' + txt.text + '</Attribute>' + 
			 	' </Attributes>';
			var xml:XML = XML(str)	
				dataManager.currentObject.Attributes = xml;
			
			dataManager.updateAttributes();
		}
		
		
		private function updateAttributeCompleteHandler(dmEvt:DataManagerEvent):void
		{
			dataManager.removeEventListener(DataManagerEvent.UPDATE_ATTRIBUTES_COMPLETE, updateAttributeCompleteHandler);
			dispatchEvent(new AddTreeElementEvent(AddTreeElementEvent.TREE_ELEMENT_ADDED,treeElementID,resourceID,
																				txt.text, descript.text, selectedAppl.label, typeResourse));
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			
			/* Remove spinner in case that all is done */
			PopUpManager.removePopUp(spinner);
		}
		
		
		
		/****
		 * 
		 * 			resource Browser Launcher
		 * 
		 * 
		 * */
		private function resourceBrowserLauncher():void 
		{
			var rbWnd:ResourceBrowser = ResourceBrowser(PopUpManager.createPopUp(this, ResourceBrowser, true));
			rbWnd.selectedItemID = resourceID;
			rbWnd.addEventListener(ResourceBrowserEvent.RESOURCE_SELECTED, resourseSelectedHandler);
		}
		
		
		private function resourseSelectedHandler(rbEvt:ResourceBrowserEvent):void 
		{
				resourceID = rbEvt.resourceID;
				fileManager.loadResource(dataManager.currentApplicationId,  resourceID, this);
		}	
		
				
		private var loader:Loader = new Loader();
		public function set resource(data:Object):void
		{
			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadComplete);
			loader.loadBytes(data.data);
		}
		
		
		private function loadComplete(evt:Event):void 
		{
   			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);		
   		
   			image.source = loader.content;
   		}
		
		/***
		 * 
		 * 
		 *    close
		 * 
		 * 
		 * */
		private function cancelPressed():void 
		{
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
		}
			
		
		private function closeHandler(cEvent:CloseEvent):void 
		{
			PopUpManager.removePopUp(this);
		}


		
		
		]]>
		
	
		
	</mx:Script>
	
	
	<mx:Canvas 	width="100%" height="100%"
		paddingLeft="5" paddingBottom="5" paddingRight="5" paddingTop="5">
    	
    	<mx:ComboBox id="comBoxAppl"     dataProvider="{arrAppl}" 
    	  	     close="comBoxClose(event.target)"   x="255" y="204" width="167"/>
    	<mx:Image id="image" x="20" y="15" width="207" height="246"/>
    	<mx:Button x="20" y="275" label="Select image" click="resourceBrowserLauncher()"/>
    	
    	<mx:Label x="250" y="15" text="Title:" width="75" height="19"/>
    	<mx:Label x="254" y="67" text="Description:"/>
    	<mx:Label x="254" y="186" text="Tipe:" width="80"/>
    	
    	<mx:TextInput id="txt" x="254" y="31" width="201" text="name"/>
    	<mx:TextArea id="descript" x="254" y="86" height="88" width="201" text="description"/>
    	<mx:HBox y="278" width="100%" horizontalAlign="right" right="20">
    		<mx:Button id="OK" label="Ok"    click="okPressed()"/>
    		<mx:Button label="Cancel" click="cancelPressed()"/>
    	</mx:HBox>
	</mx:Canvas>
</mx:TitleWindow>
