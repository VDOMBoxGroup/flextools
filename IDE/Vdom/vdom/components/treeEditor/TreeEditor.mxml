<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundColor="#ffffff" creationComplete="creationCompleteHandler()" hide="hideHendler()" 
			show="showHnadler()" label="add Element" xmlns:ns1="vdom.components.treeEditor.colormenu.*" xmlns:colorMenu02="vdom.components.treeEditor.colorMenu02.*" xmlns:treeEditor="vdom.components.treeEditor.*">
	

<mx:Canvas id="main" width="100%" height="100%">
	
	
	

<mx:Script>
	<![CDATA[
		import vdom.events.TreeEditorEvent;
		import vdom.events.DataManagerEvent;
		import vdom.events.AddTreeElementEvent;
		import mx.managers.PopUpManager;
		import mx.controls.Alert;
		import vdom.managers.FileManager;
		import vdom.managers.DataManager;
		import mx.events.CloseEvent;
		
		include "TreeEditorScript.as";
		
		
 	private var massTreeElements:Array = new Array();
	private var massLines:Array = new Array();
	private var curTree:Object = new Object();
	private var canLine:Canvas = new Canvas();
	private var pnFrom:Point = new Point();
	private var blDrawLine:Boolean = false;
	private var vctTest:Vector2 = new Vector2();
	private var curLine:Object = new Object();
	private var dataManager:DataManager  = DataManager.getInstance();
	private var xmlApplicationStructure:XML;
	private var btLine:DeleteLineButton = new DeleteLineButton();

/******* 
 * 			to Do
 * 	
 * 		* добавлять новый елемент в самый низ 
 * 		* у трее елемента сменить по умолчанию картинку
 * 		* у трии елемента картинка в соответстви с его типом.
 * 		??? массив элементов строить из другого места(массив "сортируемегого дерева" строить так же)
 * 		* делетеБТ должен исчезать когда нажимается другой елемент
 * 		* при создании нового елемента блокировать кнопку "ок"
 * 		* выделить новосозданный елемент
 * 		
 * */
	
	private var fileManager:FileManager = FileManager.getInstance();
	
	private function creationCompleteHandler():void
	{
		 fileManager = FileManager.getInstance();
	}
	
	private function showHnadler():void
	{
		if(!main) 
			main = new Canvas();
	/*
		if(!btLine)
			btLine = new DeleteLineButton();
		*/
		addTreeEditorListeners();
			
		dataManager.getApplicationStructure();
		
	//	setDisplayNames();
	}
	
	private function hideHendler():void
	{
		saveToServer();
		removeAllLines();
		removeMassTreeElements();
		removeTreeEditorListeners();
		if(curTree)
			dataManager.changeCurrentPage(curTree.ID);
	//	btLine.visible = false;
		if (main.contains(btLine))
			main.removeChild(btLine);
	}
	
	
	
	private function  getApplicationStructure(dtManEvt:DataManagerEvent):void
	{
		dataManager.removeEventListener(DataManagerEvent.STRUCTURE_LOADED, getApplicationStructure);
		
		xmlApplicationStructure = dtManEvt.result;
		createTreeArr(xmlApplicationStructure);
		drawLines(xmlApplicationStructure);
//			trace("xmlApplicationStructure: \n" + xmlApplicationStructure);
		if (needCreatTree == true)
			adjustmentTree(xmlApplicationStructure);
		
		curTree = massTreeElements[dataManager.currentPageId];
		
		if(curTree != null)
			curTree.current = true;
	}
	
	private function startReDrawLineHandler(trEvt:TreeEditorEvent):void
	{
		// object to Top
		main.removeChild(massTreeElements[trEvt.ID]);
		main.addChild(massTreeElements[trEvt.ID]);
		
		main.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
	}
	
	private function stopReDrawLineHandler(trEvt:TreeEditorEvent):void
	{
		main.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
		treeElementMousUpHandler();
		// saveToServer();
	}
	
	
	private function hideTreeElement(trEvt:Object):void
	{
		massTreeElements[curTree.ID].resize = true;
	}
	

	private function lineClikHandler(msEvt:MouseEvent):void
	{
		removeLine();
	}
		
	
	private function markLines(muEvt:MouseEvent):void
	{
		curLine.mark = false;
		curLine = muEvt.currentTarget;
		curLine.mark = true;
		btLine.x = main.horizontalScrollPosition + mouseX - btLine.width / 2;
		btLine.y = main.verticalScrollPosition + mouseY  - btLine.height - 2;
		btLine.visible = true;
		
		if (!main.contains(btLine))
		{
			//	trace(main.contains(btLine))
			main.addChild(btLine);
			
		}
		muEvt.stopImmediatePropagation();
	}
	
	private function treeElementLinesReDrawHandler(trEvt:TreeEditorEvent):void
	{
		if(trEvt.currentTarget.ID != null)
			redrawLines(trEvt.currentTarget.ID); 
		
		
	}
	
	/** 
	*
	*		Кликнули по обьекту, 
	*		- выделяем его
	*		- если надо проводим к нему линию связи с 
	*		с от другого обьекта
	*/
	
	private function mouseDownHandler(evt:MouseEvent):void
	{
			pnFrom.x = evt.currentTarget.x;
			pnFrom.y =evt.currentTarget.y;
		
		// проводим линию
		if(blDrawLine)
			drawLine(evt.currentTarget);		

		if (curTree != null)
			curTree.current = false;	
		
		evt.currentTarget.current = true;
		curTree = evt.currentTarget;
		//dataManager.changeCurrentPage( curTree.ID);
	}
	
	
	
	private function mouseMoveHandler(msEvt:MouseEvent):void
	{
		redrawLines(curTree.ID);
	}
	/**
	*
	*		удаляем обьект и все его связи
	*
	*/
	private function deleteTreeElement(trEvt:TreeEditorEvent):void
	{
		curTree.current = false;
		curTree = massTreeElements[trEvt.ID];
		curTree.current = true;
		Alert.show("Do you want to delete Element?", "Delete Element", 3, this, alertClickDeleteTreeElement);
	}
	 
            // Event handler function for displaying the selected Alert button.
    private function alertClickDeleteTreeElement(event:CloseEvent):void 
    {
        if (event.detail==Alert.YES)
        {
        	dataManager.addEventListener(DataManagerEvent.OBJECT_DELETED, deleteObjectHandler)
           	dataManager.deleteObject(curTree.ID)
           	
        }
    }
    
    private function deleteObjectHandler(dmEvt:DataManagerEvent):void
    {
    	dataManager.removeEventListener(DataManagerEvent.OBJECT_DELETED, deleteObjectHandler)
    	deleteObject(curTree.ID);
           	
       	var ID:String = '';
		for (var nam:String in massTreeElements)
		{
			if(ID == '')
			{
				curTree = massTreeElements[nam];
				curTree.current = true;
				return;
			}  
		}
    }
	
	/**
	*
	*		запускаем прорисовку линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function startDrawLine(trEvt:TreeEditorEvent):void
	{
		vctTest = new Vector2();
		main.addChild(vctTest);//--для рисования связывающей линии
		addEventListener(MouseEvent.MOUSE_MOVE, drLine);
		
		blDrawLine = true; //говорим что рисуем линию
		addEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		drLine(new MouseEvent(MouseEvent.MOUSE_OVER));
		vctTest.graphics.clear();
	}
	
	/**
	* ресурсы
	*		перестаем рисовать линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function stopDrawLine(msEvt:MouseEvent):void
	{
		removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
		removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		
		vctTest.clear();
		main.removeChild(vctTest); ///-------------***********
		blDrawLine = false;  //говорим что НЕ рисуем линию
	}
	
	/**
	*
	*		рисуем линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function drLine (mEvt:MouseEvent):void
	{
		var pnTo:Object = calculatePointTo(mouseX + main.horizontalScrollPosition, mouseY + main.verticalScrollPosition , curTree);
	//	var obj:Object = new Object(); 
		
		vctTest.graphics.clear();
		vctTest.createVector(curTree, pnTo, colmen2.selectedItem.data);	
	}
	
		
		
	private function dataManagerListenner(dmnEvt:DataManagerEvent):void
	{
		dataManager.removeEventListener(DataManagerEvent.STRUCTURE_SAVED, dataManagerListenner)
	}
	
	
	
	private function hideLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
				massLines[level][frsTrElem][sknTrElem].visible = false;
	}
	
	private function showLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
				massLines[level][frsTrElem][sknTrElem].visible = true;
	}

	private function mouseClickHandler(msEvt:MouseEvent):void
	{
		for (var ID:String in massTreeElements)
				if(massTreeElements[ID].select) 
					massTreeElements[ID].unSelect();

		if (main.contains(btLine))
			main.removeChild(btLine);
	
	}
	
	private var treeElement:TreeElement = new TreeElement();
	private function addTreeElementLauncher():void 
	{
			//	PopUpManager.createPopUp(super, AddTreeElementWindow, true);
				var rbWnd:AddTreeElementWindow = AddTreeElementWindow(PopUpManager.createPopUp(this, AddTreeElementWindow, true));
			//rbWnd.treeElement = treeElement;
			rbWnd.addEventListener(AddTreeElementEvent.TREE_ELEMENT_ADDED, addTreeElementHandler);
	}

	private function addTreeElementHandler(adTrEvt:AddTreeElementEvent):void 
	{
		//rbWnd.removeEventListener(AddTreeElementEvent.TREE_ELEMENT_ADDED, addTreeElementHandler);
		
		var ID:String = adTrEvt.treeElementID
		var trEl:TreeElement = new TreeElement();
		
		trEl.ID =  ID;
		trEl.name =  adTrEvt.title;
		trEl.type =  adTrEvt.trElementType;
		trEl.resourceID  =  adTrEvt.resourceID;
		trEl.description =  adTrEvt.description;
		trEl.typeID = adTrEvt.typeResourse;
		
		var maxY:Number = 0;
		for (var tID:String in massTreeElements)
				if(massTreeElements[tID].y > maxY) 
					maxY = massTreeElements[tID].y;
		trEl.y = maxY + 100;
		//trEl.height
		
		massTreeElements[ID] = addEventListenerToTreeElement(trEl);
		main.addChild(massTreeElements[ID]);
		fileManager.loadResource(dataManager.currentApplicationId,  trEl.resourceID, massTreeElements[ID]);
		
		//select new object
		if(curTree != null)
			curTree.current = false;
		curTree = massTreeElements[ID];
		if(curTree != null)
			curTree.current = true;
		
		
	}
	
	private function autoSpacing():void
	{
		adjustmentTree(xmlApplicationStructure);
		removeAllLines();
		removeMassTreeElements();
		
		createTreeArr(xmlApplicationStructure);
		drawLines(xmlApplicationStructure);
		
		curTree = massTreeElements[dataManager.currentPageId];
		if(curTree != null)
			curTree.current = true;
		
		//showHnadler();
		
	}
	]]>
</mx:Script>

</mx:Canvas>

<mx:VBox   height="100%" >
	<colorMenu02:ColorMenu2 id="colmen2" x="50"/>
	<mx:Label text="Select type of Applikation:"  color="#ffffff"/>
 	
	
	<mx:Button  label="add element"    click="addTreeElementLauncher()"/>
	<mx:Button  label="auto spacing"    click="autoSpacing()"/>

</mx:VBox>
</mx:HBox>