<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundColor="#ffffff" creationComplete="creationCompleteHandler()" hide="hideHendler()" 
			show="showHnadler()" label="add Element" xmlns:ns1="vdom.components.treeEditor.colormenu.*" xmlns:colorMenu02="vdom.components.treeEditor.colorMenu02.*" xmlns:treeEditor="vdom.components.treeEditor.*">
	

<mx:Canvas id="main" width="100%" height="100%">
	<mx:Canvas id="cnvLevelDown1" />
	
	<treeEditor:DeleteLineButton id="btLine" />

<mx:Script>
	<![CDATA[
		import mx.containers.Canvas;
		import vdom.components.treeEditor.colorMenu02.ColorMenu2;
		//import vdom.Languages;
		import vdom.components.edit.containers.AttributesPanel;
		import vdom.events.DataManagerEvent;
		import vdom.managers.FileManager;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import vdom.managers.DataManager;
		import vdom.connection.soap.SoapEvent;
		import vdom.connection.soap.Soap;
		import mx.core.Application;
		import mx.events.MoveEvent;
		import mx.controls.Image;
		import mx.events.TreeEvent;
		import vdom.events.TreeEditorEvent;
		import mx.states.AddChild;
		import mx.core.Container;
		import mx.controls.Button;
		import mx.events.DragEvent;
		
//		var asd:AttributesPanel  = 
		//hide когда закрываем
		// show когда открываем снова
	//данные которые уже есть
	private var xml1:XML; 
 	private var massTreeElements:Array = new Array();
	private var massLines:Array = new Array();
	private var selectedTreeEliment:String;
	private var treeElement:TreeElement = new TreeElement();
	private var canRectangle:Canvas = new Canvas();
	private var curTree:Object = new Object();
	private var canLine:Canvas = new Canvas();
	private var pnFrom:Point = new Point();
	private var blDrawLine:Boolean = false;
	private var vctTest:Vector2 = new Vector2();
	private var curLine:Object = new Object();
//	private var publicData:Object;
	private var dataManager:DataManager  = DataManager.getInstance();
	private var script:TreeEditorScript  = new TreeEditorScript();
	//private var languages:Languages;
	

/******* 
 * 
 * 
 * 			to Do
 *		//Линии красиво 
 * 		Картинка менялась
 * 		//Выстраивание дерева
 * 		текущий елемент поверх всех..
 * 		//елементы меньшего размера
 * 		
 * 	//	Перенос елемента влево и вверх
 * 		
 * 
 * 
 * 
 * */


	 [Bindable]
   private var arrAppl: Array = new Array();
     [Bindable]
   public var selectedAppl:Object;  
   
   	[Embed(source='/assets/treeEditor/treeEditor.swf', symbol='rMenu')]
		[Bindable]
	public var rMenu:Class; 
	
	private function creationCompleteHandler():void
	{
		
		//languages = Languages.getInstance();
	///	publicData = Application.application.publicData;
		
	}
	
	private function hideHendler():void
	{
		//trace();
		// save current position to server
		saveToServer();

		// delete all Lines
		for (var level:String in massLines)
			for (var frsTrElem:String in massLines[level])
				for (var sknTrElem:String in massLines[level][frsTrElem])
				{
					main.removeChild(massLines[level][frsTrElem][sknTrElem]);
					delete massLines[level][frsTrElem][sknTrElem];
					
				}
				
		btLine.alpha = 0.5;
		btLine.visible = false;
		// delete Elements
		for (var obID:String in massTreeElements)
		{
			main.removeChild(massTreeElements[obID]);
			delete massTreeElements[obID];
		}
		
		
				
					/** * * *   delete Listeners  * * * * */
		removeEventListener(MouseEvent.CLICK, mouseClickHandler);
		colmen2.removeEventListener(TreeEditorEvent.HIDE_LINES, hideLines);
		colmen2.removeEventListener(TreeEditorEvent.SHOW_LINES, showLines);
		dataManager.removeEventListener(DataManagerEvent.STRUCTURE_LOADED, getApplicationStructure);
		btLine.removeEventListener(MouseEvent.CLICK, delButtonOperation);
	}
	
	private function showHnadler():void
	{
		if(!main) main = new Canvas();
	
		if(!btLine)btLine = new DeleteLineButton();
		
		/******  	set Listeners  ******/
		
		colmen2.addEventListener(TreeEditorEvent.HIDE_LINES, hideLines);
		colmen2.addEventListener(TreeEditorEvent.SHOW_LINES, showLines);
		dataManager.addEventListener(DataManagerEvent.STRUCTURE_LOADED, getApplicationStructure);
		
		btLine.addEventListener(MouseEvent.CLICK, delButtonOperation);
			
		dataManager.getApplicationStructure();
		
			
		arrAppl = [];
		var types:XMLList = dataManager.getTopLevelTypes();
		
		for each(var lavel:XML in types )
		{																//2330fe83-8cd6-4ed5-907d-11874e7ebcf4 /#Lang(001)
				var strLabel:String = script.getLanguagePhrase(lavel.Information.Name, lavel.Information.DisplayName);
				var strID:String = lavel.Information.ID;
				arrAppl.push({label:strLabel, data:strID});
		}
		
		btAddTreeElement.enabled = false;
	}
	
	private function  getApplicationStructure(dtManEvt:DataManagerEvent):void
	{
		xml1 = XML(dtManEvt.result);
		massTreeElements = script.createTreeArr(xml1,dataManager.listPages);
		createTree();
		curTree = massTreeElements[dataManager.currentPageId];
		drawLines();
		
		dataManager.removeEventListener(DataManagerEvent.STRUCTURE_LOADED, getApplicationStructure);
	}
	
	
	
	private function createTree():void
	{
		for (var obID:String in massTreeElements)
		{
			if (massTreeElements[obID].resourceID!='') 
			{
				var resMan:FileManager = FileManager.getInstance();
				resMan.loadResource(dataManager.currentApplicationId, massTreeElements[obID].resourceID, this);
			}
			massTreeElements[obID].addEventListener(TreeEditorEvent.REDRAW , treeElementLinesReDrawHandler);
			massTreeElements[obID].addEventListener(TreeEditorEvent.START_DRAW_LINE , startDrawLine);
			massTreeElements[obID].addEventListener(TreeEditorEvent.DELETE , deleteTreeElement);	
			massTreeElements[obID].addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
			main.addChild(massTreeElements[obID]);
			/***************************************/
		}
	}
	
	
	public function set resource (object:Object):void
	{
		for (var obID:String in massTreeElements)
		{
			if(massTreeElements[obID].resourceID == object.resourceID )
			{	
				massTreeElements[obID].sourseImg = object.data;
			}
		}
	}
	
	private function hideTreeElement(trEvt:Object):void
	{
		massTreeElements[curTree.ID].resize = true;
	}
	

	private function delButtonOperation(msEvt:MouseEvent):void
	{
		//ссылка на самого себя 
			for (var level:String in massLines)
					for (var frsTrElem:String in massLines[level])
						for (var sknTrElem:String in massLines[level][frsTrElem])
							if(curLine  == massLines[level][frsTrElem][sknTrElem] )
							{
							//	trace('im here!'); 
							//*	cnvLevelDown.removeChild(massLines[level][frsTrElem][sknTrElem]);
								main.removeChild(massLines[level][frsTrElem][sknTrElem]);
								delete massLines[level][frsTrElem][sknTrElem];
								btLine.alpha = 0.5;
								btLine.visible = false;
							}
	}
	// рисуем линии
	private function drawLines():void
	{
		for each(var xmlObj:XML in xml1.children())
		{
			var obID:String = xmlObj.@ID.toXMLString();
			
			//создаем массив с Направляющими между обьектами
			for each(var xmlLavel:XML in xmlObj.children())
			{
				var level:String = xmlLavel.@Index.toXMLString();
				// mass of levels where  level  consist of numbers betvin 0-9
				if (!massLines[level]) massLines[level] = new Array();
				if (!massLines[level][obID]) massLines[level][obID] = new Array();
				
				for each(var xmlLavelObj:XML in xmlLavel.children())
				{
					var toObjID:String = xmlLavelObj.@ID.toXMLString();
					if (obID != toObjID)// избавляемся от зацикливающихся обьектов
					{
						massLines[level][obID][toObjID] = new TreeVector(massTreeElements[obID], massTreeElements[toObjID], level);
						massLines[level][obID][toObjID].addEventListener(MouseEvent.CLICK, markLines);
					//*	cnvLevelDown.addChild(massLines[level][obID][toObjID]);
						main.addChildAt(massLines[level][obID][toObjID], 0);
					}
				}
			}
		}
		creatTree();
	}
	
	private function creatTree():void
	{
		var massMap:Array = new Array();
		var massTreeObj:Array = new Array();
		for each(var xmlObj:XML in xml1.children())
		{
			
			var obID:String = xmlObj.@ID.toXMLString();
			 massTreeObj[obID] = new TreeObj(obID);
		}
		
		for each( xmlObj in xml1.children())
		{
			var fromObID:String = xmlObj.@ID.toXMLString(); 
			for each(var xmlLavel:XML in xmlObj.children())
			{
				for each(var xmlLavelObj:XML in xmlLavel.children())
				{
					var toObjID:String = xmlLavelObj.@ID.toXMLString();
					massTreeObj[fromObID].child = massTreeObj[toObjID];
					massTreeObj[toObjID].parent = massTreeObj[fromObID];
					
				}
			}
		}
		
		var depth:int = 0;
		for (var name:String in massTreeObj)
			if (massTreeObj[name].parent == null)
			{
				setPosition(name);	
			} 
			
		function setPosition(inName:String):void
		{
			if (massMap[depth] == null)
			{
				if (depth == 0)massMap[depth] = 0;
					else massMap[depth] = massMap[depth-1];
			}
			else
			{
				massMap[depth] = distension();
			} 
			
			massTreeObj[inName].mapX = massMap[depth];
			massTreeObj[inName].mapY = depth;
			massTreeObj[inName].depth = depth;
		
			
			depth++;
			for (var name:String in massTreeObj[inName].childs)
			{
				
				setPosition(name);
			}
			depth--;
			
			massTreeObj[inName].correctPosition();
		}
		
		function  distension():int
		{
			var maxX:int =  massMap[depth-1];
			for(var i:int = depth; i< massMap.length; i++)
			{
				if (massMap[i] == null)
				{
					return maxX;
				}else
				{
					if 	(massMap[i]>= maxX) maxX = massMap[i]+1  ;
				}
			}
			return maxX;
		}
		
		for (var str:String in massTreeObj)
		{
			massTreeElements[str].x  = massTreeObj[str].mapX * 150;
			massTreeElements[str].y  = massTreeObj[str].mapY * 60;
		}
		
			
	}
	private function markLines(muEvt:MouseEvent):void
	{
		curLine.mark = false;
		curLine = muEvt.currentTarget;
		curLine.mark = true;
		btLine.x = mouseX - btLine.width / 2;
		btLine.y = mouseY  - btLine.height - 2;
		btLine.visible = true;
		muEvt.stopImmediatePropagation();
	}
	
	private function treeElementLinesReDrawHandler(trEvt:TreeEditorEvent):void
	{
		redrawLines(trEvt.currentTarget.ID);
	}
	
	/***
	* 
	* ---------- перерисовываем необходимые линии -----------------
	*
	*/
	
	private function redrawLines(strID:String):void
	{
		for (var level:String in massLines)
		for(var ind1:String in massLines[level])
			for(var ind2:String in massLines[level][ind1])
				if (strID == ind1 || strID == ind2)
					massLines[level][ind1][ind2].updateVector();
	}
	
	
	/** 
	*
	*		Кликнули по обьекту, 
	*		- выделяем его
	*		- если надо проводим к нему линию связи с 
	*		с от другого обьекта
	*/
	
	private function mouseDownHandler(evt:MouseEvent):void
	{
			pnFrom.x = evt.currentTarget.x;
			pnFrom.y =evt.currentTarget.y;
		
		// проводим линию
		if(blDrawLine){
			var fromObj:String = curTree.ID.toString();
			var toObj:String = evt.currentTarget.ID.toString();
			var necessaryLevel:String = colmen2.selectedItem.level;
	
			if(!massLines[necessaryLevel]) 
				massLines[necessaryLevel] = new Array();
			
			if(!massLines[necessaryLevel][curTree.ID.toString()]) 
				massLines[necessaryLevel][curTree.ID.toString()] = new Array();
			
			// обьект сам на себя
			if(toObj == fromObj)return;
			
			// может эта линия уже есть?
			for (var level:String in massLines)
				for (var frsTrElem:String in massLines[level])
					for (var sknTrElem:String in massLines[level][frsTrElem])
						if((frsTrElem == fromObj && sknTrElem == toObj ) ||
							(frsTrElem == toObj && sknTrElem ==  fromObj ))
							{	
								curTree = evt.currentTarget;
								return;
							}
			
			
			massLines[necessaryLevel][fromObj][toObj] 	= 
			new TreeVector(massTreeElements[fromObj], massTreeElements[toObj], necessaryLevel);
			
			main.addChildAt(massLines[necessaryLevel][fromObj][toObj], 0);
			massLines[necessaryLevel][fromObj][toObj].addEventListener(MouseEvent.MOUSE_DOWN, markLines);
		}

		// выделяем необходимый елемент дерева
		evt.currentTarget.startDrag();
		evt.currentTarget.addEventListener(MouseEvent.MOUSE_UP, treeElementMousUpHandler);
		addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
		
		curTree = evt.currentTarget;
		dataManager.changeCurrentPage( curTree.ID);
	}
	private function treeElementMousUpHandler(msEvt:MouseEvent):void
	{
		msEvt.currentTarget.stopDrag();
		msEvt.currentTarget.removeEventListener(MouseEvent.MOUSE_UP, treeElementMousUpHandler);
		removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
		
		var dx:Number = 0;
		var dy:Number = 0;
		if(msEvt.currentTarget.x <0){
			dx -=  msEvt.currentTarget.x
		}
		if(msEvt.currentTarget.y <0){
			dy -=  msEvt.currentTarget.y
		} 
		
		if(dx || dy)
		{
			
			
			for (var ID:String in massTreeElements)
			{
				massTreeElements[ID].x += dx;
				massTreeElements[ID].y += dy; 
			}
			
			for (var level:String in massLines)
				for (var frsTrElem:String in massLines[level])
					for (var sknTrElem:String in massLines[level][frsTrElem])
					massLines[level][frsTrElem][sknTrElem].updateVector();
			
			if(dx)	main.horizontalScrollPosition += dx;
			if(dy)	main.verticalScrollPosition	  += dy;
		}
		
		
	}
	
	private function mouseMoveHandler(msEvt:MouseEvent):void
	{
		redrawLines(curTree.ID);
	}
	/**
	*
	*		удаляем обьект и все его связи
	*
	*/
	private function deleteTreeElement(trEvt:TreeEditorEvent):void
	{
		curTree = massTreeElements[trEvt.ID];
		Alert.show("Do you want to delete Element?", "Delete Element", 3, this, alertClickDeleteTreeElement);
	}
	 
            // Event handler function for displaying the selected Alert button.
    private function alertClickDeleteTreeElement(event:CloseEvent):void {
        if (event.detail==Alert.YES)
        {
           	dataManager.deleteObject(curTree.ID)
           	deleteObject(curTree.ID);
        }
        var ID:String = '';
			for (var nam:String in massTreeElements)
				if(ID == '') ID = nam; 
		
		curTree = massTreeElements[ID];
    }
	
	private function deleteObject(strID:String):void
	{
		for (var level:String in massLines)
			for(var ind1:String in massLines[level])
				for(var ind2:String in massLines[level][ind1])
					if (strID == ind1 || strID == ind2)
					{
						 main.removeChild( massLines[level][ind1][ind2]);
						 delete massLines[level][ind1][ind2];
					}
		// удаляем сам обьект
		main.removeChild(massTreeElements[strID]);
		delete massTreeElements[strID];
		
		curTree = null;
		
		saveToServer();
				
	}
	
	/**
	*
	*		запускаем прорисовку линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function startDrawLine(trEvt:TreeEditorEvent):void
	{
		main.addChild(vctTest);//--для рисования связывающей линии
		addEventListener(MouseEvent.MOUSE_MOVE, drLine);
		
		blDrawLine = true; //говорим что рисуем линию
		addEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		drLine(new MouseEvent(MouseEvent.MOUSE_OVER));
	}
	
	/**
	* ресурсы
	*		перестаем рисовать линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function stopDrawLine(msEvt:MouseEvent):void
	{
		removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
		removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		main.removeChild(vctTest); ///-------------***********
		blDrawLine = false;  //говорим что НЕ рисуем линию
	}
	
	/**
	*
	*		рисуем линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function drLine (mEvt:MouseEvent):void
	{
		var pnTo:Object = script.drLine(mouseX + main.horizontalScrollPosition, mouseY + main.verticalScrollPosition , curTree);
	
		var obj:Object = new Object()
		//obj = colorMenu.selectedItem;
		vctTest.graphics.clear();
		
		vctTest.createVector(curTree, pnTo, colmen2.selectedItem.data);	
	}
	/**
	*  
	*		получаем из существующей структуры данных XML 
	*
	*/
		
	
	
		private function soapAddTreeElement():void
		{
			var types:XMLList = dataManager.getTopLevelTypes();
		trace('1231231');
			dataManager.createObject(selectedAppl.data);
			dataManager.addEventListener(DataManagerEvent.OBJECTS_CREATED, createObject);
		}
			
		private function  createObject(dmEvt:DataManagerEvent):void
		{
			dataManager.removeEventListener(DataManagerEvent.OBJECTS_CREATED, createObject);
			trace('CreateObject: '+dmEvt.result);
			var xml:XML = new XML(dmEvt.result);
			//trace('xml new Elem: ' + xml);
			addTreeElement(xml);
			
			saveToServer();
		}
		
		private function addTreeElement(xml:XML):void
		{
			var obID:String =  xml.Object.@ID;
			
			massTreeElements[obID] =  new TreeElement();
			massTreeElements[obID] = script.createTreeElement(xml);
			massTreeElements[obID].addEventListener(TreeEditorEvent.REDRAW , treeElementLinesReDrawHandler);
			massTreeElements[obID].addEventListener(TreeEditorEvent.START_DRAW_LINE , startDrawLine);
			massTreeElements[obID].addEventListener(TreeEditorEvent.DELETE , deleteTreeElement);	
			massTreeElements[obID].addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
			/****************************************/
			main.addChild(massTreeElements[obID]);
		}
	
	
	
	private function saveToServer():void
	{
		 var dataToServer:XML =  script.dataToXML(massTreeElements, massLines);
		 dataManager.setApplactionStructure(dataToServer);
		 dataManager.addEventListener(DataManagerEvent.STRUCTURE_SAVED, dataManagerListenner)
	}
	
	private function dataManagerListenner(dmnEvt:DataManagerEvent):void
	{
		//trace('rez: \n' + dmnEvt.result)
	}
	
	private function comBoxClose(evt:Object):void
	{
		selectedAppl=ComboBox(evt).selectedItem;
		btAddTreeElement.enabled = true;
	//	trace(selectedAppl.data);
	}
	
	private function hideLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
				massLines[level][frsTrElem][sknTrElem].visible = false;
	}
	
	private function showLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
				massLines[level][frsTrElem][sknTrElem].visible = true;
	}
	
	private function mouseClickHandler(msEvt:MouseEvent):void
	{
		for (var ID:String in massTreeElements)
				if(massTreeElements[ID].select) 
					massTreeElements[ID].unSelect();
		btLine.visible = false;
	}
	]]>
</mx:Script>


</mx:Canvas>

<mx:VBox   height="100%" >
	<colorMenu02:ColorMenu2 id="colmen2" x="50"/>
	

	<mx:Label text="Select type of Applikation:"  color="#ffffff"/>

 	<mx:ComboBox id="comBoxAppl"  width="150"   dataProvider="{arrAppl}" 
            close="comBoxClose(event.target)"  /> 
            
	<mx:Button id="btAddTreeElement" label="add element"    click="soapAddTreeElement()"/>
	
</mx:VBox>
	

</mx:HBox>