<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
			creationComplete="creationCompleteHandler()" hide="hideHendler()" 
			show="showHnadler()" label="add Element" xmlns:ns1="vdom.components.treeEditor.colormenu.*">
<mx:Script>
	<![CDATA[
		import vdom.Languages;
		import vdom.components.editor.containers.AttributesPanel;
		import vdom.events.DataManagerEvent;
		import vdom.managers.ResourceManager;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import vdom.managers.DataManager;
		import vdom.connection.soap.SoapEvent;
		import vdom.connection.soap.Soap;
		import mx.core.Application;
		import mx.events.MoveEvent;
		import mx.controls.Image;
		import mx.events.TreeEvent;
		import vdom.events.TreeEditorEvent;
		import mx.states.AddChild;
		import mx.core.Container;
		import mx.controls.Button;
		import mx.events.DragEvent;
		
//		var asd:AttributesPanel  = 
		//hide когда закрываем
		// show когда открываем снова
	//данные которые уже есть
	private var xml1:XML; 
 	private var massTreeElements:Array = new Array();
	private var massLines:Array = new Array();
	private var selectedTreeEliment:String;
	private var treeElement:TreeElement = new TreeElement();
	private var canRectangle:Canvas = new Canvas();
	private var curTree:Object = new Object();
	private var canLine:Canvas = new Canvas();
	private var pnFrom:Point = new Point();
	private var blDrawLine:Boolean = false;
	private var vctTest:Vector = new Vector();
	private var curLine:Object = new Object();
	private var btLine:DeleteLineButton;
	private var temMenu:TreeElementMenu;
	private var levelsMenu:LevelsMenu;
//	private var soap:Soap = Soap.getInstance();
	private var publicData:Object;
	private var dataManager:DataManager  = DataManager.getInstance();
	private var script:TreeEditorScript  = new TreeEditorScript();
	private var languages:Languages;
	
	 [Bindable]
   private var arrAppl: Array = new Array();
     [Bindable]
   public var selectedAppl:Object;  
	
	private function creationCompleteHandler():void
	{
		languages = Languages.getInstance();
		levelsMenu = new LevelsMenu();

		publicData = Application.application.publicData;
		
		btLine = new DeleteLineButton();
		
		addChild(btLine);
		temMenu = new TreeElementMenu();
		addChild(temMenu);
	}
	
	private function hideHendler():void
	{
		// save current position to server
		saveToServer();

		// delete all Lines
		for (var level:String in massLines)
			for (var frsTrElem:String in massLines[level])
				for (var sknTrElem:String in massLines[level][frsTrElem])
				{
				//	trace('im here!'); 
					cnvLevelDown.removeChild(massLines[level][frsTrElem][sknTrElem]);
					delete massLines[level][frsTrElem][sknTrElem];
					btLine.alpha = 0.5;
					btLine.visible = false;
				}
		
		// delete Elements
		for (var obID:String in massTreeElements)
		{
			removeChild(massTreeElements[obID]);
			delete massTreeElements[obID];
		}
		
		//publicData.topLevelObjectId = curTree.ID;		
		
				
					/** * * *   delete Listeners  * * * * */
		colorMenu.removeEventListener(TreeEditorEvent.HIDE_LINES, hideLines);
		colorMenu.removeEventListener(TreeEditorEvent.SHOW_LINES, showLines);
		dataManager.removeEventListener(DataManagerEvent.STRUCTURE_LOADED, getApplicationStructure);
		temMenu.removeEventListener(TreeEditorEvent.DELETE, deleteTreeElement);
		temMenu.removeEventListener(TreeEditorEvent.START_DRAW_LINE, startDrawLine);
		temMenu.removeEventListener(TreeEditorEvent.RESIZE_TREE_ELEMENT, hideTreeElement);	
		btLine.removeEventListener(MouseEvent.CLICK, delButtonOperation);
		removeEventListener(MouseEvent.MOUSE_MOVE, alfaMenu);
		
		colorMenu.hide();
		
	}
	
	private function showHnadler():void
	{
		
		/******  	set Listeners  ******/
		
		colorMenu.addEventListener(TreeEditorEvent.HIDE_LINES, hideLines);
		colorMenu.addEventListener(TreeEditorEvent.SHOW_LINES, showLines);
		dataManager.addEventListener(DataManagerEvent.STRUCTURE_LOADED, getApplicationStructure);
		temMenu.addEventListener(TreeEditorEvent.DELETE, deleteTreeElement);
		temMenu.addEventListener(TreeEditorEvent.START_DRAW_LINE, startDrawLine);
		temMenu.addEventListener(TreeEditorEvent.RESIZE_TREE_ELEMENT, hideTreeElement);	
		btLine.addEventListener(MouseEvent.CLICK, delButtonOperation);
		addEventListener(MouseEvent.MOUSE_MOVE, alfaMenu);
			
		dataManager.getApplactionStructure();
		colorMenu.show();
			
		arrAppl = [];
		var types:XML = dataManager.getTopLevelTypes();
		for each(var lavel:XML in types.Type )
		{
				var strLabel:String = getLanguagePhrase(lavel.Information.ID, lavel.Information.DisplayName);
				var strID:String = lavel.Information.ID;

				arrAppl.push({label:strLabel, data:strID});
		}
	//	comBoxAppl.dataProvider = arrAppl;
		
		btAddTreeElement.enabled = false;
	}
	
	private function getLanguagePhrase(typeID:String, phraseID:String):String {
		
		var phraseRE:RegExp = /#Lang\((\w+)\)/;
		phraseID = phraseID.match(phraseRE)[1];
		var languageID:String = typeID + '-' + phraseID;
		
		return languages.language.(@ID == languageID)[0];
	}
	
	private function  getApplicationStructure(dtManEvt:DataManagerEvent):void
	{
		xml1 = XML(dtManEvt.result);
	//	trace('_Data from server: ' + xml1);
		massTreeElements = script.createTreeArr(xml1);
		createTree();
		curTree = massTreeElements[publicData.topLevelObjectId];
		drawLines();
	}
	
	
	
	private function createTree():void
	{
		for (var obID:String in massTreeElements)
		{
			//trace('Here: ' + massTreeElements[obID].resourceID);
			if (massTreeElements[obID].resourceID!='') 
			{
				var resMan:ResourceManager = ResourceManager.getInstance();
				resMan.loadResource(publicData.applicationId, massTreeElements[obID].resourceID, this);
			//	trace('Work!');
			}
			massTreeElements[obID].addEventListener(TreeEditorEvent.REDRAW , mouseHandler);	
			massTreeElements[obID].addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
			addChild(massTreeElements[obID]);
		}
	}
	
	
	public function set resource (object:Object):void
	{
	//	trace('1object.guid' + object.resourceID);
		for (var obID:String in massTreeElements)
		{
			if(massTreeElements[obID].resourceID == object.resourceID )
			{	
				massTreeElements[obID].sourseImg = object.data;
			//	trace('2object.resourceID' + object.resourceID);
			}
		}
	}
	
	private function hideTreeElement(trEvt:Object):void
	{
		massTreeElements[curTree.ID].resize = true;
		//publicData.topLevelObjectId = curTree.ID;
	}
	

	
	private function alfaMenu(msEvt:MouseEvent):void
	{
		temMenu.alfaMenu(mouseX - temMenu.x,  mouseY - temMenu.y );
	}
	
	private function treeElementsClick(msEvt:MouseEvent):void
	{
		temMenu.position = msEvt.currentTarget;
	}
	
	private function delButtonOperation(msEvt:MouseEvent):void
	{
		//ссылка на самого себя 
			for (var level:String in massLines)
					for (var frsTrElem:String in massLines[level])
						for (var sknTrElem:String in massLines[level][frsTrElem])
							if(curLine  == massLines[level][frsTrElem][sknTrElem] )
							{
							//	trace('im here!'); 
								cnvLevelDown.removeChild(massLines[level][frsTrElem][sknTrElem]);
								delete massLines[level][frsTrElem][sknTrElem];
								btLine.alpha = 0.5;
								btLine.visible = false;
							}
	}
	// рисуем линии
	private function drawLines():void
	{
		for each(var xmlObj:XML in xml1.children())
		{
			var obID:String = xmlObj.@ID.toXMLString();
			
			//создаем массив с Направляющими между обьектами
			for each(var xmlLavel:XML in xmlObj.children())
			{
				var level:String = xmlLavel.@Index.toXMLString();
				// mass of levels where  level  consist of numbers betvin 0-9
				if (!massLines[level]) massLines[level] = new Array();
				if (!massLines[level][obID]) massLines[level][obID] = new Array();
				
				for each(var xmlLavelObj:XML in xmlLavel.children())
				{
					var toObjID:String = xmlLavelObj.@ID.toXMLString();
					
					massLines[level][obID][toObjID] = new TreeVector(massTreeElements[obID], massTreeElements[toObjID], level);
					massLines[level][obID][toObjID].addEventListener(MouseEvent.MOUSE_DOWN, markLines);
					cnvLevelDown.addChild(massLines[level][obID][toObjID]);
				}
			}
		}
	}
	
	private function markLines(muEvt:MouseEvent):void
	{
		curLine.mark = false;
		curLine = muEvt.currentTarget;
		curLine.mark = true;
		btLine.x = mouseX - btLine.width / 2;
		btLine.y = mouseY  - btLine.height - 2;
		btLine.visible = true;
	}
	
	private function mouseHandler(msEvt:TreeEditorEvent):void
	{
		redrawLines(msEvt.currentTarget.ID);
	}
	
	/***
	* 
	* ---------- перерисовываем необходимые линии -----------------
	*
	*/
	
	private function redrawLines(strID:String):void
	{
		for (var level:String in massLines)
		for(var ind1:String in massLines[level])
			for(var ind2:String in massLines[level][ind1])
				if (strID == ind1 || strID == ind2)
					massLines[level][ind1][ind2].updateVector();
				
	//	temMenu.position = massTreeElements[strID];
		temMenu.position = massTreeElements[publicData.topLevelObjectId];
	}
	
	/******
	
	+ когда  соединяешь, стрелка за мышкой
	+ цвет по текущему уровню
	+ Баг верхнего угла
	+ при нажатии на линиию появлялась становилась видима кнопка
	+ нармальные картикни
	+ Выделение текущего елемента
	+ прозрачность у меню в зависимости от расстоянию до мышки
	+ свертывание и развертывание елементов
	+ загрузка данных на сервер
	+ чтение данных с сервера
	
	* меню:
		- уровни
		- показывать/скрывать
		- рисовать в соответсвии выделеного уровня
	
	+ корректоное отображение при смене апликухи
	- оптимизация %)
	+ получение рисунков
	- выбор локального рисунка;
	+ подтверждение на удаление;
	- нормальные линии между елементами дерева
	
	*/
	
	
	/**
	*
	*		прекращаем перетаскивание прямоугольника
	*		и на его места стави выделенный елемент дерерва
	*
	*/
	private function stopingDrag(trEvt:MouseEvent):void
	{/****************************/
		canRectangle.stopDrag();
		curTree.x = canRectangle.x;
		curTree.y = canRectangle.y;
		canRectangle.graphics.clear();
		canRectangle.removeEventListener(MouseEvent.MOUSE_UP, stopingDrag);
		redrawLines(curTree.ID);
		removeChild(canRectangle);
	
		temMenu.position = curTree;
	}
	
	/** 
	*
	*		Кликнули по обьекту, 
	*		- выделяем его
	*		- если надо проводим к нему линию связи с 
	*		с от другого обьекта
	*/
	
	private function mouseDownHandler(evt:MouseEvent):void
	{
		btLine.visible = false;
		
			pnFrom.x = evt.currentTarget.x;
			pnFrom.y =evt.currentTarget.y;
			
			temMenu.position = evt.currentTarget;
		if(!blDrawLine)
		{
		/*---выделяем и перетаскиваем обьект---*/	
			curLine.mark = false; // снимаем выдиление с текущей линии
			btLine.visible = false; // прячем кнопку 
			
			var rect:Rectangle = new Rectangle(this.x, this.y, width, height);
			
			canRectangle.addEventListener(MouseEvent.MOUSE_UP, stopingDrag);
			
			canRectangle.x = evt.currentTarget.x;
			canRectangle.y = evt.currentTarget.y;
			canRectangle.graphics.lineStyle(3, 0xffffff, .7, false, LineScaleMode.NONE, CapsStyle.SQUARE, JointStyle.MITER);
			canRectangle.graphics.beginFill(0x555555,  0);
			canRectangle.graphics.drawRect(0, 0, evt.currentTarget.width, evt.currentTarget.height);
			
			canRectangle.startDrag(false, rect);
			addChild(canRectangle);
			
		}
		
		// проводим линию
		if(blDrawLine){
			var fromObj:String = curTree.ID.toString();
			var toObj:String = evt.currentTarget.ID.toString();
			var necessaryLevel:String = colorMenu.selectedItem.level;

			if(!massLines[necessaryLevel]) 
				massLines[necessaryLevel] = new Array();
			
			if(!massLines[necessaryLevel][curTree.ID.toString()]) 
				massLines[necessaryLevel][curTree.ID.toString()] = new Array();
			
			// обьект сам на себя
			if(toObj == fromObj)return;
			
			// может эта линия уже есть?
			for (var level:String in massLines)
				for (var frsTrElem:String in massLines[level])
					for (var sknTrElem:String in massLines[level][frsTrElem])
						if((frsTrElem == fromObj && sknTrElem == toObj ) ||
							(frsTrElem == toObj && sknTrElem ==  fromObj ))
							{	
								curTree = evt.currentTarget;
								return;
							}
			
			
			massLines[necessaryLevel][fromObj][toObj] 	= 
			new TreeVector(massTreeElements[fromObj], massTreeElements[toObj], necessaryLevel);
			
			cnvLevelDown.addChild(massLines[necessaryLevel][fromObj][toObj]);
			massLines[necessaryLevel][fromObj][toObj].addEventListener(MouseEvent.MOUSE_DOWN, markLines);
		}

		// выделяем необходимый елемент дерева
		curTree = evt.currentTarget;
		publicData.topLevelObjectId = curTree.ID;
	}
	
	/**
	*
	*		удаляем обьект и все его связи
	*
	*/
	private function deleteTreeElement(trEvt:TreeEditorEvent):void
	{
		Alert.show("Do you want to delete Element?", "Delete Element", 3, this, alertClickDeleteTreeElement);
	}
	 
            // Event handler function for displaying the selected Alert button.
    private function alertClickDeleteTreeElement(event:CloseEvent):void {
        if (event.detail==Alert.YES)
        {
           	dataManager.deleteObject(curTree.ID)
           	deleteObject(curTree.ID);
        }
        var ID:String = '';
			for (var nam:String in massTreeElements)
				if(ID == '') ID = nam; 
		
			
		curTree = massTreeElements[ID];
		temMenu.position = curTree;
        
    }
	
	private function deleteObject(strID:String):void
	{
		for (var level:String in massLines)
			for(var ind1:String in massLines[level])
				for(var ind2:String in massLines[level][ind1])
					if (strID == ind1 || strID == ind2)
					{
						 cnvLevelDown.removeChild( massLines[level][ind1][ind2]);
						 delete massLines[level][ind1][ind2];
					}
		// удаляем сам обьект
		removeChild(massTreeElements[strID]);
		delete massTreeElements[strID];
		
		curTree = null;
		
		saveToServer();
				
	}
	
	/**
	*
	*		запускаем прорисовку линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function startDrawLine(trEvt:TreeEditorEvent):void
	{
		addChild(vctTest);//--для рисования связывающей линии
		addEventListener(MouseEvent.MOUSE_MOVE, drLine);
		
		blDrawLine = true; //говорим что рисуем линию
		addEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		drLine(new MouseEvent(MouseEvent.MOUSE_OVER));
	}
	
	/**
	* ресурсы
	*		перестаем рисовать линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function stopDrawLine(msEvt:MouseEvent):void
	{
		removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
		removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		removeChild(vctTest); ///-------------***********
		blDrawLine = false;  //говорим что НЕ рисуем линию
	}
	
	/**
	*
	*		рисуем линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function drLine (mEvt:MouseEvent):void
	{
		var pnTo:Object = script.drLine(mouseX, mouseY, curTree);
	
		vctTest.graphics.clear();
		vctTest.createVector(curTree, pnTo, colorMenu.selectedItem.data);	
	}
	/**
	*  
	*		получаем из существующей структуры данных XML 
	*
	*/
		
	private function  createObject(dmEvt:DataManagerEvent):void
	{
		//trace('CreateObject: '+dmEvt.result);
		var xml:XML = new XML(dmEvt.result);
	//	trace('xml new Elem: ' + xml);
		addTreeElement(xml.Object.@ID);
		dataManager.removeEventListener(DataManagerEvent.OBJECTS_CREATED, createObject);
		
		saveToServer();
	}
	
	private function soapAddTreeElement():void
	{
		var types:XML = dataManager.getTopLevelTypes();
		var objInitProp:Object = new  Object();
		
		objInitProp.parentId = '';
		objInitProp.typeId = selectedAppl.data;

		dataManager.createObject(selectedAppl.data);
		dataManager.addEventListener(DataManagerEvent.OBJECTS_CREATED, createObject);
	}
		
		private function addTreeElement(obID:String):void
		{
			massTreeElements[obID] =  new TreeElement();
			massTreeElements[obID].name = obID;
			massTreeElements[obID].x = 0;
			massTreeElements[obID].y = 0;	
			
			massTreeElements[obID].addEventListener(TreeEditorEvent.REDRAW , mouseHandler);	
			massTreeElements[obID].addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
			addChild(massTreeElements[obID]);
		}
	
	
	
	private function saveToServer():void
	{
		 var dataToServer:XML =  script.dataToXML(massTreeElements, massLines);
		 dataManager.setApplactionStructure(dataToServer);
		// dataManager.addEventListener(DataManagerEvent.STRUCTURE_SAVED, dataManagerListenner);
		
	}
	
	private function dataManagerListenner(soapEvt:DataManagerEvent):void
	{
		trace('rez: \n' + soapEvt.result)
	}
	
	private function comBoxClose(evt:Object):void
	{
		selectedAppl=ComboBox(evt).selectedItem;
		btAddTreeElement.enabled = true;
	//	trace(selectedAppl.data);
	}
	
	private function hideLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
				massLines[level][frsTrElem][sknTrElem].visible = false;
	}
	
	private function showLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
				massLines[level][frsTrElem][sknTrElem].visible = true;
	}
	
	]]>
</mx:Script>
<mx:Canvas id="cnvLevelTop"/>
<mx:Canvas id="cnvLevelDown"/>

<mx:Label text="Select type of Applikation:" right="23" top="255" color="#ffffff"/>
 <mx:ComboBox id="comBoxAppl"  width="150"   dataProvider="{arrAppl}" 
            close="comBoxClose(event.target)" right="23" top="281"/> 
            
<mx:Button id="btAddTreeElement" label="add element" right="23" top="311"   click="soapAddTreeElement()"/>
	<ns1:ColorMenu id="colorMenu" right="33" top="26"/>
</mx:Canvas>