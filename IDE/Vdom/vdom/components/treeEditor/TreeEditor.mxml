<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundColor="#ffffff" creationComplete="creationCompleteHandler()" hide="hideHendler()" 
			show="showHnadler()" label="add Element" xmlns:ns1="vdom.components.treeEditor.colormenu.*" xmlns:colorMenu02="vdom.components.treeEditor.colorMenu02.*" xmlns:treeEditor="vdom.components.treeEditor.*">
	

<mx:Canvas id="main" width="100%" height="100%">
	
	
	<treeEditor:DeleteLineButton id="btLine"  />

<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import vdom.managers.FileManager;
		import vdom.managers.DataManager;
		import mx.events.CloseEvent;
		
		include "test.as";
		
		
	private var xml1:XML; 
 	private var massTreeElements:Array = new Array();
	private var massLines:Array = new Array();
	private var selectedTreeEliment:String;
	private var treeElement:TreeElement = new TreeElement();
	private var canRectangle:Canvas = new Canvas();
	private var curTree:Object = new Object();
	private var canLine:Canvas = new Canvas();
	private var pnFrom:Point = new Point();
	private var blDrawLine:Boolean = false;
	private var vctTest:Vector2 = new Vector2();
	private var curLine:Object = new Object();
	private var dataManager:DataManager  = DataManager.getInstance();
	private var script:TreeEditorScript  = new TreeEditorScript();
	

/******* 
 * 
 * 
 * 			to Do
 *		//Линии красиво 
 * 		Картинка менялась -  андрей
 * 		//Выстраивание дерева
 * 	//	текущий елемент поверх всех.. 
 * 		//елементы меньшего размера
 * 		//строить дерево если это необходимо
 * 		добавлять новый елемент правее, если есть елемент 0:0
 * 		//линии правильно с самого начала..
 * 		переделать код..
 * 	//	Перенос елемента влево и вверх
 * 		
 * 
 * 
 * 
 * */
	
	private var fileManager:FileManager = FileManager.getInstance();
	
	private function creationCompleteHandler():void
	{
		 fileManager = FileManager.getInstance();
	}
	
	private function showHnadler():void
	{
		if(!main) main = new Canvas();
	
		if(!btLine)btLine = new DeleteLineButton();
		
		addTreeEditorListeners();
			
		dataManager.getApplicationStructure();
		
		setDisplayNames();
	}
	
	private function hideHendler():void
	{
		saveToServer();

		removeAllLines();
		
		removeMassTreeElements();
				
		removeTreeEditorListeners();
		
		btLine.visible = false;
	}
	
	
	
	private function  getApplicationStructure(dtManEvt:DataManagerEvent):void
	{
		dataManager.removeEventListener(DataManagerEvent.STRUCTURE_LOADED, getApplicationStructure);
		
		createTreeArr(dtManEvt.result);
		drawLines(dtManEvt.result);
		
		if (needCreatTree == true)
			adjustmentTree(dtManEvt.result);
		
		curTree = massTreeElements[dataManager.currentPageId];
		
		if(curTree != null)
			curTree.current = true;
	}
	
	
	
	
	
	private function startReDrawLineHandler(trEvt:TreeEditorEvent):void
	{
		main.removeChild(massTreeElements[trEvt.ID]);
		main.addChild(massTreeElements[trEvt.ID]);
		
		main.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
	}
	
	private function stopReDrawLineHandler(trEvt:TreeEditorEvent):void
	{
		main.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
		treeElementMousUpHandler();
		saveToServer();
	}
	
	
	public function set resource (object:Object):void
	{
		for (var obID:String in massTreeElements)
			if(massTreeElements[obID].resourceID == object.resourceID )
				massTreeElements[obID].sourseImg = object.data;
	}
	
	private function hideTreeElement(trEvt:Object):void
	{
		massTreeElements[curTree.ID].resize = true;
	}
	

	private function lineClikHandler(msEvt:MouseEvent):void
	{
		removeLine();
	}
		
	
	private function markLines(muEvt:MouseEvent):void
	{
		curLine.mark = false;
		curLine = muEvt.currentTarget;
		curLine.mark = true;
		btLine.x = main.horizontalScrollPosition + mouseX - btLine.width / 2;
		btLine.y = main.verticalScrollPosition + mouseY  - btLine.height - 2;
		btLine.visible = true;
		muEvt.stopImmediatePropagation();
	}
	
	private function treeElementLinesReDrawHandler(trEvt:TreeEditorEvent):void
	{
		if(trEvt.currentTarget.ID != null)
			redrawLines(trEvt.currentTarget.ID); 
	}
	
	
	
	/** 
	*
	*		Кликнули по обьекту, 
	*		- выделяем его
	*		- если надо проводим к нему линию связи с 
	*		с от другого обьекта
	*/
	
	private function mouseDownHandler(evt:MouseEvent):void
	{
			pnFrom.x = evt.currentTarget.x;
			pnFrom.y =evt.currentTarget.y;
		
		// проводим линию
		if(blDrawLine)
			drawLine(evt.currentTarget);		

		if (curTree != null)
			curTree.current = false;	
		evt.currentTarget.current = true;
		curTree = evt.currentTarget;
		dataManager.changeCurrentPage( curTree.ID);
	}
	
	
	
	private function mouseMoveHandler(msEvt:MouseEvent):void
	{
		redrawLines(curTree.ID);
	}
	/**
	*
	*		удаляем обьект и все его связи
	*
	*/
	private function deleteTreeElement(trEvt:TreeEditorEvent):void
	{
		curTree = massTreeElements[trEvt.ID];
		Alert.show("Do you want to delete Element?", "Delete Element", 3, this, alertClickDeleteTreeElement);
	}
	 
            // Event handler function for displaying the selected Alert button.
    private function alertClickDeleteTreeElement(event:CloseEvent):void {
        if (event.detail==Alert.YES)
        {
           	dataManager.deleteObject(curTree.ID)
           	deleteObject(curTree.ID);
        }
        var ID:String = '';
			for (var nam:String in massTreeElements)
				if(ID == '') ID = nam; 
		curTree = massTreeElements[ID];
		curTree.current = true;
		dataManager.changeCurrentPage( curTree.ID);
    }
	
	/**
	*
	*		запускаем прорисовку линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function startDrawLine(trEvt:TreeEditorEvent):void
	{
		//trace('и Я нажата');
		
		main.addChild(vctTest);//--для рисования связывающей линии
		addEventListener(MouseEvent.MOUSE_MOVE, drLine);
		
		blDrawLine = true; //говорим что рисуем линию
		addEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		drLine(new MouseEvent(MouseEvent.MOUSE_OVER));
		
	}
	
	/**
	* ресурсы
	*		перестаем рисовать линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function stopDrawLine(msEvt:MouseEvent):void
	{
		removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
		removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		main.removeChild(vctTest); ///-------------***********
		blDrawLine = false;  //говорим что НЕ рисуем линию
	}
	
	/**
	*
	*		рисуем линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function drLine (mEvt:MouseEvent):void
	{
		var pnTo:Object = script.drLine(mouseX + main.horizontalScrollPosition, mouseY + main.verticalScrollPosition , curTree);
	
		var obj:Object = new Object()
		//obj = colorMenu.selectedItem;
		vctTest.graphics.clear();
		
		vctTest.createVector(curTree, pnTo, colmen2.selectedItem.data);	
	}
	/**
	*  
	*		получаем из существующей структуры данных XML 
	*
	*/
		
	
	
		private function soapAddTreeElement():void
		{
			var types:XMLList = dataManager.getTopLevelTypes();
	//	trace('1231231');
			
			dataManager.addEventListener(DataManagerEvent.OBJECTS_CREATED, createObject);
			dataManager.createObject(selectedAppl.data);
		}
			
		private function  createObject(dmEvt:DataManagerEvent):void
		{
			dataManager.removeEventListener(DataManagerEvent.OBJECTS_CREATED, createObject);
			//trace('CreateObject: '+dmEvt.result);
			var xml:XML = new XML(dmEvt.result);
//			trace('xml new Elem: ' + xml);
			addTreeElement(xml);
			
			
			saveToServer();
		}
		
		private function addTreeElement(xml:XML):void
		{
			
			var treeElement:TreeElement = new TreeElement();
			
			treeElement = script.createTreeElement(xml);
			treeElement = addEventListenerToTreeElement(treeElement);
			
			var obID:String =  xml.Object.@ID;
			massTreeElements[obID] = treeElement;
			
			main.addChild(massTreeElements[obID]);
			if (curTree == null)
			{
				curTree = massTreeElements[obID];
				curTree.current = true;
			} 
		}
	
	
	
	private function saveToServer():void
	{
		var dataToServer:XML =  script.dataToXML(massTreeElements, massLines);
		if(dataToServer.*.length() > 0)
		{										
		 	dataManager.addEventListener(DataManagerEvent.STRUCTURE_SAVED, dataManagerListenner)
			dataManager.setApplactionStructure(dataToServer);
		}
	}
	
	private function dataManagerListenner(dmnEvt:DataManagerEvent):void
	{
		dataManager.removeEventListener(DataManagerEvent.STRUCTURE_SAVED, dataManagerListenner)
		//trace('rez: \n' + dmnEvt.result)
	}
	
	private function comBoxClose(evt:Object):void
	{
		selectedAppl=ComboBox(evt).selectedItem;
		btAddTreeElement.enabled = true;
	}	
	
	private function hideLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
				massLines[level][frsTrElem][sknTrElem].visible = false;
	}
	
	private function showLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
				massLines[level][frsTrElem][sknTrElem].visible = true;
	}
	
	private function mouseClickHandler(msEvt:MouseEvent):void
	{
		for (var ID:String in massTreeElements)
				if(massTreeElements[ID].select) 
					massTreeElements[ID].unSelect();
		btLine.visible = false;
	}
	]]>
</mx:Script>


</mx:Canvas>

<mx:VBox   height="100%" >
	<colorMenu02:ColorMenu2 id="colmen2" x="50"/>
	

	<mx:Label text="Select type of Applikation:"  color="#ffffff"/>

 	<mx:ComboBox id="comBoxAppl"  width="150"   dataProvider="{arrAppl}" 
            close="comBoxClose(event.target)"  /> 
            
	<mx:Button id="btAddTreeElement" label="add element"    click="soapAddTreeElement()"/>
	
</mx:VBox>
	

</mx:HBox>