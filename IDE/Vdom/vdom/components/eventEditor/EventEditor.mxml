<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler()" 
	xmlns:eventEditor="vdom.components.eventEditor.*" show="showHandler()" hide="hideHandler()">
	 <mx:Script>
	 	<![CDATA[
	 	/***
	 	 * 
	 	 * 
	 	 *  - собрать структуру из дерева
	 	 *  + из структуры собрать дерево
	 	 *  - удаление евентов
	 	 *  - удаление линий
	 	 *  - баг с повторяющимися параметрами
	 	 *  - перенести вниз дерево евентов/акшинов 
	 	 * 
	 	 * 
	 	 * */
	 	 
	 	 /*
	 	 	в каких случаях посылать данные на сервер?
	 	 	 - когда переключаешься по веткам (если были изменения)
	 	 	 - на hide
	 	 	делать ли заготовку для посылки на сервер 
	 	 
	 	 */
	 		import com.yahoo.astra.mx.managers.AutoCompleteManager;
	 	
	 		import vdom.events.DataManagerEvent;
	 		import vdom.events.EventEditorEvent;
	 		import vdom.events.TreeEditorEvent;
	 		import vdom.components.treeEditor.TreeElement;
	 		import vdom.components.treeEditor.TreeVector;
	 		import vdom.components.treeEditor.Vector2;
	 		import vdom.managers.DataManager;
	 		import vdom.utils.IconUtil;
	 	 
	 		import mx.binding.utils.BindingUtils;
	 		import mx.controls.DataGrid;
	 		import mx.controls.Text;
	 		import mx.core.DragSource;
	 		import mx.controls.Tree;
	 		import mx.collections.ArrayCollection;
	 		import mx.events.DragEvent;
	 		import mx.managers.DragManager;
	 		
	 		[Bindable]
	 		private var dataManager:DataManager;
	 		
	 		private var linesArray:Array = new Array();
	 		
	 		private function creationCompleteHandler():void
	 		{
	 			dataManager = DataManager.getInstance();
	 		}
	 	
	 		private function showHandler():void
	 		{
	 			BindingUtils.bindProperty(trContainer, 'dataProvider', dataManager, 'listPages')
	 			trContainer.showHandler();
	 			trContainer.addEventListener(EventEditorEvent.DATA_CHANGED, dataChangedListener);
	 		}
	 		
	 		private function hideHandler():void
	 		{
	 			trContainer.hideHandler();
	 		}
	 		
	 		private function dataChangedListener(eeEvt:EventEditorEvent):void
	 		{
	 			dataManager.addEventListener(DataManagerEvent.APPLICATION_EVENT_LOADED, applicationEvenLoadedHandler);
	 			trace('get: '+ eeEvt.objID);
	 			dataManager.getApplicationEvents(eeEvt.objID);
	 			
	 			trEvents.dataProvider  = eeEvt.data;
	 			trActions.dataProvider = eeEvt.data;
	 		}
	 		
	 		private function applicationEvenLoadedHandler(dmEvt:DataManagerEvent):void
	 		{
	 			dataManager.removeEventListener(DataManagerEvent.APPLICATION_EVENT_LOADED, applicationEvenLoadedHandler);
	 			trace(dmEvt.result.toXMLString());
	 		//	can.removeAllChildren();
	 		}
	 		
	 		 private function dragEnterHandler(event:DragEvent):void 
	 		 {
	 		        var dropTarget:Canvas=Canvas(event.currentTarget);
	                DragManager.acceptDragDrop(dropTarget);
	        }
            
            private var eventsArray	:Array = new Array();
            private var actionsArray:Array = new Array();
                
	        private function dragDropHandler(event:DragEvent):void 
	        {
	        	var ds:DragSource = event.dragSource;
                if( !ds.hasFormat("treeItems") ) return;     // no useful data

                var items:Array = ds.dataForFormat("treeItems") as Array;
                for(var i:Number=0; i < items.length; i++) {

                    var item:XML = XML(items[i]);
                    if( item.name().toString() == "Object" ) return; // not what we want

                }
	                    
	        	var newElement:*;
	        	  if( event.dragInitiator is TreeActions ) 
	        	  {
	        		 newElement =  new EventEditorAction(item);
	        		 newElement.addEventListener(MouseEvent.MOUSE_DOWN, creatingAssociationLine);
	        		 actionsArray[newElement.ID] = newElement;
	        	  } 
	        	  else if (event.dragInitiator is TreeEvents ) 
	        	  {
	        	  	newElement = new EventEditorEvents(item);
	        	  	newElement.addEventListener(TreeEditorEvent.START_DRAW_LINE, startDrawLine);
	        	  	eventsArray[newElement.ID] = newElement;
	        	  }
	        	 
	        	newElement.x = event.localX;
	        	newElement.y = event.localY;
	        	newElement.addEventListener(TreeEditorEvent.START_REDRAW_LINES, startReDrawLineHandler)
	        	
	 			can.addChild(newElement); 
	        }   
	        
	        private function onTreeDragComplete(event:DragEvent):void 
	        {
                event.preventDefault();
            }    
       
        
            /******
            * 
            *	Рисуем линию... 
            * 
            */
            private var blDrawLine:Boolean = false;
            private var line:Vector2 = new Vector2();
        	private var curEvent:Object;
            private function startDrawLine(trEvt:TreeEditorEvent):void
			{
				//чтоб 2жды не запускать
				if(can.owns(line)) 
					return;
					
				line = new Vector2();	
								
				can.addChild(line);//--для рисования связывающей линии
				can.addEventListener(MouseEvent.MOUSE_MOVE, drLine);
				
				blDrawLine = true; //говорим что рисуем линию
				addEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
				
				curEvent = eventsArray[trEvt.ID]
			}
			// 7-701-249-68-36 cancho 
			// 7-702-153-44-95 vascho
			
			private function drLine (mEvt:MouseEvent):void
			{
			// нормализуем mouseX mouseY
				 var pt:Point = new Point(mEvt.localX, mEvt.localY);
            		pt = mEvt.target.localToGlobal(pt);
            		pt = can.globalToLocal(pt);
				
				var pnTo:Object = calculatePointTo(pt, curEvent);
				
				line.graphics.clear();
				line.createVector(curEvent, pnTo);	
			}
			
			private function calculatePointTo(pn:Point, curTree:Object):Object
			{
				var tX:int = pn.x - vBox.x - curEvent.x;
				var tY:int = pn.y  - curEvent.y;
				
				var pnTo:Object = new Object();
				// чтоб мышка не кликала по своей линии
				
				if((tX>0))	pnTo.x = pn.x - 10;
					else pnTo.x = pn.x + 10;
				
				if( (tY>0))	pnTo.y = pn.y - 10;
					else pnTo.y = pn.y + 10;
					
				return pnTo;
			}
			
			private function creatingAssociationLine(msEvt:MouseEvent):void
			{
				if (!blDrawLine)
					return;
					
				can.removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
				removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
				
				line.clear();
				can.removeChild(line); ///-------------***********
				blDrawLine = false;  //говорим что НЕ рисуем линию
			
				var evtID:String = curEvent.ID;
				var actID:String = msEvt.currentTarget.ID;
				
				if(!linesArray[evtID]) linesArray[curEvent.ID] = new Array();
				//if(!msEvt.hasOwnProperty('ID')) return;
				if(linesArray[evtID][actID]) return;
				
				linesArray[evtID][actID] = 
					new TreeVector(eventsArray[evtID], actionsArray[actID], '2');
				can.addChild(linesArray[evtID][actID]);
			}
			
			private function stopDrawLine(msEvt:MouseEvent):void
			{
				if (!blDrawLine)
					return;
				can.removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
					removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
				
				line.clear();
				can.removeChild(line); ///-------------***********
				blDrawLine = false;  //говорим что НЕ рисуем линию
			}
			
			private var curContainerID:String;
			private var dataToServer:XML = 
	<E2vdom>
		<Events>
	      <Event ObjSrcID='321' Name='123'>
	         <Action ID='333'/>
	      </Event>
	   </Events>
	   <Actions>
	      <Action ID='333' ObjTgtID='123' MethodName='name'>
	         <Parameter ScriptName='MyParameter'>33</Parameter>
	      </Action>
	   </Actions>
   </E2vdom>



			private function treeContainerChangeHandler(evt:Event):void
			{
				// send structure of events to server
//				trace(dataToServer);
			//	dataManager.setApplicationEvents(curContainerID, dataToServer.toXMLString());
				
				 var selectedNode:XML = Tree(evt.target).selectedItem as XML;
				 if (selectedNode)
              	 	curContainerID = selectedNode.@ID; 
			}
			
			private function getIcon(value:Object):Class 
			{
				var xmlData:XML = XML(value);
				var data:Object = {typeId:xmlData.@Type, resourceId:xmlData.@resourceID}
			 	
		 		return IconUtil.getClass(trContainer, data, 16, 16);
			}
			
			/***
			 * 
			 *  for ReDraw line when one of objects moved
			 *
			 */
			private var  curID:String;
			private function startReDrawLineHandler(trEvt:TreeEditorEvent):void
			{
				curID = trEvt.ID;
				addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			}
			
			private function mouseMoveHandler(msEvt:MouseEvent):void
			{
				for(var evID:String in linesArray)
					for(var acID:String in linesArray[evID])
					{
						if(evID == curID || acID == curID)
							linesArray[evID][acID].updateVector();
					}
			}
			
			private function stopReDrawLineHandler(trEvt:TreeEditorEvent):void
			{
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			//  проверка если перетащили за границы :	treeElementMousUpHandler();
			}
			
			private function creatDataToServer():void
			{
				dataToServer = <E2vdom>	<Actions/> 	<Events/> </E2vdom>;
				
				var temXML:XML;
				 
				for (var actID:String in actionsArray)
				{	
					temXML = <Action/>;
					
					temXML.@ID 		 	= actionsArray[actID].ID;
					temXML.@ObjTgtID 	= actionsArray[actID].ObjTgtID;
					temXML.@MethodName 	= actionsArray[actID].MethodName;
					
					dataToServer.Actions.appendChild(temXML);
				}
				
				for (var evtID:String in eventsArray)
				{
					temXML = <Event/>;
					
					temXML.@Name 	 = eventsArray[evtID].Name;
					temXML.@ObjSrcID = eventsArray[evtID].ObjSrcID;
					
					dataToServer.Events.appendChild(temXML);
				}
				
				for(evtID in linesArray)
				{ 
					var ObjSrcID:String = eventsArray[evtID].ObjSrcID;
					
					for(actID in linesArray[evtID])
					{
						temXML = <Action/>;
						temXML.@ID = actionsArray[actID].ID;

						dataToServer.Events.Event.(@ObjSrcID == ObjSrcID).appendChild(temXML);
					}
				}
				trace('----toServer---\n '+curContainerID+'\n'+ dataToServer.toXMLString())
				dataManager.setApplicationEvents(curContainerID, dataToServer.toXMLString());
			}
	 	]]>
	 </mx:Script>
	 
	 
	
	
	<mx:HDividedBox width="100%" height="100%">
		<mx:VDividedBox width="200" height="100%">
			<mx:VBox  width="100%" height="100%" >
				<mx:Label text="Current container: selected container" fontWeight="bold"  color="0xFFFFFF"/>
            	 <eventEditor:TreeContainer iconFunction="getIcon" id="trContainer" width="100%" height="100%" 
    			 	change="treeContainerChangeHandler(event)" />
    		</mx:VBox>
			 <mx:Canvas label="canvas1" width="100%" height="100%" >
	                <mx:TabNavigator id="tn"  width="100%" height="100%">
			            <!-- Define each panel using a VBox container. -->
				        <mx:Canvas label="Events"  width="100%" height="100%" >
				             <eventEditor:TreeEvents id="trEvents" width="100%" height="100%" />
				        </mx:Canvas>
				        
				        <mx:Canvas label="Actions"  width="100%" height="100%" >
				             <eventEditor:TreeActions id="trActions" width="100%" height="100%"	 />
				        </mx:Canvas>
			        </mx:TabNavigator>
	          </mx:Canvas>
		</mx:VDividedBox>
            <mx:VBox id="vBox" width="100%" height="100%" >
           <!--     <mx:Label text="Current container: selected container" fontWeight="bold"  color="0xFFFFFF"/> -->
                <mx:Canvas id="can" width="100%" height="100%" 
                		backgroundColor="#cccccc"
                	 	dragEnter="dragEnterHandler(event);" 
        				dragDrop="dragDropHandler(event);">
                    <mx:Button label="Button" right="33" bottom="10" click="creatDataToServer()"/>
                </mx:Canvas>
            </mx:VBox>
	</mx:HDividedBox>
		

</mx:Canvas>
