<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler()" 
	xmlns:eventEditor="vdom.components.eventEditor.*" show="showHandler()" hide="hideHandler()">
	 <mx:Script>
	 	<![CDATA[
	 		import mx.binding.utils.BindingUtils;
	 		import com.yahoo.astra.mx.managers.AutoCompleteManager;
	 	
	 	/***
	 	 * 
	 	 * 
	 	 * 	заполнить еветЕлементы.
	 	 * 
	 	 * 
	 	 * */
	 		import vdom.components.treeEditor.TreeVector;
	 		import vdom.events.TreeEditorEvent;
	 		import mx.controls.Tree;
	 		import vdom.components.treeEditor.Vector2;
	 		import vdom.managers.DataManager;
	 		import mx.collections.ArrayCollection;
	 		import mx.controls.DataGrid;
	 		import mx.controls.Text;
	 		import mx.core.DragSource;
	 		import mx.events.DragEvent;
	 		import mx.managers.DragManager;
	 		import vdom.components.treeEditor.TreeElement;
	 		import vdom.events.EventEditorEvent;
	 		
	 		[Bindable]
	 		private var dataManager:DataManager;
	 		
	 		private var linesArray:Array = new Array();
	 		
	 		private function creationCompleteHandler():void
	 		{
	 			dataManager = DataManager.getInstance();
	 		}
	 	
	 		private function showHandler():void
	 		{
	 			BindingUtils.bindProperty(trContainer, 'dataProvider', dataManager, 'listPages')
	 			trContainer.showHandler();
	 			trContainer.addEventListener(EventEditorEvent.DATA_CHANGED, dataChangedListener);
	 		}
	 		
	 		private function hideHandler():void
	 		{
	 			//BindingUtils.bindProperty(pageList, 'dataProvider', dataManager, 'listPages')
	 			trContainer.hideHandler();
	 		}
	 		
	 		private function dataChangedListener(eeEvt:EventEditorEvent):void
	 		{
	 			trEvents.dataProvider = eeEvt.data;
	 			trActions.dataProvider = eeEvt.data;
	 		}
	 		
	 		 private function dragEnterHandler(event:DragEvent):void 
	 		 {
	 		        var dropTarget:Canvas=Canvas(event.currentTarget);
	                DragManager.acceptDragDrop(dropTarget);
	        }
            
            private var eventsArray	:Array = new Array();
            private var actionsArray:Array = new Array();
                
	        private function dragDropHandler(event:DragEvent):void 
	        {
	        	var ds:DragSource = event.dragSource;
                if( !ds.hasFormat("treeItems") ) return;     // no useful data

                var items:Array = ds.dataForFormat("treeItems") as Array;
                for(var i:Number=0; i < items.length; i++) {

                    var item:XML = XML(items[i]);
                 //  trace('item: '+ item.name().toString());
                    if( item.name().toString() == "Object" ) return; // not what we want

                }
	                    
	        	var newElement:*;
	        	  if( event.dragInitiator is TreeActions ) 
	        	  {
	        		 newElement =  new EventEditorAction(item);
	        		 newElement.addEventListener(MouseEvent.MOUSE_DOWN, creatingAssociationLine);
	        		 actionsArray[newElement.ID] = newElement;
	        	  } 
	        	  else if (event.dragInitiator is TreeEvents ) 
	        	  {
	        	  	newElement = new EventEditorEvents(item);
	        	  	newElement.addEventListener(TreeEditorEvent.START_DRAW_LINE, startDrawLine);
	        	  	eventsArray[newElement.ID] = newElement;
	        	  }
	        	 
	        	newElement.x = event.localX;
	        	newElement.y = event.localY;
	        	
	 			can.addChild(newElement); 
	        }   
	        
	        private function onTreeDragComplete(event:DragEvent):void 
	        {
                event.preventDefault();
            }    
       
        
            /******
            * 
            *	Рисуем линию... 
            * 
            */
            private var blDrawLine:Boolean = false;
            private var line:Vector2 = new Vector2();
        	private var curEvent:Object;
            private function startDrawLine(trEvt:TreeEditorEvent):void
			{
				//чтоб 2жды не запускать
				if(can.owns(line)) 
					return;
				can.addChild(line);//--для рисования связывающей линии
				can.addEventListener(MouseEvent.MOUSE_MOVE, drLine);
				
				blDrawLine = true; //говорим что рисуем линию
				addEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
				
				curEvent = eventsArray[trEvt.ID]
	//			drLine(new MouseEvent(MouseEvent.MOUSE_OVER));
	//			line.graphics.clear();
			}
			// 7-701-249-68-36 cancho 
			// 7-702-153-44-95 vascho
			// 

			
			private function drLine (mEvt:MouseEvent):void
			{
			//	var a:AutoCompleteManager = AutoCompleteManager();
				
			// нормализуем mouseX mouseY
				 var pt:Point = new Point(mEvt.localX, mEvt.localY);
            		pt = mEvt.target.localToGlobal(pt);
            		pt = can.globalToLocal(pt);
				
				var pnTo:Object = calculatePointTo(pt, curEvent);
				
				line.graphics.clear();
				line.createVector(curEvent, pnTo);	
			}
			
			private function calculatePointTo(pn:Point, curTree:Object):Object
			{
				var tX:int = pn.x - vBox.x - curEvent.x;
				var tY:int = pn.y  - curEvent.y;
				
				var pnTo:Object = new Object();
				// чтоб мышка не кликала по своей линии
				
				if((tX>0))	pnTo.x = pn.x - 10;
					else pnTo.x = pn.x + 10;
				
				if( (tY>0))	pnTo.y = pn.y - 10;
					else pnTo.y = pn.y + 10;
					
				return pnTo;
			}
			
			private function creatingAssociationLine(msEvt:MouseEvent):void
			{
				if (!blDrawLine)
					return;
					
				can.removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
				removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
				
				line.clear();
				can.removeChild(line); ///-------------***********
				blDrawLine = false;  //говорим что НЕ рисуем линию
				var evtID:String = curEvent.ID;
				var actID:String = msEvt.currentTarget.ID;
				
				if(!linesArray[evtID]) linesArray[curEvent.ID] = new Array();
				//if(!msEvt.hasOwnProperty('ID')) return;
				if(linesArray[evtID][actID]) return;
				
				linesArray[evtID][actID] = 
					new TreeVector(eventsArray[evtID], actionsArray[actID], '2');
		//			trace(eventsArray[evtID].x + ' : '
		//			+ actionsArray[actID].x )
				can.addChild(linesArray[evtID][actID]);
				//trace (can.owns(linesArray[evtID][actID]));
			}
			
			private function stopDrawLine(msEvt:MouseEvent):void
			{
				if (!blDrawLine)
					return;
			/*
				if (!msEvt.currentTarget.hasOwnProperty('ID'))
				{
					trace('Netu^(')
					return;
				}
				*/
				can.removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
				removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
				
				line.clear();
				can.removeChild(line); ///-------------***********
				blDrawLine = false;  //говорим что НЕ рисуем линию
		//		var evtID:String = curEvent.ID;
		//		var actID:String = msEvt.currentTarget.ID;

				
			
			//*******************
			//	line.createVector(eventsArray[evtID], actionsArray[actID]);
			//	can.addChild(line);	
				////////////********************
			}
			
			private function treeContainerChangeHandler(evt:Event):void
			{
				 var selectedNode:XML = Tree(evt.target).selectedItem as XML;
				 if (selectedNode)
              	 	var ID:String = selectedNode.@ID; 
             	 //trace('123: '+ID);
			}
	 	]]>
	 </mx:Script>
	 
	 
	 <mx:XMLList id="treeData">
	    <node label="Mail Box">
	        <node label="Inbox">
	            <node label="Marketing"/>
	            <node label="Product Management"/>
	            <node label="Personal"/>
	        </node>
	        <node label="Outbox">
	            <node label="Professional"/>
	            <node label="Personal"/>
	        </node>
	        <node label="Spam"/>
	        <node label="Sent"/>
		</node>	
    </mx:XMLList>
	
	<mx:HDividedBox width="100%" height="100%">
		 <mx:Canvas label="canvas1" width="200" height="100%" >
                <mx:TabNavigator id="tn"  width="100%" height="100%">
		            <!-- Define each panel using a VBox container. -->
					
					<mx:Canvas label="Container"  width="100%" height="100%"  >
			             <eventEditor:TreeContainer id="trContainer" width="100%" height="100%" 
                			 change="treeContainerChangeHandler(event)" />
			        </mx:Canvas>
			        
			        <mx:Canvas label="Events"  width="100%" height="100%" >
			             <eventEditor:TreeEvents id="trEvents" width="100%" height="100%" />
			        </mx:Canvas>
			        
			        <mx:Canvas label="Actions"  width="100%" height="100%" >
			             <eventEditor:TreeActions id="trActions" width="100%" height="100%" 
                			 dataProvider="{treeData}" />
			        </mx:Canvas>
			        

		        </mx:TabNavigator>
            </mx:Canvas>

            <mx:VBox id="vBox" width="100%" height="100%" >
                <mx:Label text="Current container: selected container" fontWeight="bold"  color="0xFFFFFF"/>
                <mx:Canvas id="can" width="100%" height="100%" 
                		backgroundColor="#cccccc"
                	 	dragEnter="dragEnterHandler(event);" 
        				dragDrop="dragDropHandler(event);"/>
            </mx:VBox>
	</mx:HDividedBox>
		

</mx:Canvas>
