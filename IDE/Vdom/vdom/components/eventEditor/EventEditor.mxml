<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler()" 
	xmlns:eventEditor="vdom.components.eventEditor.*" show="showHandler()" hide="hideHandler()">
	<mx:Metadata>
		[ResourceBundle("Event")]
	</mx:Metadata>
		
	 <mx:Script>
	 	<![CDATA[
	 		import mx.binding.utils.ChangeWatcher;
	 		import mx.core.Application;
	 		import mx.managers.CursorManagerPriority;
	 		import mx.managers.CursorManager;
	 		import vdom.components.treeEditor.DeleteLineButton;
	 		import mx.collections.XMLListCollection;
	 	/***
	 	 * 
	 	 * 
	 	 *  + собрать структуру из дерева 
	 	 *  + из структуры собрать дерево 
	 	 *  + удаление линий
	 	 *  + баг с повторяющимися параметрами
	 	 *  + перенести вниз дерево евентов/акшинов 
	 	 *  + удалени елементов
	 	 *  + чтоб серыми становились вынесенные евенты
	 	 *  + при удаление евента в дереве востанавливались евенты...
	 	 *  + запоминание состояния
	 	 *  + у акшина редактировались параметры
	 	 *  + посылать на сервер измененные параметры у акшинов
	 	 *
	 	 * 
	 	 *  
	 	 * */
	 	 
	 		import com.yahoo.astra.mx.managers.AutoCompleteManager;
	 	
	 		import vdom.events.DataManagerEvent;
	 		import vdom.events.EventEditorEvent;
	 		import vdom.events.TreeEditorEvent;
	 		import vdom.components.treeEditor.TreeElement;
	 		import vdom.components.treeEditor.TreeVector;
	 		import vdom.components.treeEditor.Vector2;
	 		import vdom.managers.DataManager;
	 		import vdom.utils.IconUtil;
	 	 
	 		import mx.binding.utils.BindingUtils;
	 		import mx.controls.DataGrid;
	 		import mx.controls.Text;
	 		import mx.core.DragSource;
	 		import mx.controls.Tree;
	 		import mx.collections.ArrayCollection;
	 		import mx.events.DragEvent;
	 		import mx.managers.DragManager;
	 		
	 		[Bindable]
	 		private var dataManager:DataManager;
	 	
			 [Embed(source='/assets/eventEditor/eventEditor.swf', symbol='copyCursor')]
			 [Bindable]
			 public var plus:Class;
			 
			[Embed(source='/assets/eventEditor/eventEditor.swf', symbol='rejectCursor')]
			[Bindable]
			public var delet:Class;
			
	 		
	 		private var linesArray:Array = new Array();
	 		
	 		private function creationCompleteHandler():void
	 		{
	 			dataManager = DataManager.getInstance();
	 		}
	 		
	 		private var changeWatcher:ChangeWatcher ;
	 		private function showHandler():void
	 		{
	 			changeWatcher = BindingUtils.bindProperty(trContainer, 'dataProvider', dataManager, 'listPages')
	 			trContainer.showHandler();
	 			trContainer.addEventListener(EventEditorEvent.DATA_CHANGED, dataChangedListener);
	 			
	 			btLine.addEventListener(MouseEvent.CLICK, lineClikHandler );
	 			
	 			addEventListener(MouseEvent.CLICK, mouseClickHandler);
	 			
	 			curContainerID = dataManager.currentPageId;
	 			curContainerTypeID = dataManager.getTypeByObjectId(curContainerID).Information.ID.toString();
	 		}
	 		
	 		private function hideHandler():void
	 		{
	 			changeWatcher.unwatch();
	 			trContainer.hideHandler();
	 			trContainer.removeEventListener(EventEditorEvent.DATA_CHANGED, dataChangedListener);
				can.removeAllChildren();
	 		}
	 		
	 		private var getApplEventID:String;
	 		private function dataChangedListener(eeEvt:EventEditorEvent):void
	 		{
	 			dataManager.addEventListener(DataManagerEvent.GET_APPLICATION_EVENTS_COMPLETE, applicationEvenLoadedHandler);
	 		
	 			getApplEventID = eeEvt.objID;
	 			
	 			if(dataChanged)
	 			{
	 				creatDataToServer(); //eeEvt.objID
	 				
	 			}else
	 			{
	 				dataManager.getApplicationEvents(getApplEventID);
	 			}
	 			dataChanged = false;
	 			
	 			can.removeAllChildren();
//	 			trace('-----From Server-----\n' +  eeEvt.data);
	 			trEvents.dataProvider  = eeEvt.data;
	 			trActions.dataProvider = eeEvt.data;
	 		}
	 		
	 		private function applicationEvenLoadedHandler(dmEvt:DataManagerEvent):void
	 		{
	 			dataManager.removeEventListener(DataManagerEvent.GET_APPLICATION_EVENTS_COMPLETE, applicationEvenLoadedHandler);
	 			cretDat(dmEvt.result);
	 		}
	 		
	 		 private function dragEnterHandler(event:DragEvent):void 
	 		 {
	 		        var dropTarget:Canvas=Canvas(event.currentTarget);
	                DragManager.acceptDragDrop(dropTarget);
	        }
            
            private var eventsArray	:Array = new Array();
            private var actionsArray:Array = new Array();
                
	        private function dragDropHandler(event:DragEvent):void 
	        {
	        	var ds:DragSource = event.dragSource;
                if( !ds.hasFormat("treeItems") ) return;     // no useful data

                var items:Array = ds.dataForFormat("treeItems") as Array;
                for(var i:Number=0; i < items.length; i++) 
                {
                    var item:XML = XML(items[i]);
                    
                    if( item.name().toString() == "Object" )
                    	 return; // not what we want
                    
                    if ( item.@enabled[0] == "false") 		
                    	return;
                }	  
	                    
	        	var newElement:*;
	        	  if( event.dragInitiator is TreeActions ) 
	        	  {
	        		 newElement =  new EventEditorAction(item, curContainerTypeID);
	        		 
	        		 actionsArray[newElement.ID] = setListeners4Action(newElement);
	        		 
	        		 can.addChild(actionsArray[newElement.ID] ); 
	        	  } 
	        	  else if (event.dragInitiator is TreeEvents ) 
	        	  {
	        	  	newElement = new EventEditorEvents(item, curContainerTypeID);
	        	 	
	        	 	item.@enabled = false;
	        	  
	        	  	if (eventsArray[newElement.ID])
	        	  			return;
	        	  	
	        	  	eventsArray[newElement.ID] = setListeners4Event(newElement);
	        	  	can.addChild(eventsArray[newElement.ID] ); 
	        	  }
	        	
	        	newElement.x = event.localX;
	        	newElement.y = event.localY;
	        	
	 			dataChanged = true;		
	        }   
	        
	        private function  setListeners4Action(el:EventEditorAction):EventEditorAction
	        {
	        	el.addEventListener(MouseEvent.MOUSE_DOWN, creatingAssociationLine);
	        	el.addEventListener(MouseEvent.MOUSE_OVER, actionMouseOverHandler);
	        	
	        	el.addEventListener(TreeEditorEvent.START_REDRAW_LINES, startReDrawLineHandler);
	        	el.addEventListener(TreeEditorEvent.REDRAW_LINES, reDrawLineHandler);
	        	el.addEventListener(TreeEditorEvent.DELETE, deletElementHandler);
	        	el.addEventListener(MouseEvent.CLICK, objectClickHandler);
	        	el.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
	        	
	        	return el;
	        }
	        
	        private function setListeners4Event(el:EventEditorEvents):EventEditorEvents
	        {
	        	el.addEventListener(TreeEditorEvent.START_DRAW_LINE, startDrawLine);
	        	el.addEventListener(MouseEvent.MOUSE_OVER, eventMouseOverHandler);
	        	
	        	el.addEventListener(TreeEditorEvent.START_REDRAW_LINES, startReDrawLineHandler);
	        	el.addEventListener(TreeEditorEvent.REDRAW_LINES, reDrawLineHandler);
	        	el.addEventListener(TreeEditorEvent.DELETE, deletElementHandler);
	        	el.addEventListener(MouseEvent.CLICK, objectClickHandler);
	        	el.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
	        	
	        	return el;
	        }
	        
	        private var cursorID:Number = 0;

	       	private function actionMouseOverHandler(mEvt:MouseEvent):void
	        {
	        	if( blDrawLine)
	        		if(possibleDrawLine(mEvt.currentTarget.ID))
	        			cursorID = CursorManager.setCursor(plus);
	        		else
	        			cursorID = CursorManager.setCursor(delet);
	        } 
	        
	        private function eventMouseOverHandler(mEvt:MouseEvent):void
	        {
	        	if(blDrawLine)
	        		cursorID = CursorManager.setCursor(delet);
	        } 
	        
	        private function mouseOutHandler(mEvt:MouseEvent):void
	        {
	        		CursorManager.removeCursor(cursorID);
	        	cursorID = 0;
	        }
 	        
	        private function objectClickHandler(mEvt:MouseEvent):void
	        {
	        	dataChanged = true;
	        }
	        
	        private function deletElementHandler(trEvt:TreeEditorEvent):void
	        {
	        	var ID:String = trEvt.ID;
	        	if(actionsArray[ID])
	        	{
	        		can.removeChild(actionsArray[ID]);
	        		delete actionsArray[ID];
	        		
	        	}else if(eventsArray[ID])
	        	{
	        		trEvents.enabledItem = eventsArray[ID];
	        		
	        		if(can.contains(eventsArray[ID]))
	        			can.removeChild(eventsArray[ID]);
	        			
	        		delete eventsArray[ID];
	        	}
	        	
	        	deleteLines(ID);
	        }
	        
	        private function deleteLines(ID:String):void
	        {
	        	for(var evtID:String in linesArray)
	        		for(var actID:String in linesArray[evtID])
	        		{
    					if (evtID == ID || actID == ID)
    					{
    						can.removeChild(linesArray[evtID][actID])
    						delete linesArray[evtID][actID];
    					}    		
	        		}
	        }
	        
	        private function onTreeDragComplete(event:DragEvent):void 
	        {
                event.preventDefault();
            }    
       
        
            /******
            * 
            *	Рисуем линию... 
            * 
            */
            private var blDrawLine:Boolean = false;
            private var line:Vector2 = new Vector2();
        	private var curEvent:Object;
            private function startDrawLine(trEvt:TreeEditorEvent):void
			{
				//чтоб 2жды не запускать
				if(can.owns(line)) 
					return;
					
				line = new Vector2();	
								
				can.addChild(line);//--для рисования связывающей линии
				can.addEventListener(MouseEvent.MOUSE_MOVE, drLine);
				
				blDrawLine = true; //говорим что рисуем линию
				addEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
				
				curEvent = eventsArray[trEvt.ID]
			}
			// 7-701-249-68-36 cancho 
			// 7-702-153-44-95 vascho
			
			private function drLine (mEvt:MouseEvent):void
			{
			// нормализуем mouseX mouseY
				 var pt:Point = new Point(mEvt.localX, mEvt.localY);
            		pt = mEvt.target.localToGlobal(pt);
            		pt = can.globalToLocal(pt);
				
				var pnTo:Object = calculatePointTo(pt, curEvent);
				
				line.graphics.clear();
				line.createVector(curEvent, pnTo);	
			}
			
			private function calculatePointTo(pn:Point, curTree:Object):Object
			{
				var tX:int = pn.x - vBox.x - curEvent.x;
				var tY:int = pn.y  - curEvent.y;
				
				var pnTo:Object = new Object();
				// чтоб мышка не кликала по своей линии
				
				if((tX>0))	pnTo.x = pn.x - 3;
					else pnTo.x = pn.x + 3;
				
				if( (tY>0))	pnTo.y = pn.y - 3;
					else pnTo.y = pn.y + 3;
					
				return pnTo;
			}
			
			private function creatingAssociationLine(msEvt:MouseEvent):void
			{
				if (!blDrawLine)
					return;
					
				can.removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
				removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
				
				line.clear();
				can.removeChild(line); ///-------------***********
				blDrawLine = false;  //говорим что НЕ рисуем линию
			
				if(possibleDrawLine(msEvt.currentTarget.ID))
					createLine(curEvent.ID, msEvt.currentTarget.ID)
			}
			
			private function createLine(evtID:String, actID:String):void
			{
				if(!actionsArray[actID]) return;
				
				if(!linesArray[evtID]) linesArray[evtID] = new Array();
				
				linesArray[evtID][actID] = 
					new TreeVector(eventsArray[evtID], actionsArray[actID], '0');
					
				linesArray[evtID][actID].addEventListener(MouseEvent.CLICK, markLines);	
				
				can.addChild(linesArray[evtID][actID]);
			}
			
			private function possibleDrawLine(actID:String):Boolean
			{
				var evtID:String = curEvent.ID;
				
				if(!linesArray[evtID]) 
					return true;

				if(linesArray[evtID][actID]) 
					return false;
				
				return true;
			}
			
			private function stopDrawLine(msEvt:MouseEvent):void
			{
				if (!blDrawLine)
					return;
				can.removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
					removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
				
				line.clear();
				can.removeChild(line); ///-------------***********
				blDrawLine = false;  //говорим что НЕ рисуем линию
			}
			
			private var curContainerID:String;
			public var curContainerTypeID:String;
			private var dataToServer:XML; 
			private var dataChanged:Boolean = false;

			private function treeContainerChangeHandler(evt:Event):void
			{
				 var selectedNode:XML = Tree(evt.target).selectedItem as XML;
				 if (selectedNode)
				 {
              	 	curContainerID = selectedNode.@ID;
              	 	curContainerTypeID = dataManager.getTypeByObjectId(curContainerID).Information.ID.toString();
              	 	trace('1 - curContainerTypeID: ' + curContainerTypeID);
     			 } 
     			 trace('2 - curContainerTypeID: '+ curContainerTypeID);
			}
			
			private function getIcon(value:Object):Class 
			{
				var xmlData:XML = XML(value);
				var data:Object = {typeId:xmlData.@Type, resourceId:xmlData.@resourceID}
			 	
		 		return IconUtil.getClass(trContainer, data, 16, 16);
			}
			
			/***
			 * 
			 *  for ReDraw line when one of objects moved
			 *
			 */
			private var  curID:String;
			private var dX:Number;
			private var dY:Number;
			private function startReDrawLineHandler(trEvt:TreeEditorEvent):void
			{
				curID = trEvt.ID;
				
				if(eventsArray[curID])
				{ 
					dX = eventsArray[curID].x;
					dY = eventsArray[curID].y;
				}
				
				if(actionsArray[curID])
				{ 
					dX = actionsArray[curID].x;
					dY = actionsArray[curID].y;
				}
				
				dX = can.mouseX -dX;
				dY = can.mouseY -dY;
				
//				trace('dX: ' + dX);
				Application.application.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				Application.application.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
			}
			
			private function mouseUpHandler(msEvt:MouseEvent):void
			{
				Application.application.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				Application.application.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
			}
			
			private function mouseMoveHandler(msEvt:MouseEvent):void
			{
				if (can.contains(btLine))
					can.removeChild(btLine);
				
				if(eventsArray[curID]) 
				{
//					eventsArray[curID].x = can.mouseX; //msEvt.localX;
//					eventsArray[curID].y = can.mouseY;//  msEvt.localY;
					
					if (can.mouseX < dX)
					{
						 eventsArray[curID].x = 0;
//						 eventsArray[curID].stopDrag();
					}else
					{
						eventsArray[curID].x = can.mouseX - dX;
					}
					
					if ((can.mouseY - dY) < 10)
					{
						 eventsArray[curID].y = 10;
//						 eventsArray[curID].stopDrag();
					}else
					{
						eventsArray[curID].y = can.mouseY - dY;	
					}
				} 
				else if(actionsArray[curID]) 
				{
					if (can.mouseX < dX)
					{
						 actionsArray[curID].x = 0;
//						 actionsArray[curID].stopDrag();
					}else
					{
						actionsArray[curID].x = can.mouseX - dX;
					}
					
					if ((can.mouseY - dY) < 10)
					{
						 actionsArray[curID].y = 10;
//						 actionsArray[curID].stopDrag();
					}else
					{
						 actionsArray[curID].y = can.mouseY - dY;
					}
				}
				
				reDrawLines();
			}
			
			private function reDrawLineHandler(trEvt:TreeEditorEvent):void
			{
				if (can.contains(btLine))
					can.removeChild(btLine);
			//	trace('reDrawLineHandler: '+ trEvt.ID)	
			
				reDrawLines();
			}
			
			private function reDrawLines():void
			{
				for(var evID:String in linesArray)
					for(var acID:String in linesArray[evID])
					{
		//				if(evID == curID || acID == curID)
							linesArray[evID][acID].updateVector();
					}
			}
			
			private function stopReDrawLineHandler(trEvt:TreeEditorEvent):void
			{
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
					
				reDrawLines();
			//  проверка если перетащили за границы :	treeElementMousUpHandler();
			}
			
			private function creatDataToServer():void
			{
//				trace('SEND curContainerID: '+contrID);
//				return;
				dataToServer = <E2vdom><Events/><ClientActions/> <ServerActions/></E2vdom>;
				
				var temXML:XML;
				 
				for (var actID:String in actionsArray)
				{	
					temXML = <Action/>;
					
					temXML.@ID 		 	= actionsArray[actID].ID;
					temXML.@ObjTgtID 	= actionsArray[actID].ObjTgtID;
					temXML.@MethodName 	= actionsArray[actID].MethodName;
					temXML.@Top 		= actionsArray[actID].y;
					temXML.@Left 		= actionsArray[actID].x;
					temXML.@State		= actionsArray[actID].State;
					
					temXML.appendChild(actionsArray[actID].parametrs);
					
					dataToServer.ClientActions.appendChild(temXML);
				}
				
				for (var evtID:String in eventsArray)
				{
					temXML = <Event/>;
					
					temXML.@Name 	 = eventsArray[evtID].Name;
					temXML.@ObjSrcID = eventsArray[evtID].ObjSrcID;
					temXML.@Top 	 = eventsArray[evtID].y;
					temXML.@Left 	 = eventsArray[evtID].x;
					temXML.@State	 = eventsArray[evtID].State;
					temXML.@ContainerID = curContainerID
					
					dataToServer.Events.appendChild(temXML);
				}
				
				for(evtID in linesArray)
				{ 
					var ObjSrcID:String = eventsArray[evtID].ObjSrcID;
					var Name:String = eventsArray[evtID].Name;
					
					for(actID in linesArray[evtID])
					{
						temXML = <Action/>;
						temXML.@ID = actionsArray[actID].ID;

						dataToServer.Events.Event.(@ObjSrcID == ObjSrcID && @Name == Name).appendChild(temXML);
					}
				}
				
//				trace('curContainerID TO server: '+curContainerID+'\n'+ dataToServer.toXMLString());
		     	dataManager.addEventListener(DataManagerEvent.SET_APPLICATION_EVENTS_COMPLETE, applEventSevedHandler)
				dataManager.setApplicationEvents(curContainerID, dataToServer.toXMLString());
				trace('****************\n '+ curContainerID);
				trace(dataToServer.toXMLString());
			}
			
			private function applEventSevedHandler(dmEvt:DataManagerEvent):void
			{
				dataManager.getApplicationEvents(getApplEventID);
			}
			
			private function cretDat(xmlToTree:XML=null):void
			{
				//trace(xmlToTree.toXMLString());
//				can.removeAllChildren();
				trace('----From Serve----'+xmlToTree);
				actionsArray = [];		
				for each(var actID:XML in xmlToTree.E2vdom.ClientActions.children())
				{
					///curContainerTypeID 
					
					var type:XML = dataManager.getTypeByObjectId(actID.@ObjTgtID)
					//var tupeID:String = type.Information.ID;
					var nData:* = type.E2vdom.Actions.Container.(@ID == curContainerTypeID).Action.(@MethodName == actID.@MethodName).Parameters[0];
					if(nData) 
					{
						var objAct:EventEditorAction = new EventEditorAction(actID, curContainerTypeID);
						
						 actionsArray[objAct.ID] = setListeners4Action(objAct);
						
						can.addChild(actionsArray [actID.@ID]);
					}
				}
				
				eventsArray = [];		
				for each(var evt:XML in xmlToTree.E2vdom.Events.children())
				{
					if(dataManager.getObject(evt.@ObjSrcID))
					{
						var objEv:EventEditorEvents = new EventEditorEvents(evt, curContainerTypeID);
						
						eventsArray[objEv.ID] = setListeners4Event(objEv);
						
						can.addChild(eventsArray[objEv.ID]);
						
						trEvents.disabledItem = objEv;
					}
				}
				
				linesArray = [];
				for (var evtID:String in eventsArray )//xmlToTree.E2vdom.Events.children()
				{
					var ObjSrcID:String = eventsArray[evtID].ObjSrcID;
					var Name: String = eventsArray[evtID].Name;
					 
					evt = xmlToTree.E2vdom.Events.Event.(@ObjSrcID == ObjSrcID && @Name ==Name)[0];
					for each(actID in evt.children())
					{
						createLine(evtID, actID.@ID);
					}
				}
				
			//	reDrawLines();
			}
			
			private var curLine:Object = new Object();
			private var btLine:DeleteLineButton = new DeleteLineButton();

			private function markLines(muEvt:MouseEvent):void
			{
				curLine.mark = false;
				curLine = muEvt.currentTarget;
				curLine.mark = true;
				btLine.x =  muEvt.localX - btLine.width / 2;
				btLine.y =  muEvt.localY - btLine.height - 2;
				btLine.visible = true;
				
				if (!can.contains(btLine))
				{
					can.addChild(btLine);
				}
				muEvt.stopImmediatePropagation();
			}
			
			private function lineClikHandler(msEvt:MouseEvent):void
			{
				removeLine();
			}
			
			private function  removeLine():void
			{
				for (var evID:String in linesArray)
					for (var actID:String in linesArray[evID])
						if(curLine  == linesArray[evID][actID] )
						{
							can.removeChild(linesArray[evID][actID]);
							delete linesArray[evID][actID] ;
						}
				if (can.contains(btLine))
					can.removeChild(btLine);
			}
			
			private function mouseClickHandler(msEvt:MouseEvent):void
			{
				for (var evID:String in linesArray)
					for (var actID:String in linesArray[evID])
						linesArray[evID][actID].mark = false;
						
				if (can.contains(btLine))
					can.removeChild(btLine);
			
			}
	 	]]>
	 </mx:Script>
	
	<mx:HDividedBox width="100%" height="100%">
		
		<mx:VDividedBox width="250" height="100%">
		 	<mx:VBox  width="100%"  height="40%" >
				<mx:Label text="Pages:" color="0xFFFFFF" fontWeight="bold"/>
	        	 <eventEditor:TreeContainer iconFunction="getIcon" id="trContainer" width="100%" height="100%" 
				 	change="treeContainerChangeHandler(event)" />
			 </mx:VBox>
			 <mx:Canvas label="canvas1" width="100%" height="100%"  >
			    <mx:VBox  width="100%" height="100%" >
	                <mx:TabNavigator id="tn"  width="100%" height="100%">
				        <mx:Canvas label="{resourceManager.getString('Event','events')}"  width="100%" height="100%" >
				             <eventEditor:TreeEvents id="trEvents" width="100%" height="100%" />
				        </mx:Canvas>
				        <mx:Canvas label="{resourceManager.getString('Event','actions')}"  width="100%" height="100%" >
				             <eventEditor:TreeActions id="trActions" width="100%" height="100%"	 />
				        </mx:Canvas>
			        </mx:TabNavigator>
			      </mx:VBox>
	          </mx:Canvas>
		</mx:VDividedBox>
		
        <mx:VBox id="vBox" width="100%" height="100%" >
            <mx:Canvas id="can" width="100%" height="100%" 
            		backgroundColor="#E1E1E1"
            	 	dragEnter="dragEnterHandler(event);" 
    				dragDrop="dragDropHandler(event);" borderColor="#DFDFDF">
                
            </mx:Canvas>
        </mx:VBox>
	</mx:HDividedBox>
		

</mx:Canvas>
