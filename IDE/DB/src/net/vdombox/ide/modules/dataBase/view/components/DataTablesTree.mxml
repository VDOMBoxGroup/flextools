<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="creationCompleteHandler(event)"
		 xmlns:components="net.vdombox.components.*"
		 xmlns:button="net.vdombox.ide.common.view.components.button.*">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ListEvent;

			import net.vdombox.ide.common.model._vo.TypeVO;
			import net.vdombox.ide.common.view.components.VDOMImage;
			import net.vdombox.ide.modules.dataBase.events.DataTablesEvents;

			[Bindable]
			private var _dataBases : XMLList;

			private var lastHighlightedItem : XML;

			private var typeBase : TypeVO;

			private var typeTable : TypeVO;

			public function get dataBases() : XMLList
			{
				return _dataBases;
			}

			public function set dataBases( value : XMLList ) : void
			{
				_dataBases = value;
			}

			public function get selectedObjectID() : String
			{
				var selectedItem : XML = tablesTree.selectedItem as XML;

				if ( !selectedItem )
					selectedItem = elementForSelection;

				var itemID : String;

				if ( selectedItem && selectedItem.name() == "object" )
					itemID = selectedItem.@id;

				return itemID;

			}

			public function set selectedObjectID( value : String ) : void
			{
				var currentID : String;

				if ( !_dataBases )
					return;

				try
				{
					currentID = tablesTree.selectedItem.@id;
				}
				catch ( error : Error )
				{
				}

				if ( !value )
					tablesTree.selectedIndex = -1;
				else if ( value != currentID )
					setSelectionByID( value );
			}

			public function get selectedPageID() : String
			{
				var selectedItem : XML = tablesTree.selectedItem as XML;
				var itemID : String;
				var parentItem : XML;

				if ( !selectedItem )
				{
				}
				else if ( selectedItem.name() == "page" )
				{
					itemID = selectedItem.@id;
				}
				else if ( selectedItem.name() == "object" )
				{
					parentItem = selectedItem.parent();

					while ( parentItem )
					{
						if ( parentItem.name() == "page" )
						{
							itemID = parentItem.@id;
							break;
						}

						parentItem = parentItem.parent();
					}
				}

				return itemID;
			}

			public function set selectedPageID( value : String ) : void
			{
				var currentID : String;

				if ( !_dataBases )
					return;

				try
				{
					currentID = tablesTree.selectedItem.@id;
				}
				catch ( error : Error )
				{
				}


				if ( !value )
					tablesTree.selectedIndex = -1;
				else
					//					if ( value != currentID )
					setSelectionByID( value );
			}

			private var elementForSelection : XML;

			private var _needUpdateProperties : Boolean = false;

			private function setSelectionByID( id : String ) : void
			{
				try
				{
					elementForSelection = _dataBases.( @id == id )[ 0 ];

					if ( !elementForSelection )
						elementForSelection = _dataBases..object.( @id == id )[ 0 ];
				}
				catch ( error : Error )
				{

				}

				if ( elementForSelection )
				{
					_needUpdateProperties = true;

					invalidateProperties();
				}
			}

			protected function creationCompleteHandler( event : FlexEvent ) : void
			{
				//addEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler, false, 0, true );

				tablesTree.addEventListener( ListEvent.CHANGE, objectsTree_changeHandler, false, 0, true );

				tablesTree.addEventListener( ListEvent.ITEM_ROLL_OVER, objectsTree_highlightChangeHandler, false, 0, true );
				tablesTree.addEventListener( ListEvent.ITEM_ROLL_OUT, objectsTree_highlightChangeHandler, false, 0, true );

				tablesTree.setStyle( "disclosureOpenIcon", VDOMImage.Opened_Tree_Icon );
				tablesTree.setStyle( "disclosureClosedIcon", VDOMImage.Closed_Tree_Icon );

			}

			private function objectsTree_changeHandler( event : ListEvent ) : void
			{
				dispatchEvent( new DataTablesEvents( DataTablesEvents.CHANGE ) );
			}

			private function objectsTree_highlightChangeHandler( event : ListEvent ) : void
			{
				if ( event.type == ListEvent.ITEM_ROLL_OVER )
					lastHighlightedItem = event.itemRenderer.data as XML;
				else
					lastHighlightedItem = null;
			}

			override public function validateProperties() : void
			{
				super.validateProperties();

				if ( _needUpdateProperties )
				{
					_needUpdateProperties = false;
					_needValideteDisplayList = true;

					if ( elementForSelection.name() == "page" )
						tablesTree.expandItem( elementForSelection, true, false );
					else
						openTree( elementForSelection );

					tablesTree.selectedItem = elementForSelection;

					invalidateDisplayList();
				}

			}

			private var _needValideteDisplayList : Boolean = false;

			override public function validateDisplayList() : void
			{
				// scrolling to necessary position
				super.validateDisplayList();

				if ( !_needValideteDisplayList )
					return

						_needValideteDisplayList = false;

				if ( tablesTree.selectedIndex == -1 )
					return;

				var index : int = tablesTree.selectedIndex;
				var newVPos : int;

				tablesTree.scrollToIndex( index );

			}

			private function openTree( item : Object ) : void
			{
				var parentItem : Object = XML( item ).parent();

				if ( parentItem )
				{
					openTree( parentItem );
					tablesTree.expandItem( parentItem, true, false );
				}
			}

			public function createContextMenu() : void
			{
//				if ( !contextMenu )
//					contextMenu = new ContextMenu();
//				else
//					contextMenu.removeAllItems();
			}

			public function setNewContextSubMenu( items : Array ) : void
			{
				var item : TypeVO;

				var newItem : ContextMenuItem = new ContextMenuItem( resourceManager.getString( 'DataBase_General', "data_table_new_base" ) );

				var newMenu : NativeMenu = new NativeMenu();

				for each ( item in items )
				{
					var newSubItem : ContextMenuItem = new ContextMenuItem( item.displayName );
//					newSubItem.data = item;

					newSubItem.addEventListener( Event.SELECT, newSubItemSelectHandler, false, 0, true );

					if ( item.container != 3 )
					{
//						newMenu.addItem( newSubItem );
						if ( !typeTable )
							typeTable = item;
					}
					else
					{
//						newMenu.addItemAt( newSubItem, 0 );
						if ( !typeBase )
							typeBase = item;
					}
				}
//				newItem.submenu = newMenu;

//				contextMenu.addItem( newItem );
			}

			private function newSubItemSelectHandler( event : Event ) : void
			{
				//genericNewPageOrObject( event.target.data );
			}

			protected function newBase_clickHandler( event : MouseEvent ) : void
			{
				dispatchEvent( new DataTablesEvents( DataTablesEvents.NEW_BASE ) );
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:Rect width="100%"
			height="100%">
		<s:fill>
			<s:BitmapFill source="{VDOMImage.Fon_Texture}"
						  smooth="true"
						  fillMode="repeat"/>
		</s:fill>
	</s:Rect>


	<s:VGroup width="100%"
			  height="100%">
		<mx:Tree id="tablesTree"
				 width="100%"
				 height="100%"
				 doubleClickEnabled="true"
				 dataProvider="{ _dataBases }"
				 labelField="@name"
				 contentBackgroundAlpha="0"
				 itemRenderer="net.vdombox.ide.modules.dataBase.view.components.ItemRenderers.ObjectTreePanelItemRenderer"/>

		<s:HGroup width="100%"
				  height="40"
				  verticalAlign="middle"
				  horizontalAlign="center">
			<button:VDOMButton id="newBase"
							   icon="@Embed('/assets/add.png')"
							   label="{ resourceManager.getString( 'DataBase_General', 'data_table_new_base' ) }"
							   click="newBase_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>

</s:Group>
