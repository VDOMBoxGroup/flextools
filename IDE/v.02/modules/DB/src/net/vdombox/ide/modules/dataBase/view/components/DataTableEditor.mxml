<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
					  implements="net.vdombox.ide.modules.dataBase.interfaces.IEditor" 
					  xmlns:components="net.vdombox.components.*" xmlns:components1="net.vdombox.ide.modules.dataBase.view.components.*"
					  creationComplete="skinnablecontainer1_creationCompleteHandler(event)" xmlns:toolBoxComponents="net.vdombox.ide.modules.dataBase.view.components.toolBoxComponents.*" xmlns:button="net.vdombox.ide.common.view.components.button.*"
					  skinClass="spark.skins.spark.SkinnableContainerSkin">	
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.containers.HBox;
			import mx.controls.LinkButton;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.utils.UIDUtil;
			
			import net.vdombox.ide.common.events.EditorEvent;
			import net.vdombox.ide.common.model._vo.ObjectVO;
			import net.vdombox.ide.common.view.components.VDOMImage;
			import net.vdombox.ide.modules.dataBase.events.DataTablesEvents;
			import net.vdombox.ide.modules.dataBase.events.QueueEvent;
			import net.vdombox.ide.modules.dataBase.events.ToolBoxPanelEvent;
			import net.vdombox.ide.modules.dataBase.model.vo.StructureVO;
			import net.vdombox.ide.modules.dataBase.view.components.ItemRenderers.BoldSearchItemRenderer;
			import net.vdombox.ide.modules.dataBase.view.components.ItemRenderers.CheckBoxItemRenderers;
			import net.vdombox.ide.modules.dataBase.view.components.Queue.QueueManager;
			
			private var _objectVO : ObjectVO;
			
			private var manager : *;
			private var queue : QueueManager;
			private var queryResult:XML;
			private var tableStructureXML:XML;
			
			[Bindable]
			public var dataGridColumns:Array;
			
			
			private var dataGridColumnsProps:Array = [];
			private var currentPage:int;
			private var pages:Array = []; /* of XML */
			private var externalValue:String;
			private var thereAreGlobalChanges:Boolean = false;
			private var verticalScrollPositionStore:int = 0;
			private var editableValue:String = '';
			
			[Bindable]
			private var dataGridProvider:ArrayCollection = new ArrayCollection();
			private var dataGridProviderOld:Dictionary = new Dictionary( true );
			
			private var AMOUNT:int = 500;
			
			private var _oldState : String = "Result";
			
			[Bindable]
			private var totalRecords:int = 0;
			
			[Bindable]
			private var alertMessage:String = "";
			
			//private var defaultMessage : String = '<range><limit>' + AMOUNT.toString() + '</limit><offset>' + String(AMOUNT * currentPage) + '</offset></range>';
			
			private var endMessage : String = "</getdata>";
			
			
			private function get defaultMessage():String
			{
				return '<getdata><limit>' + AMOUNT.toString() + '</limit><offset>' + String(AMOUNT * currentPage) + '</offset>';;
			}

			private function get addMessage():String
			{
				if ( !toolBoxPanel )
					return "";
				else
				{
					var str : String = "";
					
					if ( toolBoxPanel.sortQuery )
						str += toolBoxPanel.sortQuery;
					
					if ( toolBoxPanel.queryString )
						str += toolBoxPanel.queryString;
					
					return str;
				}
			}

			public function get oldState():String
			{
				return _oldState;
			}

			public function set oldState(value:String):void
			{
				if ( value != "Progress" )
					_oldState = value;
			}

			public function get editorID() : String
			{
				return _objectVO ? _objectVO.id : "";
			}
			
			public function get editorName() : String
			{
				return _objectVO ? _objectVO.name : "";
			}
			
			public function get objectVO() : Object
			{
				return _objectVO ? _objectVO : null;
			}
			
			public function set objectVO( value : Object ) : void
			{
				_objectVO = value as ObjectVO;
			}
			
			// Table
			
			
			public function set externalManager( ref: * ) : void 
			{
				manager = ref;
				
				onLoadInit();
			}
			
			public function set value( value : String ) : void 
			{
				externalValue = value;
			}
			
			public function get value() : String 
			{
				if ( thereAreGlobalChanges )
					return "modified";
				else
					return externalValue;
			}
			
			private function onLoadInit() : void 
			{
				queue = new QueueManager( manager );
				
				/* Permanent event listener */
				queue.addEventListener( QueueEvent.QUEUE_INTERRUPT, errorHandler );	
				
				queue.reset();
				//queue.addRequest( UIDUtil.createUID(), "get_structure", "", structureResponseHandler, null) ;
				queue.addRequest( UIDUtil.createUID(), 'get_structure', '', structureResponseHandler, null);
				queue.addRequest( UIDUtil.createUID(), "get_count", "", countResponseHandler, null );
				
				/* Request first page */
				currentPage = 0;
				queue.addRequest(
					UIDUtil.createUID(),
					'get_data',
					defaultMessage + addMessage + endMessage, getPageResponseHandler, null );
				
				queue.addEventListener( QueueEvent.QUEUE_COMPLETE, queueOnLoadCompleteHandler );
				
				updateQueueLength();
				
				queue.execute();
				
				oldState = currentState;
				
				currentState = "Progress";
			}
			
			private function queueOnLoadCompleteHandler( message : String ) : void 
			{
				queue.removeEventListener( QueueEvent.QUEUE_COMPLETE, queueOnLoadCompleteHandler );
				currentState = oldState;
				updateQueueLength();
			}
			
			private function errorHandler( event : QueueEvent ) : void 
			{
				showMessage( event.message );
				updateQueueLength();	
			}
			
			private function showMessage( message : String ) : void 
			{
				alertMessage = message;
				//__alertArea.selectedChild = __message;
			}
			
			private function updateQueueLength() : void 
			{
				/*if (queue)
				__queueLenght.text = queue.length.toString();*/
			}
			
			private function structureResponseHandler( message : String ) : void 
			{
				try 
				{
					queryResult = new XML( message );
					tableStructureXML = new XML( queryResult.Result.tablestructure.table.header );
					
					setTableHeaders();
				}
				catch (err:Error) 
				{
					/* error04 */
					showMessage( "External Manager error (04): Can not convert result into XML or result error!" );
					queryResult = new XML();
				}
			}
			
			
			private function fieldSortNumber(field : String):Function
			{
				return function sortNumber(obj1:Object, obj2:Object):int
				{
					var num:Number = ((Number)(obj1[field]) - (Number)(obj2[field]));
					return (num > 0) ? 1 : ((num < 0) ? -1 : 0);

				}
			}
			
			private function setTableHeaders():void 
			{
				if ( !dataGridColumns )
				{	
					dataGridColumns = [];
					
					for each (var xmlHeader:XML in tableStructureXML.column) 
					{
						var _header:AdvancedDataGridColumn = new AdvancedDataGridColumn();
						var columnProps : StructureVO = new StructureVO( xmlHeader );
					
						_header.itemRenderer = new ClassFactory( BoldSearchItemRenderer );
						dataGridColumnsProps.push( columnProps );
						_header.dataField = xmlHeader.@name;
						
						if ( xmlHeader.@type == "INTEGER" || xmlHeader.@type == "REAL" )
							_header.sortCompareFunction = fieldSortNumber( xmlHeader.@name );
				
						dataGridColumns.push( _header );
					
					}
					dataTable.columns = dataGridColumns;
				}
				
				
			}
			
			private function countResponseHandler( message : String ) : void 
			{
				try 
				{
					queryResult = new XML( message );
					totalRecords = int( queryResult.Result );		
				}
				catch ( err : Error ) 
				{ 
					return;	
				}
			}
			
			private function getPageResponseHandler( message : String ) : void 
			{
				try 
				{
					queryResult = new XML( message );
					/*tableStructureXML = new XML( queryResult.Result.queryresult.table.header );
					
					setTableHeaders();*/
					pages[currentPage] = new XML(queryResult.Result.queryresult.table.data );
					
					showPageData();
				}
				catch ( err : Error ) 
				{
					queryResult = new XML();
				}
				
				pagesArea.enabled = true;
			}
			
			private function showPageData() : void 
			{
				if ( !pages[ currentPage ] ) 
				{
					getPageRequest();
					return;		
				}
				
				/* Show current page */
				dataGridProvider = new ArrayCollection();
				dataGridProviderOld = new Dictionary( true );
				
				var xmlRow:XML;
				var cellIndex:int;
				var tableRow:Object;
				
				for each ( xmlRow in pages[ currentPage ].row ) 
				{
					/* Create tableRow object */
					tableRow = new Object();
					cellIndex = 0;
					for each ( var xmlCell:XML in xmlRow.cell ) 
					{
						tableRow[ dataGridColumns[ cellIndex ].dataField ] = xmlCell.toString();
						cellIndex++;
					}
					
//					tableRow["fnew"] = false;
//					tableRow["changed"] = false;
					tableRow["GUID"] = UIDUtil.createUID(); 
					dataGridProvider.addItem( tableRow );
					dataGridProviderOld[ tableRow["id"] ] = ObjectUtil.copy( tableRow );
				}
				
				buildPagesTickets();

			}
			
			// FIXME: Большая запутанная функция.
			private function buildPagesTickets() : void 
			{
				/* (Re)Build pages tickets */
				var applyEvent : DataTablesEvents = new DataTablesEvents( DataTablesEvents.CHANGE_ROWS_IN_PAGE );
				applyEvent.content = AMOUNT.toString();
				dispatchEvent( applyEvent );
				
				pagesArea.removeAllChildren();
				
				var lastPageNumber:int = Math.floor(totalRecords / AMOUNT) - 1;
				if ( totalRecords % AMOUNT > 0 )
					lastPageNumber++;  			
				
				var fp:int;
				var lp:int;
				
				fp = currentPage - 3;
				lp = currentPage + 3;
				
				if ( fp < 0 && lp <= lastPageNumber ) 
				{
					lp += Math.abs(fp);
					if ( lp > lastPageNumber ) 
						lp = lastPageNumber;
					fp = 0;
				}
				
				if ( fp >= 0 && lp > lastPageNumber ) 
				{
					fp -= lp - lastPageNumber;
					if (fp < 0)
						fp = 0;
					lp = lastPageNumber;
				}
				
				if ( fp < 0 && lp > lastPageNumber ) 
				{
					fp = 0;
					lp = lastPageNumber;
				}
				
				
				if ( fp != 0 ) 
				{
					var leftShift:LinkButton = new LinkButton();
					leftShift.label = "1";
					leftShift.height = 18;
					leftShift.setStyle( "paddingLeft", 1 );
					leftShift.setStyle( "paddingRight", 1 );
					leftShift.addEventListener( MouseEvent.CLICK, pageClickHandler );
					pagesArea.addChild( leftShift );
					
					pageItem = new LinkButton();
					pageItem.label = '...';
					pageItem.height = 18;
					pageItem.setStyle( "paddingLeft", 1 );
					pageItem.setStyle( "paddingRight", 1 );
					pageItem.enabled = false;
					pagesArea.addChild( pageItem );
				}
				
				var pageItem:LinkButton;
				
				for ( var p:int = fp; p <= lp; p++ )  
				{
					pageItem = new LinkButton();
					pageItem.label = ( p + 1 ).toString();
					pageItem.height = 18;
					pageItem.setStyle( "paddingLeft", 1 );
					pageItem.setStyle( "paddingRight", 1 );
					if ( p == currentPage )
						pageItem.setStyle( "textDecoration", "underline" );
					else
						pageItem.addEventListener( MouseEvent.CLICK, pageClickHandler );
					
					pagesArea.addChild( pageItem );
				}
				
				if ( lp != lastPageNumber ) 
				{
					pageItem = new LinkButton();
					pageItem.label = '...';
					pageItem.height = 18;
					pageItem.setStyle( "paddingLeft", 1 );
					pageItem.setStyle( "paddingRight", 1 );
					pageItem.enabled = false;
					pagesArea.addChild( pageItem );
					
					var rightShift:LinkButton = new LinkButton();
					rightShift.label = String( lastPageNumber + 1 );
					rightShift.height = 18;
					rightShift.setStyle( "paddingLeft", 1 );
					rightShift.setStyle( "paddingRight", 1 );
					rightShift.addEventListener( MouseEvent.CLICK, pageClickHandler );
					pagesArea.addChild( rightShift );
				}
				
				
			}
			
			private function pageClickHandler( mEvent : MouseEvent ) : void 
			{
				/* Handle page number click */
				currentPage = int( mEvent.currentTarget.label ) - 1; 
				
				showPageData();
			}
			
			private function getPageRequest():void {
				
				pagesArea.enabled = false;
				
				queue.reset();
				queue.addRequest(
					UIDUtil.createUID(),
					'get_data',
					defaultMessage + addMessage + endMessage,
					getPageResponseHandler, null );
				
				updateQueueLength();
				
				queue.addEventListener( QueueEvent.QUEUE_COMPLETE, getPageQueueCompleteHandler );
				queue.execute();
				
				oldState = currentState;
				currentState = "Progress";
			}
			
			private function getPageQueueCompleteHandler( event : QueueEvent ) : void 
			{
				queue.removeEventListener( QueueEvent.QUEUE_COMPLETE, getPageQueueCompleteHandler );
				currentState = oldState;
				
				updateQueueLength();
			}
			
			protected function dataTable_keyDownHandler( event : KeyboardEvent ) : void
			{
				if ( event.keyCode == Keyboard.ENTER && dataTable.dataProvider.source[dataTable.dataProvider.length - 1] == dataTable.selectedItem )
				{
					addRowBtnClickHandler();
				}
			}
			
			private function addRowBtnClickHandler() : void 
			{
				/* Create tableRow object */
				var tableRow:Object = new Object();
				var columnIndex:int = 0;
				for each ( var dgColumn:AdvancedDataGridColumn in dataGridColumns ) 
				{
					if ( !dataGridColumnsProps[columnIndex].aincrement ) 
					{
						if ( dataGridColumnsProps[columnIndex].notnull )
							tableRow[ dgColumn.dataField ] = 'REQUIRED';
						else
							tableRow[ dgColumn.dataField ] = 'NULL';
					} 
					else 
					{
						tableRow[ dgColumn.dataField ] = 'NULL';
					}
					columnIndex++;
				}
				
				tableRow['GUID'] = UIDUtil.createUID();
				
				dataGridProvider.addItem( tableRow );
				
				dataTable.selectedIndex = dataGridProvider.length - 1;
				
				updateQueueLength();
			}
			
			protected function addRow_clickHandler( event : MouseEvent ) : void
			{
				addRowBtnClickHandler();
			}
			
			private function getXMLByRow( item : Object ) : XML
			{
				var requestXMLParam:XML = new XML( <data /> );
				var xmlRow:XML = new XML( <row id={item["id"]} /> );
				
				for each ( var dataGridCell:Object in dataGridColumns ) 
				{
					xmlRow.appendChild(
						<cell name={dataGridCell.dataField}>
						{item[dataGridCell.dataField]}
						</cell> );
				}
				
				requestXMLParam.appendChild( xmlRow );
				
				return requestXMLParam;
			}
			
			protected function commit_clickHandler( event : MouseEvent ) : void
			{
				var item : Object;
				var requestXMLParam:XML;
				
				for each ( item in dataGridProvider )
				{
					requestXMLParam = getXMLByRow( item );
					for  ( var tt : String in item )
					{
						
						if ( dataGridProviderOld[item["id"]] )
						{
							if ( dataGridProviderOld[item["id"]][tt] && item[tt] != dataGridProviderOld[item["id"]][tt] )
							{
								queue.addRequest(
									item['GUID'],
									'update_row',
									requestXMLParam.toXMLString() );
								
								break;
							}
						}
						else
						{
							queue.addRequest(
								item['GUID'],
								'add_row',
								requestXMLParam.toXMLString() );
							break;
						}
					}
				}
				
				if ( queue.length > 0 )
				{
					queue.addEventListener( QueueEvent.QUEUE_COMPLETE, queueCommitCompleteHandler );
					queue.execute();
				
					oldState = currentState;
					currentState = "Progress";
				
					updateQueueLength();
				}
			}
			
			private function queueCommitCompleteHandler( event : QueueEvent ) : void 
			{
				queue.removeEventListener( QueueEvent.QUEUE_COMPLETE, queueCommitCompleteHandler );
				
				updateTable();
			}
			
			public function updateTable() : void
			{
				updateQueueLength();
				
				/* ReRequest rows count */
				queue.reset();
				queue.addRequest( UIDUtil.createUID(), 'get_structure', '', structureResponseHandler, null);
				queue.addRequest( UIDUtil.createUID(), 'get_count', '', countResponseHandler, null );
				
				/* ReRequest page */
				queue.addRequest(
					UIDUtil.createUID(),
					'get_data',
					defaultMessage + addMessage + endMessage,
					refreshDataGrid, null);
				
				verticalScrollPositionStore = dataTable.verticalScrollPosition;
				
				queue.addEventListener( QueueEvent.QUEUE_COMPLETE, updateTableCompleteHandler );
				queue.execute();
				
				oldState = currentState;
				currentState = "Progress";
			}
			
			private function updateTableCompleteHandler( event : QueueEvent ) : void 
			{
				queue.removeEventListener( QueueEvent.QUEUE_COMPLETE, updateTableCompleteHandler );
				currentState = oldState;
			}
			
			private function refreshDataGrid( message : String ) : void 
			{
				getPageResponseHandler( message );
				dataTable.verticalScrollPosition = verticalScrollPositionStore;
			}
			
			protected function deleteRow_clickHandler( event : MouseEvent ) : void
			{				
				var selectedRowsArray : Array;
				
				try 
				{
					selectedRowsArray = dataTable.selectedItems;
					
					if ( !selectedRowsArray || selectedRowsArray.length == 0 )
						return;
				}
				catch ( err : Error ) 
				{
					return; 
				}
				
				for each ( var row : Object in selectedRowsArray )
				{
				
					var requestXMLParam:XML = new XML( <data><row id={row['id']} /></data> );
					
					queue.addRequest(
						row['GUID'].toString(),
						'delete_row',
						requestXMLParam.toXMLString() );
				
					dataGridProvider.removeItemAt( dataGridProvider.getItemIndex( row ) );
				
				}
				
				updateQueueLength();
			}
			
			protected function discard_clickHandler( event : MouseEvent = null ) : void
			{
				queue.reset();
				delete pages[currentPage];
				getPageRequest();
			}
			
			/*protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}*/
			
			public function applyClicked( amount : String ) : void
			{
				try 
				{
					AMOUNT = int(amount);
				}
				catch (err:Error) 
				{
					AMOUNT = 500;
				}
				
				AMOUNT = AMOUNT > 2000 ? 2000 : AMOUNT;
				AMOUNT = AMOUNT <= 0 ? 500 : AMOUNT;
				
				pages = [];
				currentPage = 0;
				getPageRequest();
			}
			
			protected function dataTable_doubleClickHandler(event:MouseEvent):void
			{
				addRowBtnClickHandler();
			}
			
			
			private function setHighlighted() : void
			{
				if ( toolBoxPanel.currentState == "SearchBox" )
				{
					search.highlighted = true;
					sort.highlighted = false;
					querySimple.highlighted = false;
				}
				else if ( toolBoxPanel.currentState == "SortQueryBox" )
				{
					search.highlighted = false;
					sort.highlighted = true;
					querySimple.highlighted = false;
				}
				else if ( toolBoxPanel.currentState == "QuerySimpleBuildBox" )
				{
					search.highlighted = false;
					sort.highlighted = false;
					querySimple.highlighted = true;
				}
			}
			
			protected function query_clickHandler(event:MouseEvent):void
			{
				currentState = "Query";
				setHighlighted();
			}
			
			protected function skinnablecontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				addEventListener( ToolBoxPanelEvent.SORT_CHANGE, sortChangeHandler, true, 0 , true );
				addEventListener( ToolBoxPanelEvent.QUERY_SIMPLE_CHANGE, querySimpleChangeHandler, true, 0 , true );
			}
			
			private function sortChangeHandler( event : ToolBoxPanelEvent ) : void
			{
				pages.splice( 0, pages.length );
				
				queue.reset();
				getPageRequest();
			}
			
			private function querySimpleChangeHandler( event : ToolBoxPanelEvent ) : void
			{
				pages.splice( 0, pages.length );
				
				queue.reset();
				getPageRequest();
			}
			
			protected function search_clickHandler(event:MouseEvent):void
			{
				if ( toolBoxPanel.currentState == 'SearchBox' )
				{
					currentState = "Result";
				}
				else
				{
					toolBoxPanel.currentState = 'SearchBox';
					setHighlighted();
				}
			}
			
			protected function sort_clickHandler(event:MouseEvent):void
			{
				if ( toolBoxPanel.currentState == 'SortQueryBox' )
				{
					currentState = "Result";
				}
				else
				{
					toolBoxPanel.currentState = 'SortQueryBox';
					setHighlighted();
				}
			}
			
			protected function querySimple_clickHandler(event:MouseEvent):void
			{
				if ( toolBoxPanel.currentState == 'QuerySimpleBuildBox' )
				{
					currentState = "Result";
				}
				else
				{
					toolBoxPanel.currentState = 'QuerySimpleBuildBox';
					setHighlighted();
				}
			}
			
			public function resetQueue() : void
			{
				queue.reset();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="Progress"/>
		<s:State name="Result"/>
		<s:State name="Query"/>
	</s:states>
	
	<s:VGroup width="100%" height="100%" gap="0">
		
		<s:Group width="100%" height="100%" >
			
			<components1:VDOMAdvancedDataGrid id="dataTable" dataProvider="{dataGridProvider}"
											  width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto"				 
											  draggableColumns="true" sortableColumns="true" doubleClickEnabled="true"
											  allowMultipleSelection="true" alpha.Result="1" alpha.Progress="0.4"
											  doubleClick="dataTable_doubleClickHandler(event)" borderVisible="false"/>
			
			<mx:Image source="@Embed('assets/spinner.swf')" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center"  includeIn="Progress" scaleContent="false" maintainAspectRatio="true"/>
			
		</s:Group>
		
		<s:Group width="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#F0F0F0"/>
				</s:fill>
			</s:Rect>
			
			<s:VGroup width="100%">
				
				<components1:ToolBoxPanel id="toolBoxPanel" width="100%" dataProvider="{dataTable}" includeIn="Query"/>
				
				<!--<s:HGroup width="100%" height="20" horizontalAlign="left" verticalAlign="middle" gap="0" paddingRight="0" paddingLeft="0">
					<s:Label text="{ resourceManager.getString( 'DataBase_General', 'data_table_editor_pages' ) }" />
					<mx:HBox id="pagesArea" width="100%" height="20" verticalAlign="middle" horizontalGap="0"
							 disabledOverlayAlpha="0.1" />
					<s:Label text="{ resourceManager.getString( 'DataBase_General', 'data_table_editor_records' ) }" fontSize="9" />
					<s:TextInput id="amount" borderColor="#999999" fontWeight="bold" height="20" fontSize="9" width="45" />
					<s:Button height="20" label="{ resourceManager.getString( 'DataBase_General', 'data_table_editor_apply' ) }" cornerRadius="0" click="button1_clickHandler(event)"/>
				</s:HGroup>-->
				
				<s:HGroup width="100%" height="50" verticalAlign="top" horizontalAlign="left" paddingLeft="10" paddingTop="5" paddingRight="10">
					
					<button:WorkAreaButton id="addRow" height="20" label="{ resourceManager.getString( 'DataBase_General', 'data_table_editor_add_row' ) }" 
										   icon="@Embed('assets/Add.png')" click="addRow_clickHandler(event)"/>
					
					<button:WorkAreaButton id="deleteRow" height="20" label="{ resourceManager.getString( 'DataBase_General', 'data_table_editor_delete_row' ) }" 
										   icon="@Embed('assets/delete.png')" click="deleteRow_clickHandler(event)"/>
					
					<button:WorkAreaButton id="commit" height="20" label="{ resourceManager.getString( 'DataBase_General', 'data_table_editor_commit' ) }" 
										   icon="@Embed('assets/commit.png')" click="commit_clickHandler(event)"/>
					
					<button:WorkAreaButton id="discard" height="20"  label="{ resourceManager.getString( 'DataBase_General', 'data_table_editor_discard' ) }" 
										   icon="@Embed('assets/discard.png')" click="discard_clickHandler(event)"/>
					
					<mx:Spacer width="100%"/>
					
					<mx:HBox id="pagesArea" width="100%" height="20" verticalAlign="middle" horizontalGap="0"
							 disabledOverlayAlpha="0.1" />
					
					<mx:Spacer width="100%"/>
					
					<button:WorkAreaButton id="additional"  height="20" label="Additional" 
										   icon="@Embed('assets/Additions.png')" click="query_clickHandler(event)" includeIn="Result"/>
					
					<button:WorkAreaButton id="querySimple"  height="20" label="Query Simple" click="querySimple_clickHandler(event)" includeIn="Query"/>
					
					<button:WorkAreaButton id="sort"  height="20" label="Sort" 
										   icon="@Embed('assets/sort.png')" click="sort_clickHandler(event)" includeIn="Query"/>
					
					<button:WorkAreaButton id="search"  height="20" label="Search" 
										   icon="@Embed('assets/search.png')" click="search_clickHandler(event)" includeIn="Query"/>
					
				</s:HGroup>
			</s:VGroup>
			
			
		</s:Group>
			
	</s:VGroup>
	
</s:SkinnableContainer>
