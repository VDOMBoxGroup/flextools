<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
					  implements="net.vdombox.ide.modules.dataBase.interfaces.IEditor" 
					  xmlns:components="net.vdombox.components.*">	
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.LinkButton;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			import mx.utils.UIDUtil;
			
			import net.vdombox.ide.common.vo.ObjectVO;
			import net.vdombox.ide.modules.dataBase.events.EditorEvent;
			import net.vdombox.ide.modules.dataBase.events.QueueEvent;
			import net.vdombox.ide.modules.dataBase.model.vo.StructureVO;
			import net.vdombox.ide.modules.dataBase.view.components.Queue.QueueManager;
			
			private var _objectVO : ObjectVO;
			
			private var manager : *;
			private var queue : QueueManager;
			private var queryResult:XML;
			private var tableStructureXML:XML;
			private var dataGridColumns:Array = [];
			private var dataGridColumnsProps:Array = [];
			private var currentPage:int;
			private var pages:Array = []; /* of XML */
			private var externalValue:String;
			private var thereAreGlobalChanges:Boolean = false;
			private var verticalScrollPositionStore:int = 0;
			private var editableValue:String = '';
			
			[Bindable]
			private var dataGridProvider:ArrayCollection = new ArrayCollection();
			
			private var AMOUNT:int = 10000;
			
			[Bindable]
			private var totalRecords:int = 0;
			
			[Bindable]
			private var alertMessage:String = "";
			
			public function get editorID() : String
			{
				return _objectVO ? _objectVO.id : "";
			}
			
			public function get editorName() : String
			{
				return _objectVO ? _objectVO.name : "";
			}
			
			public function get objectVO() : ObjectVO
			{
				return _objectVO ? _objectVO : null;
			}
			
			public function set objectVO( value : ObjectVO ) : void
			{
				_objectVO = value;
			}

			
			
			// Table
			
			
			public function set externalManager( ref: * ) : void 
			{
				manager = ref;
				
				onLoadInit();
			}
			
			public function set value( value : String ) : void 
			{
				externalValue = value;
			}
			
			public function get value() : String 
			{
				if ( thereAreGlobalChanges )
					return "modified";
				else
					return externalValue;
			}
			
			private function onLoadInit() : void 
			{
				queue = new QueueManager( manager );
				
				/* Permanent event listener */
				queue.addEventListener( QueueEvent.QUEUE_INTERRUPT, errorHandler );	
				
				queue.reset();
				//queue.addRequest( UIDUtil.createUID(), "get_structure", "", structureResponseHandler, null) ;
				queue.addRequest( UIDUtil.createUID(), "get_count", "", countResponseHandler, null );
				
				/* Request first page */
				currentPage = 0;
				queue.addRequest(
					UIDUtil.createUID(),
					'get_data',
					'<range><limit>' + AMOUNT.toString() + '</limit><offset>' + String(AMOUNT * currentPage) + '</offset></range>',
					getPageResponseHandler, null );
				
				queue.addEventListener( QueueEvent.QUEUE_COMPLETE, queueOnLoadCompleteHandler );
				
				updateQueueLength();
				
				queue.execute();
			}
			
			private function queueOnLoadCompleteHandler( message : String ) : void 
			{
				queue.removeEventListener( QueueEvent.QUEUE_COMPLETE, queueOnLoadCompleteHandler );
				//__alertArea.selectedChild = __normal;
				updateQueueLength();
			}
			
			private function errorHandler( event : QueueEvent ) : void 
			{
				showMessage( event.message );
				updateQueueLength();	
			}
			
			private function showMessage( message : String ) : void 
			{
				alertMessage = message;
				//__alertArea.selectedChild = __message;
			}
			
			private function updateQueueLength() : void 
			{
				/*if (queue)
				__queueLenght.text = queue.length.toString();*/
			}
			
			private function structureResponseHandler( message : String ) : void 
			{
				try 
				{
				/*	queryResult = new XML( message );
					tableStructureXML = new XML( queryResult.Result.tablestructure );
					
					setTableHeaders();*/
				}
				catch (err:Error) 
				{
					/* error04 */
					showMessage( "External Manager error (04): Can not convert result into XML or result error!" );
					queryResult = new XML();
				}
			}
			
			private function setTableHeaders():void 
			{
				
				dataGridColumns = [];
				for each (var xmlHeader:XML in tableStructureXML.column) 
				{
					var _header:DataGridColumn = new DataGridColumn();
					var columnProps : StructureVO = new StructureVO( xmlHeader );
					
					dataGridColumnsProps.push( columnProps );
					_header.dataField = xmlHeader.@name;
				
					dataGridColumns.push( _header );
					
				}
				dataTable.columns = dataGridColumns;
				
			}
			
			private function countResponseHandler( message : String ) : void 
			{
				try 
				{
					queryResult = new XML( message );
					totalRecords = int( queryResult.Result );		
				}
				catch ( err : Error ) 
				{ 
					return;	
				}
			}
			
			private function getPageResponseHandler( message : String ) : void 
			{
				try 
				{
					queryResult = new XML( message );
					tableStructureXML = new XML( queryResult.Result.queryresult.table.header );
					
					setTableHeaders();
					pages[currentPage] = new XML(queryResult.Result.queryresult.table.data );
					
					showPageData();
				}
				catch ( err : Error ) 
				{
					queryResult = new XML();
				}
				
				pagesArea.enabled = true;
			}
			
			private function showPageData() : void 
			{
				if ( !pages[ currentPage ] ) 
				{
					getPageRequest();
					return;		
				}
				
				/* Show current page */
				dataGridProvider = new ArrayCollection();
				for each ( var xmlRow:XML in pages[ currentPage ].row ) 
				{
					/* Create tableRow object */
					var tableRow:Object = new Object();
					var cellIndex:int = 0;
					for each ( var xmlCell:XML in xmlRow.cell ) 
					{
						tableRow[ dataGridColumns[ cellIndex ].dataField ] = xmlCell.toString();
						cellIndex++;
					}
					
					tableRow["fnew"] = false;
					tableRow["changed"] = false;
					tableRow["GUID"] = UIDUtil.createUID(); 
					dataGridProvider.addItem( tableRow );
				}
				
				buildPagesTickets();

			}
			
			private function buildPagesTickets() : void 
			{
				/* (Re)Build pages tickets */
				amount.text = AMOUNT.toString();
				pagesArea.removeAllChildren();
				
				var lastPageNumber:int = Math.floor(totalRecords / AMOUNT) - 1;
				if ( totalRecords % AMOUNT > 0 )
					lastPageNumber++;  			
				
				var fp:int;
				var lp:int;
				
				fp = currentPage - 5;
				lp = currentPage + 5;
				
				if ( fp < 0 && lp <= lastPageNumber ) 
				{
					lp += Math.abs(fp);
					if ( lp > lastPageNumber ) 
						lp = lastPageNumber;
					fp = 0;
				}
				
				if ( fp >= 0 && lp > lastPageNumber ) 
				{
					fp -= lp - lastPageNumber;
					if (fp < 0)
						fp = 0;
					lp = lastPageNumber;
				}
				
				if ( fp < 0 && lp > lastPageNumber ) 
				{
					fp = 0;
					lp = lastPageNumber;
				}
				
				
				if ( fp != 0 ) 
				{
					var leftShift:LinkButton = new LinkButton();
					leftShift.label = "1";
					leftShift.height = 18;
					leftShift.setStyle( "paddingLeft", 1 );
					leftShift.setStyle( "paddingRight", 1 );
					leftShift.addEventListener( MouseEvent.CLICK, pageClickHandler );
					pagesArea.addChild( leftShift );
					
					pageItem = new LinkButton();
					pageItem.label = '...';
					pageItem.height = 18;
					pageItem.setStyle( "paddingLeft", 1 );
					pageItem.setStyle( "paddingRight", 1 );
					pageItem.enabled = false;
					pagesArea.addChild( pageItem );
				}
				
				var pageItem:LinkButton;
				
				for ( var p:int = fp; p <= lp; p++ )  
				{
					pageItem = new LinkButton();
					pageItem.label = ( p + 1 ).toString();
					pageItem.height = 18;
					pageItem.setStyle( "paddingLeft", 1 );
					pageItem.setStyle( "paddingRight", 1 );
					if ( p == currentPage )
						pageItem.setStyle( "textDecoration", "underline" );
					else
						pageItem.addEventListener( MouseEvent.CLICK, pageClickHandler );
					
					pagesArea.addChild( pageItem );
				}
				
				if ( lp != lastPageNumber ) 
				{
					pageItem = new LinkButton();
					pageItem.label = '...';
					pageItem.height = 18;
					pageItem.setStyle( "paddingLeft", 1 );
					pageItem.setStyle( "paddingRight", 1 );
					pageItem.enabled = false;
					pagesArea.addChild( pageItem );
					
					var rightShift:LinkButton = new LinkButton();
					rightShift.label = String( lastPageNumber + 1 );
					rightShift.height = 18;
					rightShift.setStyle( "paddingLeft", 1 );
					rightShift.setStyle( "paddingRight", 1 );
					rightShift.addEventListener( MouseEvent.CLICK, pageClickHandler );
					pagesArea.addChild( rightShift );
				}
				
				commit.enabled = false;
			}
			
			private function pageClickHandler( mEvent : MouseEvent ) : void 
			{
				/* Handle page number click */
				currentPage = int( mEvent.currentTarget.label ) - 1; 
				showPageData();
			}
			
			private function getPageRequest():void {
				
				pagesArea.enabled = false;
				
				queue.reset();
				queue.addRequest(
					UIDUtil.createUID(),
					'get_data',
					'<range><limit>' + AMOUNT.toString() + '</limit><offset>' + String( AMOUNT * currentPage ) + '</offset></range>',
					getPageResponseHandler, null );
				
				updateQueueLength();
				
				queue.addEventListener( QueueEvent.QUEUE_COMPLETE, getPageQueueCompleteHandler );
				queue.execute();
			}
			
			private function getPageQueueCompleteHandler( event : QueueEvent ) : void 
			{
				queue.removeEventListener( QueueEvent.QUEUE_COMPLETE, getPageQueueCompleteHandler );
				updateQueueLength();
			}
			
			protected function dataTable_keyDownHandler( event : KeyboardEvent ) : void
			{
				if ( event.keyCode == Keyboard.ENTER && dataTable.dataProvider.source[dataTable.dataProvider.length - 1] == dataTable.selectedItem )
				{
					addRowBtnClickHandler();
				}
			}
			
			private function addRowBtnClickHandler() : void 
			{
				/* Create tableRow object */
				var tableRow:Object = new Object();
				var columnIndex:int = 0;
				for each ( var dgColumn:DataGridColumn in dataGridColumns ) 
				{
					if ( dataGridColumnsProps[columnIndex].autoincrement.toLowerCase() == 'false' ) 
					{
						if ( dataGridColumnsProps[columnIndex].notnull.toLowerCase() == 'true' )
							tableRow[ dgColumn.dataField ] = 'REQUIRED';
						else
							tableRow[ dgColumn.dataField ] = 'NULL';
					} 
					else 
					{
						tableRow[ dgColumn.dataField ] = 'NULL';
					}
					columnIndex++;
				}
				
				tableRow['fnew'] = true;
				tableRow['changed'] = false;
				tableRow['GUID'] = UIDUtil.createUID();
				
				/* Construct request */
				var requestXMLParam:XML = new XML( <data /> );
				var xmlRow:XML = new XML( <row id='NULL' /> );						
				for each ( var dataGridCell:Object in dataGridColumns ) 
				{
					xmlRow.appendChild(
						<cell name={dataGridCell.dataField}>
						{tableRow[dataGridCell.dataField]}
						</cell> );
				}
				requestXMLParam.appendChild( xmlRow );
				
				queue.addRequest(
					tableRow['GUID'],
					'add_row',
					requestXMLParam.toXMLString() );
				
				dataGridProvider.addItem( tableRow );
				
				dataTable.selectedIndex = dataGridProvider.length - 1;
				commit.enabled = true;
				
				updateQueueLength();
			}
			
			protected function addRow_clickHandler( event : MouseEvent ) : void
			{
				addRowBtnClickHandler();
			}
			
			protected function commit_clickHandler( event : MouseEvent ) : void
			{
				queue.addEventListener( QueueEvent.QUEUE_COMPLETE, queueCommitCompleteHandler );
				//__alertArea.selectedChild = __inProgress;
				queue.execute();
				
				updateQueueLength();
			}
			
			private function queueCommitCompleteHandler( event : QueueEvent ) : void 
			{
				queue.removeEventListener( QueueEvent.QUEUE_COMPLETE, queueCommitCompleteHandler );
				commit.enabled = false;
				//__alertArea.selectedChild = __normal;
				updateQueueLength();
				
				/* ReRequest rows count */
				queue.reset();
				queue.addRequest( UIDUtil.createUID(), 'get_count', '', countResponseHandler, null );
				
				/* ReRequest page */
				queue.addRequest(
					UIDUtil.createUID(),
					'get_data',
					'<range><limit>' + AMOUNT.toString() + '</limit><offset>' + String(AMOUNT * currentPage) + '</offset></range>',
					refreshDataGrid, null);
				
				verticalScrollPositionStore = dataTable.verticalScrollPosition;
				
				queue.execute();
			}
			
			private function refreshDataGrid( message : String ) : void 
			{
				getPageResponseHandler( message );
				dataTable.verticalScrollPosition = verticalScrollPositionStore;
			}
			
			private function itemEditBegin( event : DataGridEvent ) : void 
			{
				editableValue = dataGridProvider[ event.rowIndex ][ dataGridColumns[ event.columnIndex ].dataField ].toString();
			}
			
			private function itemEditEnd( event : DataGridEvent ) : void 
			{
				if ( event.currentTarget.itemEditorInstance.text != editableValue ) 
				{
					/* check entered data over database integrity */
					if ( dataGridColumnsProps[ event.columnIndex ][ 'autoincrement' ].toLowerCase() == 'true' ) 
					{
						event.currentTarget.itemEditorInstance.text = editableValue;
					} 
					else 
					{
						if ( StringUtil.trim( event.currentTarget.itemEditorInstance.text ) == '' ) 
						{
							if ( dataGridColumnsProps[ event.columnIndex ][ 'notnull' ].toLowerCase() == 'true' )
								event.currentTarget.itemEditorInstance.text = 'REQUIRED';
							else
								event.currentTarget.itemEditorInstance.text = '';
						}
					}
					
					/* Apply changed data */		
					dataGridProvider[ event.rowIndex ][ dataGridColumns[ event.columnIndex ].dataField ] = event.currentTarget.itemEditorInstance.text;
					
					/* Construct request */
					var requestXMLParam:XML = new XML( <data /> );
					var xmlRow:XML = new XML( <row id={dataGridProvider[event.rowIndex]['id']} /> );						
					for each (var dataGridCell:Object in dataGridColumns) {
						xmlRow.appendChild(
							<cell name={dataGridCell.dataField}>
							{dataGridProvider[event.rowIndex][dataGridCell.dataField]}
							</cell> );
					}
					
					requestXMLParam.appendChild( xmlRow );
					
					/* Apply reqest to the queue */
					if ( dataGridProvider[ event.rowIndex ][ 'changed' ] )
					{
						if ( dataGridProvider[ event.rowIndex ][ 'fnew' ] ) {
							
							queue.updateRequest(
								dataGridProvider[event.rowIndex]['GUID'],
								'add_row',
								requestXMLParam.toXMLString() );
						} 
						else 
						{
							queue.updateRequest(
								dataGridProvider[event.rowIndex]['GUID'],
								'update_row',
								requestXMLParam.toXMLString() );
						}
					} 
					else 
					{
						/* If new changed item appeared... */
						dataGridProvider[ event.rowIndex ][ 'changed' ] = true;
						commit.enabled = true;
						
						if ( dataGridProvider[ event.rowIndex ][ 'fnew' ] ) 
						{
							queue.updateRequest(
								dataGridProvider[event.rowIndex]['GUID'],
								'add_row',
								requestXMLParam.toXMLString() );
						} 
						else 
						{
							queue.addRequest(
								dataGridProvider[event.rowIndex]['GUID'],
								'update_row',
								requestXMLParam.toXMLString() );
						}
					}
				}
				
				updateQueueLength();
			}
			
			protected function deleteRow_clickHandler( event : MouseEvent ) : void
			{
				var selectedRowIndex:int = 0;
				
				try 
				{
					selectedRowIndex = dataTable.selectedIndex;
					if ( selectedRowIndex == -1 )
						return;
				}
				catch ( err : Error ) 
				{
					return; 
				}
				
				if ( dataGridProvider[ selectedRowIndex ][ 'fnew' ] ) 
				{
					queue.removeRequest(dataGridProvider[selectedRowIndex]['GUID']);
				} 
				else 
				{
					var requestXMLParam:XML = new XML( <data><row id={dataGridProvider[selectedRowIndex]['id']} /></data> );
					
					queue.addRequest(
						dataGridProvider[selectedRowIndex]['GUID'].toString(),
						'delete_row',
						requestXMLParam.toXMLString() );
				}
				
				dataGridProvider.removeItemAt( selectedRowIndex );
				
				commit.enabled = true;
				
				updateQueueLength();
			}
			
			protected function discard_clickHandler( event : MouseEvent ) : void
			{
				queue.reset();
				delete pages[currentPage];
				getPageRequest();
			}
			
			private function amountApplyBtnClickHandler() : void 
			{
				try 
				{
					AMOUNT = int(amount.text);
				}
				catch (err:Error) 
				{
					AMOUNT = 500;
				}
				
				AMOUNT = AMOUNT > 2000 ? 2000 : AMOUNT;
				AMOUNT = AMOUNT <= 0 ? 500 : AMOUNT;
				
				pages = [];
				currentPage = 0;
				getPageRequest();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
			<mx:DataGrid id="dataTable" dataProvider="{dataGridProvider}"
						 itemEditBegin="itemEditBegin(event)" itemEditEnd="itemEditEnd(event)"
						 width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto"
						 editable="true"
						 doubleClickEnabled="true" keyDown="dataTable_keyDownHandler(event)"
						 draggableColumns="false" sortableColumns="false" />
		<s:Group width="100%" height="50">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#F0F0F0"/>
				</s:fill>
			</s:Rect>
			
			<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="left" paddingLeft="10">
				
				<s:Button id="addRow" height="20" label="add row" click="addRow_clickHandler(event)"/>
				
				<s:Button id="deleteRow" height="20" label="delete row" click="deleteRow_clickHandler(event)"/>
				
				<s:Button id="commit" height="20" enabled="false" label="commit" click="commit_clickHandler(event)"/>
				
				<s:Button id="discard" height="20" enabled="{commit.enabled}" label="discard" click="discard_clickHandler(event)"/>
				
				<mx:HBox width="100%" height="20" horizontalAlign="left" verticalAlign="middle" horizontalGap="0" paddingRight="0" paddingLeft="0" visible="false">
					<mx:Label text="Pages:" />
					<mx:HBox id="pagesArea" width="100%" height="20" verticalAlign="middle" horizontalGap="0" enabled="{!commit.enabled}"
							 disabledOverlayAlpha="0.1" />
					<mx:Label text="Records per page:" fontSize="9" />
					<mx:TextInput id="amount" borderColor="#999999" borderStyle="solid" height="20" fontSize="9" width="45" enabled="{!commit.enabled}" />
					<mx:Button height="20" label="apply" cornerRadius="0" click="{amountApplyBtnClickHandler();}" enabled="{!commit.enabled}" />
				</mx:HBox>
				
			</s:HGroup>
		</s:Group>
			
	</s:VGroup>
	
</s:SkinnableContainer>
