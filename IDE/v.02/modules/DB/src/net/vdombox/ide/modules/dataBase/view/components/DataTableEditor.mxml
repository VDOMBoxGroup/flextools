<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
					  preinitialize="preinitializeHandler(event)"
					  implements="net.vdombox.ide.modules.dataBase.interfaces.IEditor">	
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.utils.UIDUtil;
			
			import net.vdombox.ide.common.vo.ObjectVO;
			import net.vdombox.ide.modules.dataBase.events.EditorEvent;
			import net.vdombox.ide.modules.dataBase.events.QueueEvent;
			import net.vdombox.ide.modules.dataBase.view.components.Queue.QueueManager;
			
			[Bindable]
			private var _dataGridProvider:ArrayCollection = new ArrayCollection();
			private var _objectVO : ObjectVO;
			
			
			private var manager : *;
			private var queue : QueueManager;
			private var queryResult:XML;
			private var tableStructureXML:XML;
			private var dataGridColumns:Array = [];
			private var dataGridColumnsProps:Array = [];
			private var currentPage:int;
			private var pages:Array = []; /* of XML */
			
			private var AMOUNT:int = 500;
			
			[Bindable]
			private var totalRecords:int = 0;
			
			[Bindable]
			private var alertMessage:String = "";
			
			public function get editorID() : String
			{
				return _objectVO ? _objectVO.id : "";
			}
			
			public function get editorName() : String
			{
				return _objectVO ? _objectVO.name : "";
			}
			
			public function get objectVO() : ObjectVO
			{
				return _objectVO ? _objectVO : null;
			}
			
			public function set objectVO( value : ObjectVO ) : void
			{
				_objectVO = value;
			}
			
			protected function preinitializeHandler(event:FlexEvent):void
			{
				addHandlers();
			}
			
			private function addHandlers() : void
			{
				addEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler, false, 0, true );
			}
			
			private function removeHandlers() : void
			{
				removeEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler );
			}
			
			private function removedFromStageHandler( event : Event ) : void
			{
				dispatchEvent( new EditorEvent( EditorEvent.REMOVED ) );
				
				removeHandlers();
			}
			
			
			// Table
			
			
			public function set externalManager(ref:*) : void 
			{
				manager = ref;
				
				onLoadInit();
			}
			
			private function onLoadInit():void 
			{
				queue = new QueueManager(manager);
				
				/* Permanent event listener */
				queue.addEventListener(QueueEvent.QUEUE_INTERRUPT, errorHandler);	
				
				queue.reset();
				queue.addRequest(UIDUtil.createUID(), "get_structure", "", structureResponseHandler, structureResponseHandler);
				queue.addRequest(UIDUtil.createUID(), "get_count", "", countResponseHandler, null);
				
				/* Request first page */
				currentPage = 0;
				queue.addRequest(
					UIDUtil.createUID(),
					'get_data',
					'<range><limit>' + AMOUNT.toString() + '</limit><offset>' + String(AMOUNT * currentPage) + '</offset></range>',
					getPageResponseHandler, null);
				
				queue.addEventListener(QueueEvent.QUEUE_COMPLETE, queueOnLoadCompleteHandler);
				
				updateQueueLength();
				
				trace (':: Executing queue (' + String(queue.length) + ')');
				queue.execute();
			}
			
			private function queueOnLoadCompleteHandler(message:String):void {
				trace (':: Queue complete handler recieved');
				
				queue.removeEventListener(QueueEvent.QUEUE_COMPLETE, queueOnLoadCompleteHandler);
				//__alertArea.selectedChild = __normal;
				updateQueueLength();
			}
			
			private function errorHandler(event:QueueEvent) : void 
			{
				showMessage(event.message);
				updateQueueLength();	
			}
			
			private function showMessage(message:String) : void 
			{
				alertMessage = message;
				//__alertArea.selectedChild = __message;
			}
			
			private function updateQueueLength() : void 
			{
				/*if (queue)
				__queueLenght.text = queue.length.toString();*/
			}
			
			private function structureResponseHandler(message:String) : void 
			{
				
				try 
				{
					queryResult = new XML(message);
					tableStructureXML = new XML(queryResult.Result.tablestructure);
					
					setTableHeaders();
				}
				catch (err:Error) 
				{
					/* error04 */
					showMessage("External Manager error (04): Can not convert result into XML or result error!");
					queryResult = new XML();
				}
			}
			
			private function setTableHeaders():void 
			{
				
				dataGridColumns = [];
				for each (var xmlHeader:XML in tableStructureXML.table.header.column) 
				{
					var _header:DataGridColumn = new DataGridColumn();
					var columnProps:Object = {
						id:xmlHeader.@id.toString(),
							name:xmlHeader.@name.toString(),
							type:xmlHeader.@type.toString(),
							notnull:xmlHeader.@notnull.toString(),
							primary:xmlHeader.@primary.toString(),
							autoincrement:xmlHeader.@autoincrement.toString(),
							unique:xmlHeader.@unique.toString()
							//defvalue:xmlHeader.@default.toString() 
					};
					
					/* Checking recieved data */
					if (columnProps.autoincrement == "") columnProps.autoincrement = "False";
					if (columnProps.notnull == "") columnProps.notnull = "False";
					if (columnProps.primary == "") columnProps.primary = "False";
					if (columnProps.type == "")	columnProps.type = "TEXT";
					if (columnProps.unique == "") columnProps.unique = "False";
					
					dataGridColumnsProps.push(columnProps);
					_header.dataField = xmlHeader.@name;
				
					dataGridColumns.push(_header);
					
				}
				dataTable.columns = dataGridColumns;
				
			}
			
			private function countResponseHandler(message:String):void {
				trace (':: Count Response handler executed');
				try {
					queryResult = new XML(message);
					totalRecords = int(queryResult.Result);		
				}
				catch (err:Error) { return;	}
			}
			
			private function getPageResponseHandler(message:String):void {
				trace (':: Get page Response handler');
				
				try {
					queryResult = new XML(message);
					pages[currentPage] = new XML(queryResult.Result.queryresult.table.data);
					
					showPageData();
				}
				catch (err:Error) {
					trace (':: Exception 01: ' + err.message);	
					queryResult = new XML();
				}
				
				//__pagesArea.enabled = true;
			}
			
			private function showPageData():void {
				trace (':: Show page data function executed');
				if (!pages[currentPage]) {
					getPageRequest();
					return;		
				}
			}
			
			private function getPageRequest():void {
				trace (':: Adding Get Page request');
				
				//__pagesArea.enabled = false;
				
				queue.reset();
				queue.addRequest(
					UIDUtil.createUID(),
					'get_data',
					'<range><limit>' + AMOUNT.toString() + '</limit><offset>' + String(AMOUNT * currentPage) + '</offset></range>',
					getPageResponseHandler, null);
				
				updateQueueLength();
				
				trace (':: Executing Get Page request');
				queue.addEventListener(QueueEvent.QUEUE_COMPLETE, getPageQueueCompleteHandler);
				queue.execute();
			}
			
			private function getPageQueueCompleteHandler(event:QueueEvent):void {
				queue.removeEventListener(QueueEvent.QUEUE_COMPLETE, getPageQueueCompleteHandler);
				updateQueueLength();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:DataGrid id="dataTable"
				 width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto"
				 editable="true"
				 doubleClickEnabled="true" 
				  draggableColumns="false" sortableColumns="false" />
</s:SkinnableContainer>
