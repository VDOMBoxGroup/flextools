<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  height="25"
					  width="100%"
					  minWidth="225"
					  contentBackgroundAlpha="0" 
					  contextMenu="mxtreeitemrenderer1_contextMenuHandler(event)" xmlns:view="net.vdombox.view.*" xmlns:view1="net.vdombox.ide.common.view.*" xmlns:components="net.vdombox.ide.common.view.components.*">

	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>

	<fx:Script>
		<![CDATA[
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.XMLListCollection;
			import mx.controls.Tree;
			import mx.events.FlexEvent;
			import mx.events.ResourceEvent;
			
			import net.vdombox.ide.common.events.ResourceVOEvent;
			import net.vdombox.ide.common.model._vo.ResourceVO;
			import net.vdombox.ide.modules.wysiwyg.events.ObjectsTreePanelEvent;
			
			import spark.components.Button;

			private var _eyeOpened : Boolean  = true;

			private var _rendererID : String;

			private var _resourceID : String;

			private var _resourceVO : ResourceVO;

			private var dataChanged : Boolean = false;

			private var loader : Loader;

			/**
			 *  Self data
			 * 
			 */ 
			private var _data : XML;
			
			private var _contextMenu : ContextMenu = new ContextMenu();

			override public function set data( value : Object ) : void
			{
				super.data = value;

				dataChanged = true
				_data = value as XML;
				
				if ( _data )
					createContextMenu();
			}
			
			

			public function get eyeOpened() : Boolean
			{
				return _eyeOpened;
			}



			public function get rendererID() : String
			{
				return _rendererID;
			}

			public function get resourceID() : String
			{
				return _resourceID;
			}

			public function set resourceVO(value:ResourceVO) : void
			{
				_resourceVO = value;

				if ( !value.data )
				{
					BindingUtils.bindSetter( dataLoaded, value, "data", false, true );
					return;
				}

				dataLoaded();
			}

			override public function validateProperties() : void
			{
				super.validateProperties();

				if ( !dataChanged )
					return;

				dataChanged = false;

//				componentIcon.source = null;

				if ( !_data )
					return

				_resourceID = _data.@iconID;
				_rendererID = _data.@id;
				
				
				

				// if can content an eye
				if ( _data.@visible[ 0 ] )
				{
					eyesGroup.visible = true;
					groupContent.left = 20;

					setEyeState( _data.@visible == "true");
				}
				else
				{
					eyesGroup.visible = false;
					groupContent.left = -2;
				}
				
				if ( !_resourceVO ||( _resourceVO && _resourceVO.id != _resourceID ) )
					dispatchEvent( new ResourceVOEvent( ResourceVOEvent.GET_RESOURCE_REQUEST));
			}
			
			private function createContextMenu() : void
			{
				_contextMenu.removeAllItems();
				
				var copyItem : ContextMenuItem = new ContextMenuItem(resourceManager.getString( 'Wysiwyg_General', 'contextMenu_copy' ));
				copyItem.addEventListener( Event.SELECT, copyContextMenuHandler, false, 0, true );
				_contextMenu.addItem( copyItem );
				
				var pasteItem : ContextMenuItem = new ContextMenuItem(resourceManager.getString( 'Wysiwyg_General', 'contextMenu_paste' ));
				pasteItem.addEventListener( Event.SELECT, pasteContextMenuHandler, false, 0, true );
				_contextMenu.addItem( pasteItem );
				
				var bufferContent : String = Clipboard.generalClipboard.getData( ClipboardFormats.TEXT_FORMAT ) as String;
				
				if ( bufferContent && ( bufferContent.slice(0, 13) != "Vlt+VDOMIDE2+" || bufferContent.split(' ').length != 4 ) )
				{
					pasteItem.enabled = false;
				}
				
				var deleteItem : ContextMenuItem = new ContextMenuItem(resourceManager.getString( 'Wysiwyg_General', 'contextMenu_delete' ));
				deleteItem.addEventListener( Event.SELECT, deleteContextMenuHandler, false, 0, true );
				_contextMenu.addItem( deleteItem );
			}

			private function dataLoaded( object : Object = null ) : void
			{
				loader = new Loader();
				loader.contentLoaderInfo.addEventListener( Event.COMPLETE, onBytesLoaded );
				loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, onBytesLoaded );

				try
				{
					loader.loadBytes( _resourceVO.data );

				}
				catch ( error : Error )
				{
					// FIXME Сделать обработку исключения если не грузится изображение
				}
			}

			private function eyeClickHandler( event : Event ) : void
			{
				// invert state of eye
				setEyeState(!_eyeOpened);

				dispatchEvent(  new ObjectsTreePanelEvent( ObjectsTreePanelEvent.EYE_CHANGED ) );
			}

			private function onBytesLoaded( event : Event ) : void
			{
				loader = null;

				if ( event.type == IOErrorEvent.IO_ERROR )
					return;

				componentIcon.source = Bitmap( event.target.content )
			}

			private function setEyeState( value : Boolean ) : void
			{
				_eyeOpened = value;

				eyes.setOpenState( _eyeOpened );

				// 
				if ( _data.@visible[ 0 ] )
					_data.@visible = _eyeOpened
			}
			
			protected function mxtreeitemrenderer1_contextMenuHandler(event:MouseEvent):void
			{
				createContextMenu();
				_contextMenu.display( this.stage, event.stageX, event.stageY );
			}
			
			private function deleteContextMenuHandler( event : Event ) : void
			{
				var deleteEvent : ObjectsTreePanelEvent = new ObjectsTreePanelEvent( ObjectsTreePanelEvent.DELETE );
				deleteEvent.objectID = _data.@id;
				var xmlListCollection : XMLListCollection = (owner as Tree).dataProvider as XMLListCollection;
				var xml : XML;
				for each ( xml in xmlListCollection )
				{
					var xmlList : XMLList = xml..object;
					var xml2 : XML;
					for each ( xml2 in xmlList )
					{
						if ( xml2.@id == _data.@id )
							deleteEvent.pageID = xml.@id;
					}
				}
				dispatchEvent( deleteEvent );
			}
			
			private function copyContextMenuHandler( event : Event ) : void
			{
				var copyEvent : ObjectsTreePanelEvent = new ObjectsTreePanelEvent( ObjectsTreePanelEvent.COPY );
				copyEvent.objectID = _data.@id;
				var xmlListCollection : XMLListCollection = (owner as Tree).dataProvider as XMLListCollection;
				var xml : XML;
				for each ( xml in xmlListCollection )
				{
					var xmlList : XMLList = xml..object;
					var xml2 : XML;
					for each ( xml2 in xmlList )
					{
						if ( xml2.@id == _data.@id )
							copyEvent.pageID = xml.@id;
					}
				}
				dispatchEvent( copyEvent );
			}
			
			private function pasteContextMenuHandler( event : Event ) : void
			{
				var pasteEvent : ObjectsTreePanelEvent = new ObjectsTreePanelEvent( ObjectsTreePanelEvent.PASTE );
				pasteEvent.objectID = _data.@id;
				
				var xmlListCollection : XMLListCollection = (owner as Tree).dataProvider as XMLListCollection;
				var xml : XML;
				for each ( xml in xmlListCollection )
				{
					var xmlList : XMLList = xml..object;
					var xml2 : XML;
					for each ( xml2 in xmlList )
					{
						if ( xml2.@id == _data.@id )
							pasteEvent.pageID = xml.@id;
					}
				}
				
				if ( !pasteEvent.pageID )
					pasteEvent.pageID = pasteEvent.objectID;
				
				dispatchEvent( pasteEvent );
			}
			
		]]>
	</fx:Script>

	<s:Rect left="-2" width="100%" top="-2" bottom="-2">
		<s:fill>
			<s:SolidColor id="rectColor"
						  color.normal="#3A3A3A"
						  color.hovered="#00000A"
						  alpha.hovered="0.8"
						  color.selected="#00000A" />
		</s:fill>
	</s:Rect>

	<s:Group id="groupContent"
			 left="20"
			 width="100%"
			 top="-2"
			 minWidth="200"
			 bottom="-2">

		<s:HGroup  width="100%" height="100%" verticalAlign="middle">

			<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100">
				<s:fill>
					<s:SolidColor color="#585858" />
				</s:fill>
			</s:Rect>

			<s:Group id="disclosureGroup">
				<s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}" />
			</s:Group>

			<s:BitmapImage id="componentIcon" />

			<s:TextInput id="labelField"
						 color="#FFFFFF"
						 text="{treeListData.label}"
						 paddingTop="2"
						 editable="false"
						 width="100%"
						 borderVisible="false" selectable="false"/>

		</s:HGroup>

	</s:Group>

	<s:Group id="eyesGroup"
			 top="-2"
			 bottom="-2"
			 left="-2"
			 width="22"
			 height="100%"
			 mouseDown="{ eyeClickHandler(event); event.stopImmediatePropagation() }">

		<s:Rect width="100%" top="0" bottom="-2">
			<s:fill>
				<s:SolidColor color="#585858" />
			</s:fill>
		</s:Rect>

		<s:VGroup width="22" height="100%" verticalAlign="middle" horizontalAlign="center">
			<components:EyeImage id="eyes" width="16" height="14" />
		</s:VGroup>

	</s:Group>

	<s:Line top="-2" left="-2" width="100%">
		<s:stroke>
			<s:SolidColorStroke color="#FFFFFF" alpha="0.5" weight="1" />
		</s:stroke>
	</s:Line>

	<s:Line bottom="-2" left="-2" width="100%">
		<s:stroke>
			<s:SolidColorStroke color="#000000" alpha="0.5" weight="1" />
		</s:stroke>
	</s:Line>

</s:MXTreeItemRenderer>
