<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				
				minHeight="23" width="100%"
				creationComplete="creationCompleteHandler()">

	<fx:Script>
		<![CDATA[
			import net.vdombox.ide.modules.wysiwyg.view.components.AttributeValidator;
			import mx.events.ListEvent;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.ValidationResultEvent;

			import net.vdombox.ide.common.vo.AttributeDescriptionVO;
			import net.vdombox.ide.common.vo.AttributeVO;

			[Bindable]
			private var _attributeVO : AttributeVO;
			
			[Bindable]
			private var displayName : String;
			
			[Bindable]
			private var help : String;
			
			private var _attributeDescriptionVO : AttributeDescriptionVO;

			private var codeInterfaceRE : RegExp = /^(\w*)\((.*)\)/;

			override public function set data( value : Object ) : void
			{
				super.data = value;

				if ( !value )
					return;

				_attributeVO = value.attributeVO;
				_attributeDescriptionVO = value.attributeDescriptionVO;
				displayName = _attributeDescriptionVO.displayName;
				help = _attributeDescriptionVO.help;
				
				var codeInterface : Object = {}
				var matches : Array = _attributeDescriptionVO.codeInterface.match( codeInterfaceRE );
//
				codeInterface[ "type" ] = matches[ 1 ].toLowerCase();
				codeInterface[ "value" ] = matches[ 2 ];

				//				nameLabel.setStyle( "backgroundColor", getColorByGroup( _attributeDescriptionVO.colorGroup ) );
				//secondColor.color = getColorByGroup( _attributeDescriptionVO.colorGroup );
				//firstColor.color = secondColor.color + 0x222222;
//				valueField.maxChars = uint( codeInterface[ "value" ] );
//				valueField.text = _attributeVO.value;





				var comboBoxData : ArrayCollection = new ArrayCollection();
				var codeInterfaceValueRE : RegExp = /\((.*?)\|(.*?)\)/g;

				var listValues : Array = [];
				var selectedItem : Object = {};

				while ( listValues = codeInterfaceValueRE.exec( codeInterface[ "value" ] ) )
				{

					var listItem : Object = { label: listValues[ 1 ], data: listValues[ 2 ] };

					comboBoxData.addItem( listItem );

					if ( _attributeVO.value == listValues[ 2 ] )
						selectedItem = comboBoxData[ comboBoxData.length - 1 ];
				}

				comboBoxData.sort = new Sort();
				comboBoxData.sort.fields = [ new SortField( "label", true ) ];
				comboBoxData.refresh();

				valueField.dataProvider = comboBoxData;
				valueField.selectedItem = selectedItem;

//				regExpValidator.expression = _attributeDescriptionVO.regularExpressionValidation.toString();
//				regExpValidator.noMatchError = _attributeDescriptionVO.errorValidationMessage;
//				regExpValidator.validate();
			}

			private var regExpValidator : AttributeValidator = new AttributeValidator();

			private function creationCompleteHandler() : void
			{
//				regExpValidator.source = valueField;
//				regExpValidator.property = "text";
//				regExpValidator.required = false;
//				regExpValidator.trigger = valueField;
//
//				regExpValidator.triggerEvent = Event.CHANGE;
//
//				regExpValidator.addEventListener( ValidationResultEvent.VALID, validHandler, false, 0, true );
//				regExpValidator.addEventListener( ValidationResultEvent.INVALID, validHandler, false, 0, true );
//
//				regExpValidator.validate();
			}

			private function validHandler( event : ValidationResultEvent ) : void
			{
				//				if ( event.type == ValidationResultEvent.VALID )
				//				{
				//					okButton.enabled = true;
				//				}
				//				else if ( event.type == ValidationResultEvent.INVALID )
				//				{
				//					okButton.enabled = false;
				//				}

			}

			private function getColorByGroup( groupNumber : uint ) : uint
			{
				var colorGroup : uint;
				
				switch ( groupNumber )
				{
					case 1:
					{
						colorGroup = 0x777777;
						break;
					}
						
					case 2:
					{
						colorGroup = 0x00B000;
						break;
					}
						
					case 3:
					{
						colorGroup = 0xB00000;
						break;
					}
						
					case 4:
					{
						colorGroup = 0x8080FF;
						break;
					}
						
					default:
					{
						colorGroup = 0x777777;
					}
				}
				
				return colorGroup;
			}

			protected function valueField_changeHandler( event : ListEvent ) : void
			{
				_attributeVO.value = valueField.value.toString();
			}
		]]>
	</fx:Script>

	<s:layout>

		<s:HorizontalLayout verticalAlign="middle"
							gap="2" paddingRight="2" />
	</s:layout>

	<s:Group width="100%" height="100%" toolTip="{ help }">
		
		<s:Rect bottom="0" left="0" right="0" top="0">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry id="firstColor" color="#FFFFFF" />
					<s:GradientEntry id="secondColor" color="#DCDCDC" />
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		
		<s:RichText id="nameLabel"
					minHeight="21" text="{ displayName }" width="100%" color="#000000" fontFamily="Verdana" fontSize="10" fontWeight="bold"
					paddingBottom="2" paddingRight="5" paddingTop="2" textAlign="right" verticalAlign="middle" verticalCenter="0" />
		
	</s:Group>

	<mx:ComboBox id="valueField"
				 height="21" minWidth="10" width="128"
				 textAlign="left"
				 change="valueField_changeHandler(event)" 
				 toolTip="{ help }"/>
</s:ItemRenderer>
