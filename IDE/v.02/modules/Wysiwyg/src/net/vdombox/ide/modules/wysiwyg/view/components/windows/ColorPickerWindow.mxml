<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				
				styleName="popupWindow" title="Color Picker"
				paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"
				creationComplete="on_creation_complete()" initialize="on_initialize()"
				showCloseButton="true" xmlns="*" xmlns:colorPicker="net.vdombox.ide.modules.wysiwyg.view.components.colorPicker.*" xmlns:attributeRenderers="net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.*">

	<mx:Script>
		<![CDATA[
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.ColorHSB;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import net.vdombox.ide.modules.wysiwyg.events.ColorPickerEvent;

			[Embed( source="assets/colorPicker/assets.swf", symbol="AxisHsbH" )]
			internal var osi_hsb_h : Class;

			[Embed( source="assets/colorPicker/assets.swf", symbol="AxisHsbS" )]
			internal var osi_hsb_s : Class;

			[Embed( source="assets/colorPicker/assets.swf", symbol="AxisHsbB" )]
			internal var osi_hsb_b : Class;

			[Embed( source="assets/colorPicker/assets.swf", symbol="AxisRgbR" )]
			internal var osi_rgb_r : Class;

			[Embed( source="assets/colorPicker/assets.swf", symbol="AxisRgbG" )]
			internal var osi_rgb_g : Class;

			[Embed( source="assets/colorPicker/assets.swf", symbol="AxisRgbB" )]
			internal var osi_rgb_b : Class;


			[Bindable]
			[Embed( source='assets/colorPicker/assets.swf', symbol='ColorPickerMarker' )]
			private var cc_marker : Class;

			[Bindable]
			[Embed( source='assets/colorPicker/assets.swf', symbol='MarkerLeft' )]
			private var cc_l_marker : Class;

			[Bindable]
			[Embed( source='assets/colorPicker/assets.swf', symbol='MarkerRight' )]
			private var cc_r_marker : Class;



			private static var wnd : ColorPickerWindow = null;

			private var m_parent : DisplayObject = null;
			private var position : Object = { x: 0, y: 0, p: 0 };



			private function on_initialize() : void
			{
				var i : uint = 0; //uint(App.get_so_prop("color_picker_window_mode", ""));	

				mode = ( i >> 8 ) & 1;

				var sel : uint = i & 0xFF;
				if ( sel > 2 )
					sel = 0;

				if ( mode == 0 )
					sel_rgb = sel;
				else
					sel_hsb = sel;
			}

			private function on_creation_complete() : void
			{
				start_init();
			}

			private function start_init() : void
			{
				hsb = ColorHSB.rgb_to_hsb( color );
				update_hex_rgb();
				update_position();
				//ob_hsb = hsb.to_object();

				if ( mode == 0 )
				{
					if ( sel_rgb == 0 )
						rb_r.selected = true;
					else if ( sel_rgb == 1 )
						rb_g.selected = true;
					else if ( sel_rgb == 2 )
						rb_b.selected = true;
					on_rb_rgb_change();
				}
				else
				{
					if ( sel_hsb == 0 )
						rb_H.selected = true;
					else if ( sel_hsb == 1 )
						rb_S.selected = true;
					else if ( sel_hsb == 2 )
						rb_B.selected = true;
					on_rb_hsb_change();
				}
			}


			private static function rgb_to_position( color : uint, n : uint ) : Object
			{
				var r : uint = ( color >> 16 ) & 0xFF;
				var g : uint = ( color >> 8 ) & 0xFF;
				var b : uint = color & 0xFF;

				if ( n == 0 )
					return { p: r, x: b, y: g };
				if ( n == 1 )
					return { p: g, x: b, y: r };
				if ( n == 2 )
					return { p: b, x: r, y: g };

				return { p: 0, x: 0, y: 0 };
			}

			private static function position_to_rgb( pos : Object, n : uint ) : uint
			{
				var r : uint = 0, g : uint = 0, b : uint = 0;
				if ( n == 0 )
				{
					r = pos.p;
					b = pos.x;
					g = pos.y;
				}
				if ( n == 1 )
				{
					g = pos.p;
					b = pos.x;
					r = pos.y;
				}
				if ( n == 2 )
				{
					b = pos.p;
					r = pos.x;
					g = pos.y;
				}

				return ( ( r & 0xFF ) << 16 ) | ( ( g & 0xFF ) << 8 ) | ( b & 0xFF );
			}

			private var ba : ByteArray = new ByteArray();

			private function change_rcx2_rgb( color : uint, n : uint ) : void
			{
				if ( n > 3 )
					return;
				var dx : uint = 0;
				var dy : uint = 0;
				var clr : uint;

				if ( n == 0 )
				{
					clr = color & 0xFF0000 | 0x00FF00;
					dx = 0x000001;
					dy = 0x000100;
				}
				if ( n == 1 )
				{
					clr = color & 0x00FF00 | 0xFF0000;
					dx = 0x000001;
					dy = 0x010000;
				}
				if ( n == 2 )
				{
					clr = color & 0x0000FF | 0x00FF00;
					dx = 0x010000;
					dy = 0x000100;
				}

				var c : uint = clr;
				for ( var y : uint = 0; y < 256; y++ )
				{
					for ( var x : uint = 0; x < 256; x++ )
					{
						ba.writeInt( c );
						ccc.bd.setPixel( x, y, c );
						c += dx;
					}
					c = ( clr -= dy );
				}
				change_rcx2_rgb_matrix( color, n );
			}

			private function change_rcx2_rgb_matrix( color : uint, n : uint ) : void
			{
				if ( n > 3 )
					return;

				var r : uint = ( color >> 16 ) & 0xFF;
				var g : uint = ( color >> 8 ) & 0xFF;
				var b : uint = color & 0xFF;

				var a : Array = [ 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 ];

				if ( n == 0 )
				{
					a[ 0 ] = 0;
					a[ 4 ] = r;
				}
				if ( n == 1 )
				{
					a[ 6 ] = 0;
					a[ 9 ] = g;
				}
				if ( n == 2 )
				{
					a[ 12 ] = 0;
					a[ 14 ] = b;
				}

				var filter : ColorMatrixFilter = new ColorMatrixFilter( a );
				ccc.bd.applyFilter( ccc.bd, new Rectangle( 0, 0, 256, 256 ), new Point( 0, 0 ), filter );
			}


			private static function hsb_to_position( hsb : ColorHSB, n : uint ) : Object
			{
				if ( n > 3 )
					return { x: 0, y: 0, p: 0 };

				var dc : Object = { h: 360, s: 100, b: 100 };
				var cp : String, cx : String, cy : String;
				if ( n == 0 )
				{
					cp = 'h';
					cx = 's';
					cy = 'b';
				}
				if ( n == 1 )
				{
					cp = 's';
					cx = 'h';
					cy = 'b';
				}
				if ( n == 2 )
				{
					cp = 'b';
					cx = 'h';
					cy = 's';
				}

				var dx : uint = dc[ cx ];
				var dy : uint = dc[ cy ];
				var dp : uint = dc[ cp ];

				return { x: uint( hsb[ cx ] / dx * 255 ), y: uint( hsb[ cy ] / dy * 255 ), p: uint( hsb[ cp ] / dp * 255 ) };
			}

			private static function position_to_hsb( pos : Object, n : uint ) : ColorHSB
			{
				var h : uint = 0, s : uint = 0, b : uint = 0;
				if ( n == 0 )
				{
					h = pos.p;
					s = pos.x;
					b = pos.y;
				}
				if ( n == 1 )
				{
					s = pos.p;
					h = pos.x;
					b = pos.y;
				}
				if ( n == 2 )
				{
					b = pos.p;
					h = pos.x;
					s = pos.y;
				}

				return new ColorHSB( Math.round( h / 255 * 360 ), Math.round( s / 255 * 100 ), Math.round( b / 255 * 100 ) );
			}


			private function change_rcx2_hsb( hsb : ColorHSB, n : uint ) : void
			{
				if ( n > 3 )
					return;
				var o : ColorHSB = new ColorHSB( hsb.h, hsb.s, hsb.b );
				var dc : Object = { h: 360, s: 100, b: 100 };
				var cx : String, cy : String;
				if ( n == 0 )
				{
					cx = 's';
					cy = 'b';
				}
				if ( n == 1 )
				{
					cx = 'h';
					cy = 'b';
				}
				if ( n == 2 )
				{
					cx = 'h';
					cy = 's';
				}

				var dx : uint = dc[ cx ];
				var dy : uint = dc[ cy ];
				var x : int, y : int;

				ba.position = 0;
				if ( n == 0 )
				{
					for ( y = 255; y >= 0; y-- )
					{
						o.b = ( Number( y ) / 255 ) * dy;
						for ( x = 0; x < 256; x++ )
						{
							o.s = ( Number( x ) / 255 ) * dx;
							ba.writeInt( ColorHSB.hsb_to_rgb( o ) );
						}
					}
				}
				else if ( n == 1 )
				{
					for ( y = 255; y >= 0; y-- )
					{
						o.b = ( Number( y ) / 255 ) * dy;
						for ( x = 0; x < 256; x++ )
						{
							o.h = ( Number( x ) / 255 ) * dx;
							ba.writeInt( ColorHSB.hsb_to_rgb( o ) );
						}
					}
				}
				else if ( n == 2 )
				{
					for ( y = 255; y >= 0; y-- )
					{
						o.s = ( Number( y ) / 255 ) * dy;
						for ( x = 0; x < 256; x++ )
						{
							o.h = ( Number( x ) / 255 ) * dx;
							ba.writeInt( ColorHSB.hsb_to_rgb( o ) );
						}
					}
				}

				ba.position = 0;
				ccc.bd.setPixels( new Rectangle( 0, 0, 256, 256 ), ba );
			}

			private function change_rcx1_rgb( color : uint, n : uint ) : void
			{
				if ( n > 3 )
					return;
				var dy : uint = 0x010101;
				var c : uint = 0;

				for ( var y : int = 255; y >= 0; y--, c += dy )
				{
					for ( var x : int = 0; x < 20; x++ )
					{
						ccb.bd.setPixel( x, y, c );
					}
				}
				change_rcx1_rgb_matrix( color, n );
			}

			private function change_rcx1_rgb_matrix( color : uint, n : uint ) : void
			{
				if ( n > 3 )
					return;

				var r : uint = ( color >> 16 ) & 0xFF;
				var g : uint = ( color >> 8 ) & 0xFF;
				var b : uint = color & 0xFF;

				var a : Array = [ 0, 0, 0, 0, r, 0, 0, 0, 0, g, 0, 0, 0, 0, b, 0, 0, 0, 1, 0 ];

				if ( n == 0 )
				{
					a[ 0 ] = 1;
					a[ 4 ] = 0;
				}
				if ( n == 1 )
				{
					a[ 6 ] = 1;
					a[ 9 ] = 0;
				}
				if ( n == 2 )
				{
					a[ 12 ] = 1;
					a[ 14 ] = 0;
				}

				var filter : ColorMatrixFilter = new ColorMatrixFilter( a );
				ccb.bd.applyFilter( ccb.bd, new Rectangle( 0, 0, 20, 256 ), new Point( 0, 0 ), filter );
			}


			private function change_rcx1_hsb( hsb : ColorHSB, n : uint ) : void
			{
				if ( n > 3 )
					return;
				var d : uint = 0;
				var o : ColorHSB = new ColorHSB( hsb.h, hsb.s, hsb.b );
				var m : String = "";

				if ( n == 0 )
				{
					m = "h";
					d = 360;
					o.s = 100;
					o.b = 100;
				}
				if ( n == 1 )
				{
					m = "s";
					d = 100;
				}
				if ( n == 2 )
				{
					m = "b";
					d = 100;
				}

				for ( var y : int = 0; y < 256; y++ )
				{
					o[ m ] = ( y / 255 ) * d;
					var c : uint = ColorHSB.hsb_to_rgb( o );
					for ( var x : int = 0; x < 20; x++ )
					{
						ccb.bd.setPixel( x, 255 - y, c );
					}
				}

			}

			private function set_cc_marker() : void
			{
				var x : uint = 0;
				var y : uint = 0;

				x = position.x;
				y = position.y;

				ccm.x = x + 8;
				ccm.y = 255 - y + 8;

				y = position.p;

				cclm.y = ccrm.y = 255 - y + 8 - 4;
				ccrm.x = 1;
				cclm.x = 30;
			}


			[Bindable]
			private var _color : uint = 0;

			[Bindable]
			private var hsb : ColorHSB = new ColorHSB();

//[Bindable]
//private var ob_hsb:Object = hsb.to_object();


			[Bindable]
			private var mode : uint = 0;

			[Bindable]
			private var old_color : uint = 0;

			[Bindable]
			private var sel_rgb : uint = 0;

			[Bindable]
			private var sel_hsb : uint = 0;

			private function set color( c : uint ) : void
			{
				_color = c;
				if ( m_parent != null )
					m_parent.dispatchEvent( new ColorPickerEvent( "change", _color, hexrgb.text ) );
			}

			private function get color() : uint
			{
				return _color;
			}

			public static function get current_color() : uint
			{
				return ( wnd != null ) ? wnd._color : 0;
			}

			private function on_tx_hex_change() : void
			{
				var s : String = hexrgb.text.toUpperCase();
				var d : String = '';
				for ( var i : int = 0; i < s.length; i++ )
				{
					var c : int = s.charCodeAt( i );
					if ( ( c < 48 || c > 57 ) && ( c < 65 || c > 70 ) )
						continue;
					d += String.fromCharCode( c );
				}

				hexrgb.text = d;
				color = uint( d == '' ? 0 : '0x' + d );

				hsb = ColorHSB.rgb_to_hsb( color );

				update_position();
				//ob_hsb = hsb.to_object();
				redraw_bars();
			}


			private function on_rb_rgb_change() : void
			{
				sel_rgb = uint( -1 );
				mode = 0;

				var ic : Class;

				if ( rb_r.selected )
				{
					sel_rgb = 0;
					ic = osi_rgb_r;
				}
				else if ( rb_g.selected )
				{
					sel_rgb = 1;
					ic = osi_rgb_g;
				}
				else if ( rb_b.selected )
				{
					sel_rgb = 2;
					ic = osi_rgb_b;
				}

				osi_view.source = ic;

				position = rgb_to_position( color, sel_rgb );
				update_hex_rgb();
				redraw_bars();
			}


			private function on_rb_hsb_change() : void
			{
				sel_hsb = uint( -1 );
				mode = 1;

				var ic : Class;

				if ( rb_H.selected )
				{
					sel_hsb = 0;
					ic = osi_hsb_h;
				}
				else if ( rb_S.selected )
				{
					sel_hsb = 1;
					ic = osi_hsb_s;
				}
				else if ( rb_B.selected )
				{
					sel_hsb = 2;
					ic = osi_hsb_b;
				}

				osi_view.source = ic;

				position = hsb_to_position( hsb, sel_hsb );
				update_hex_rgb();
				redraw_bars();
			}


			private function on_tx_rgb_change() : void
			{
				color = ( ( tx_r.value & 0xFF ) << 16 ) + ( ( tx_g.value & 0xFF ) << 8 ) + ( tx_b.value & 0xFF )
				hsb = ColorHSB.rgb_to_hsb( color );
				update_hex_rgb();
				update_position();
				//ob_hsb = hsb.to_object();
				redraw_bars();
			}

			private function on_tx_hsb_change() : void
			{
				hsb = new ColorHSB( tx_H.value, tx_S.value, tx_B.value );
				color = ColorHSB.hsb_to_rgb( hsb );
				update_hex_rgb();
				update_position();
				//ob_hsb = hsb.to_object();
				redraw_bars();
			}

			private function redraw_bars() : void
			{
				if ( mode == 0 )
				{
					change_rcx1_rgb( color, sel_rgb );
					change_rcx2_rgb( color, sel_rgb );
					set_cc_marker();
				}
				else
				{
					change_rcx1_hsb( hsb, sel_hsb );
					change_rcx2_hsb( hsb, sel_hsb );
					set_cc_marker();
				}

			}

			private function update_position() : void
			{
				if ( mode == 0 )
					position = rgb_to_position( color, sel_rgb );
				else if ( mode == 1 )
					position = hsb_to_position( hsb, sel_hsb );
			}

			private function on_restore_color() : void
			{
				color = old_color;
				start_init();
			}

			private var f_apply_flag : Boolean = false;

			public static function show_window( parent : DisplayObject, color : uint, modal : Boolean ) : void
			{
				if ( wnd == null )
				{
					wnd = new ColorPickerWindow();
					wnd.addEventListener( mx.events.CloseEvent.CLOSE, on_close_event );
				}

				wnd.m_parent = parent;
				wnd._color = wnd.old_color = color;

				if ( !wnd.isPopUp )
				{
					PopUpManager.addPopUp( wnd, DisplayObject( UIComponent( parent ).parentApplication ), modal );
					PopUpManager.centerPopUp( wnd );
				}
				else
				{
					PopUpManager.bringToFront( wnd );
					wnd.start_init();
				}

			}

			private function ok_close_window() : void
			{
				f_apply_flag = true;
				close_window();
			}

			private function cancel_close_window() : void
			{
				close_window();
			}

			public function close_window() : void
			{
				dispatchEvent( new CloseEvent( mx.events.CloseEvent.CLOSE ) );
			}

			public static function hide_window() : void
			{
				if ( wnd != null )
				{
					wnd.close_window();
				}
			}

			private function with_last_preved() : void
			{
				if ( f_apply_flag )
				{
					if ( m_parent != null )
						m_parent.dispatchEvent( new ColorPickerEvent( "apply", _color, hexrgb.text ) );
					return;
				}

				if ( _color != old_color )
				{
					_color = old_color;
					if ( m_parent != null )
					{
						m_parent.dispatchEvent( new ColorPickerEvent( "change", _color, hexrgb.text ) );
					}
				}
				if ( m_parent != null )
					m_parent.dispatchEvent( new ColorPickerEvent( "cancel", _color, hexrgb.text ) );
			}

			private static function on_close_event( event : CloseEvent ) : void
			{
				if ( wnd == null )
					return;
				//App.set_so_prop("color_picker_window_mode", (wnd.mode << 8 | (wnd.mode == 0 ? wnd.sel_rgb: wnd.sel_hsb)).toString() );
				wnd.with_last_preved();
				PopUpManager.removePopUp( wnd );
				wnd = null;
			}

			private function on_ccc_mouse_down( event : MouseEvent ) : void
			{
				stage.addEventListener( MouseEvent.MOUSE_MOVE, on_ccc_mouse_mov, true );
				stage.addEventListener( MouseEvent.MOUSE_UP, on_ccc_mouse_up, true );
				on_ccc_md();
			}

			private function on_ccc_mouse_up( event : MouseEvent ) : void
			{
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, on_ccc_mouse_mov, true );
				stage.removeEventListener( MouseEvent.MOUSE_UP, on_ccc_mouse_up, true );
				on_ccc_md();
			}

			private function on_ccc_mouse_mov( event : MouseEvent ) : void
			{
				if ( !event.buttonDown )
				{
					stage.removeEventListener( MouseEvent.MOUSE_MOVE, on_ccc_mouse_mov, true );
					stage.removeEventListener( MouseEvent.MOUSE_UP, on_ccc_mouse_up, true );
					return;
				}
				on_ccc_md();
			}



			private function on_ccb_mouse_down( event : MouseEvent ) : void
			{
				stage.addEventListener( MouseEvent.MOUSE_MOVE, on_ccb_mouse_mov, true );
				stage.addEventListener( MouseEvent.MOUSE_UP, on_ccb_mouse_up, true );
				on_ccb_md();
			}

			private function on_ccb_mouse_up( event : MouseEvent ) : void
			{
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, on_ccb_mouse_mov, true );
				stage.removeEventListener( MouseEvent.MOUSE_UP, on_ccb_mouse_up, true );
				on_ccb_md();
			}


			private function on_ccb_mouse_mov( event : MouseEvent ) : void
			{
				if ( !event.buttonDown )
				{
					stage.removeEventListener( MouseEvent.MOUSE_MOVE, on_ccb_mouse_mov, true );
					stage.removeEventListener( MouseEvent.MOUSE_UP, on_ccb_mouse_up, true );
					return;
				}
				on_ccb_md();
			}

			private var m_timer_count_init : int = 20;
			private var m_timer_count : int = m_timer_count_init;
			private var m_timer : Timer = null;

			private function on_timer_redraw( fn : Function ) : void
			{
				if ( m_timer != null )
				{
					m_timer.stop();
					if ( --m_timer_count <= 0 )
					{
						m_timer = null;
						m_timer_count = m_timer_count_init;
						fn( new TimerEvent( "timer" ) );
						return;
					}
				}

				m_timer = new Timer( 10, 1 );
				m_timer.addEventListener( "timer", fn );
				m_timer.start();
			}


			private function on_ccc_md_draw() : void
			{
				m_timer = null;
				if ( mode == 0 )
				{
					change_rcx1_rgb( color, sel_rgb );
				}
				else
				{
					change_rcx1_hsb( hsb, sel_hsb );
				}
			}

			private function on_ccc_md() : void
			{
				var x : int = int( ccc.mouseX );
				var y : int = int( ccc.mouseY );

				if ( x < 0 )
					x = 0;
				if ( x > 255 )
					x = 255;
				if ( y < 0 )
					y = 0;
				if ( y > 255 )
					y = 255;

				position.x = x;
				position.y = 255 - y;

				if ( mode == 0 )
				{
					color = position_to_rgb( position, sel_rgb );
					hsb = ColorHSB.rgb_to_hsb( color );
				}
				else
				{
					hsb = position_to_hsb( position, sel_hsb );
					color = ColorHSB.hsb_to_rgb( hsb );
				}

				update_hex_rgb();
				set_cc_marker();
				//ob_hsb = hsb.to_object();

				if ( mode == 0 )
				{
					change_rcx1_rgb_matrix( color, sel_rgb );
				}
				else
				{
					on_ccc_md_draw();
				}
			}

			private function on_ccb_md_timer( event : TimerEvent ) : void
			{
				m_timer = null;
				if ( mode == 0 )
				{
					change_rcx2_rgb_matrix( color, sel_rgb );
				}
				else
				{
					change_rcx2_hsb( hsb, sel_hsb );
				}
			}


			private function on_ccb_md() : void
			{
				var x : int = int( ccb.mouseX );
				var y : int = int( ccb.mouseY );

				if ( x < 0 )
					x = 0;
				if ( x > 20 )
					x = 20;
				if ( y < 0 )
					y = 0;
				if ( y > 255 )
					y = 255;

				position.p = 255 - y;

				if ( mode == 0 )
				{
					color = position_to_rgb( position, sel_rgb );
					hsb = ColorHSB.rgb_to_hsb( color );
				}
				else
				{
					hsb = position_to_hsb( position, sel_hsb );
					color = ColorHSB.hsb_to_rgb( hsb );
				}
				update_hex_rgb();
				set_cc_marker();
				//ob_hsb = hsb.to_object();
				if ( mode == 0 )
				{
					change_rcx2_rgb_matrix( color, sel_rgb );
				}
				else
				{
					on_timer_redraw( on_ccb_md_timer );
				}
			}

			private function update_hex_rgb() : void
			{
				hexrgb.text = zn( color.toString( 16 ).toUpperCase(), 6 )
			}

			private static function zn( s : String, n : uint ) : String
			{
				var i : int = n - s.length;
				while ( --i >= 0 )
					s = "0" + s;
				return s;
			}
		]]>
	</mx:Script>

	<mx:HBox backgroundColor="#ffffff" paddingBottom="0" paddingLeft="0" paddingRight="4" paddingTop="0">

		<mx:HBox height="272"
				 horizontalGap="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"
				 verticalGap="0">

			<mx:Canvas height="272" horizontalScrollPolicy="off" verticalScrollPolicy="off" width="272">

				<mx:Canvas height="258" width="258" x="7" y="7"
						   backgroundColor="#000000">

					<attributeRenderers:ColorPickerCanvas id="ccc"
												   height="256" maxHeight="256" maxWidth="256" minHeight="256"
												   minWidth="256" width="256" x="1" y="1"
												   mouseDown="on_ccc_mouse_down(event);" />
				</mx:Canvas>

				<mx:SWFLoader id="ccm"
							  source="{cc_marker}" x="0" y="0" />
			</mx:Canvas>

			<mx:Canvas height="272" horizontalScrollPolicy="off" verticalScrollPolicy="off" width="36"
					   mouseDown="on_ccb_mouse_down(event);">

				<mx:Canvas height="258" width="22" x="7" y="7"
						   backgroundColor="#000000">

					<attributeRenderers:ColorPickerCanvas id="ccb"
												   height="256" maxHeight="256" maxWidth="20" minHeight="256"
												   minWidth="20" width="20" x="1" y="1"
												   mouseDown="on_ccb_mouse_down(event);" />
				</mx:Canvas>

				<mx:SWFLoader id="ccrm"
							  height="9" source="{cc_r_marker}" width="5" x="0" y="0"
							  scaleContent="false" />

				<mx:SWFLoader id="cclm"
							  height="9" source="{cc_l_marker}" width="5" x="0" y="0"
							  scaleContent="false" />
			</mx:Canvas>
		</mx:HBox>

		<mx:VBox height="100%"
				 paddingBottom="8" paddingTop="8">

			<mx:HBox>

				<mx:RadioButton id="rb_H"
								label="H"
								click="on_rb_hsb_change()" />

				<mx:NumericStepper id="tx_H"
								   maxChars="3" maximum="359" minimum="0" stepSize="1" value="{hsb.h}"
								   change="on_tx_hsb_change()" />

				<mx:Label text="°" />
			</mx:HBox>

			<mx:HBox>

				<mx:RadioButton id="rb_S"
								label="S"
								click="on_rb_hsb_change()" />

				<mx:NumericStepper id="tx_S"
								   maxChars="3" maximum="100" minimum="0" stepSize="1" value="{hsb.s}"
								   change="on_tx_hsb_change()" />

				<mx:Label text="%" />
			</mx:HBox>

			<mx:HBox>

				<mx:RadioButton id="rb_B"
								label="B"
								click="on_rb_hsb_change()" />

				<mx:NumericStepper id="tx_B"
								   maxChars="3" maximum="100" minimum="0" stepSize="1" value="{hsb.b}"
								   change="on_tx_hsb_change()" />

				<mx:Label text="%" />
			</mx:HBox>

			<mx:Spacer height="4" />

			<mx:HBox>

				<mx:RadioButton id="rb_r"
								label="R"
								click="on_rb_rgb_change()" />

				<mx:NumericStepper id="tx_r"
								   maxChars="3" maximum="255" minimum="0" stepSize="1"
								   value="{(_color >> 16) &amp; 0xFF}"
								   change="on_tx_rgb_change()" dataChange="on_tx_rgb_change()" />
			</mx:HBox>

			<mx:HBox>

				<mx:RadioButton id="rb_g"
								label="G"
								click="on_rb_rgb_change()" />

				<mx:NumericStepper id="tx_g"
								   maxChars="3" maximum="255" minimum="0" stepSize="1"
								   value="{(_color >> 8) &amp; 0xFF}"
								   change="on_tx_rgb_change()" dataChange="on_tx_rgb_change()" />
			</mx:HBox>

			<mx:HBox>

				<mx:RadioButton id="rb_b"
								label="B"
								click="on_rb_rgb_change()" />

				<mx:NumericStepper id="tx_b"
								   maxChars="3" maximum="255" minimum="0" stepSize="1"
								   value="{(_color) &amp; 0xFF}"
								   change="on_tx_rgb_change()" dataChange="on_tx_rgb_change()" />
			</mx:HBox>

			<mx:Spacer height="100%" />

			<mx:HBox horizontalGap="0">

				<mx:Label text="#" />

				<mx:TextInput id="hexrgb"
							  maxChars="6" text=""
							  change="on_tx_hex_change()"
							  restrict="a-fA-F0-9" />
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>

	<mx:ControlBar horizontalAlign="right">

		<mx:HBox styleName="bbbox"
				 horizontalGap="1" paddingBottom="1" paddingLeft="10" paddingRight="10" paddingTop="1">

			<mx:Box height="22" width="32"
					backgroundColor="{_color}" />

			<mx:Box height="22" width="32"
					backgroundColor="{old_color}"
					click="on_restore_color()" />
		</mx:HBox>

		<mx:VBox height="26" horizontalScrollPolicy="off" styleName="bbbox" verticalScrollPolicy="off"
				 width="56"
				 backgroundAlpha="0.4" borderColor="#808080" horizontalAlign="center" paddingLeft="4"
				 paddingRight="4" verticalAlign="middle">

			<mx:SWFLoader id="osi_view" />
		</mx:VBox>

		<mx:Spacer width="100%" />

		<mx:Button label="Ok"
				   click="ok_close_window()" />

		<mx:Button label="Cancel"
				   click="cancel_close_window()" />
	</mx:ControlBar>
</mx:TitleWindow>
