<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:s="library://ns.adobe.com/flex/spark"
				width="100%" autoDrawBackground="false"
				mouseDown="mouseDownHandler()"
				includeInLayout.normal="false">
	<s:layout>
		<s:HorizontalLayout horizontalAlign="center"/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import mx.core.DragSource;
			
			import net.vdombox.ide.common.model._vo.ResourceVO;
			import net.vdombox.ide.common.model._vo.TypeVO;
			import net.vdombox.ide.modules.wysiwyg.events.TypeItemRendererEvent;
			import net.vdombox.ide.modules.wysiwyg.model.business.VdomDragManager;


			[Bindable]
			private var typeName : String

			[Bindable]
			private var _resourceVO : ResourceVO;

			private var _typeVO : TypeVO;

			public function set resourceVO( value : ResourceVO ) : void
			{
				_resourceVO = value;
			}

			public function get typeVO() : TypeVO
			{
				return _typeVO;
			}

			override public function set data( value : Object ) : void
			{
				if ( !value )
					return;
				
				if ( value == _typeVO )
				{
					invalidateDisplayList();
					
					return;
				}
				
				_typeVO = value as TypeVO;

				typeName = value ?  value.displayName : ""

				super.data = value;
				
				if ( !contextMenu )
					contextMenu = new ContextMenu();
				
				contextMenu.removeAllItems();
				
				if ( _typeVO.includedInUserCategory )
				{
					var delItem : ContextMenuItem = new ContextMenuItem(resourceManager.getString( 'Wysiwyg_General', "toolbox_panel_del_in_user" ));
					delItem.addEventListener( Event.SELECT, delContextMenuHandler, false, 0, true );
					contextMenu.addItem( delItem );
				}
				else
				{
					var addItem : ContextMenuItem = new ContextMenuItem(resourceManager.getString( 'Wysiwyg_General', "toolbox_panel_add_in_user" ));
					addItem.addEventListener( Event.SELECT, addContextMenuHandler, false, 0, true );
					contextMenu.addItem( addItem );
				}
			}

			override public function set selected( value : Boolean ) : void
			{
				super.selected = value;

				currentState = value ? "selected" : "normal"
			} 

			private function dragIt( event : MouseEvent ) : void
			{
				removeEventListener( MouseEvent.MOUSE_MOVE, dragIt );

				var dragInitiator : TypeItemRenderer = this;
				var ds : DragSource = new DragSource();

				var dataObject : Object = { typeId: data.id, aviableContainers: data.containers, offX: dragInitiator.mouseX,
						offY: dragInitiator.mouseY };

				ds.addData( dataObject, 'typeDescription' );

				var proxy : Image = new Image();

				proxy.width = 40;
				proxy.height = 40;
				proxy.smoothBitmapContent = true;
				proxy.source = typeIcon.source;

				var vdomDragManager : VdomDragManager = VdomDragManager.getInstance();

				vdomDragManager.doDrag( dragInitiator, ds, event, proxy, proxy.width / 2 - dragInitiator.mouseX,
					proxy.height / 2 - dragInitiator.mouseY );
			}

			private function mouseDownHandler() : void
			{
				addEventListener( MouseEvent.MOUSE_MOVE, dragIt, false, 0, true );
				stage.addEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler, false, 0, true );
			}

			private function stage_mouseUpHandler( event : MouseEvent ) : void
			{
				removeEventListener( MouseEvent.MOUSE_MOVE, dragIt );
				if ( !stage )
					return;
				
				stage.removeEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
			}
			
			private function addContextMenuHandler ( event : Event ) : void
			{
				dispatchEvent( new TypeItemRendererEvent( TypeItemRendererEvent.ADD_IN_USER_CATIGORY ) );
			}
			
			private function delContextMenuHandler ( event : Event ) : void
			{
				dispatchEvent( new TypeItemRendererEvent( TypeItemRendererEvent.DELET_IN_USER_CATIGORY ) );
			}
			
			protected function group1_doubleClickHandler(event:MouseEvent):void
			{
				dispatchEvent( new TypeItemRendererEvent( TypeItemRendererEvent.DOUBLE_CLICK ) );
			}
			
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>

		<s:Group width="87" height="87" doubleClickEnabled="true" doubleClick="group1_doubleClickHandler(event)">
			<s:Rect width="100%" height="100%" radiusX="10" radiusY="10" visible.selected="true" visible="false">
				<s:fill>
					<s:SolidColor color="#121212" alpha="0.5"/>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#6e6e6e"/>
				</s:stroke>
			</s:Rect>
			
			<s:VGroup width="100%" height="100%" paddingTop="5" gap="5" 
					 verticalAlign="middle" horizontalAlign="center">
				
				<mx:Image id="typeIcon"
						  source="{ _resourceVO.data }"
						  horizontalCenter="0"
						  smoothBitmapContent="true"/>
				
				<s:RichText text="{ typeName }" width="100%" fontSize="9"
							color="white" fontFamily="Verdana" horizontalCenter="0" top="50"/>
			</s:VGroup>
		</s:Group>
		

</s:ItemRenderer>
