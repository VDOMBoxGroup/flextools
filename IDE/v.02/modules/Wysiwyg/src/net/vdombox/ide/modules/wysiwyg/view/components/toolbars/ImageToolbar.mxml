<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:controls="net.vdombox.ide.modules.wysiwyg.view.components.controls.*"
		  xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  implements="net.vdombox.ide.modules.wysiwyg.interfaces.IToolbar">

	<fx:Script>
		<![CDATA[
			import mx.utils.StringUtil;
			
			import net.vdombox.ide.common.vo.AttributeVO;
			import net.vdombox.ide.common.vo.VdomObjectAttributesVO;
			import net.vdombox.ide.modules.wysiwyg.events.ToolbarEvent;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IRenderer;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IToolbar;

			private var elementForEditing : Object;

			private var attributesObject : Object;

			private var _item : IRenderer;

			public function get item() : IRenderer
			{
				return _item;
			}

			public function get attributes() : Array
			{
				var result : Array = [];
				var attributeVO : AttributeVO;

				if ( attributesObject )
				{
					for each ( attributeVO in attributesObject )
					{
						result.push( attributeVO );
					}
				}

				return result;
			}

			public function init( item : IRenderer ) : void
			{
				_item = item;

				elementForEditing = item.editableComponent;

				attributesObject = extractAttributes( _item );

				var resRegExp : RegExp = /^#Res\(([-a-zA-Z0-9]*)\)/;
			}

			public function close() : void
			{
			}

			private function extractAttributes( item : IRenderer ) : Object
			{
				var editableAttributeVO : AttributeVO;
				var attributeVO : AttributeVO;

				for each ( attributeVO in item.renderVO.attributes )
				{
					if ( attributeVO.name == "editable" )
					{
						editableAttributeVO = attributeVO;
						break;
					}
				}

				var attributesObject : Object = {};
				var attributeName : String;
				var attributeNames : Array = editableAttributeVO.value.split( "," );

				for each ( attributeName in attributeNames )
				{
					attributeName = StringUtil.trim( attributeName );
					attributesObject[ attributeName ] = null;
				}

				var content : XML = <content>{ item.renderVO.content }</content>;

				var editableAttribute : XML = content..*.@editable[ 0 ];

				var editableContent : XML = editableAttribute.parent();
				var editableContentAttributes : XMLList = editableContent.attributes();
				var editableContentAttribute : XML;

				for each ( editableContentAttribute in editableContentAttributes )
				{
					attributeName = editableContentAttribute.name().toString();

					if ( attributesObject.hasOwnProperty( attributeName ) )
						attributesObject[ attributeName ] = new AttributeVO( attributeName, editableContentAttribute[ 0 ] );

					// TODO Fix

					if ( attributeName == "href" && attributesObject.hasOwnProperty( "value" ) )
						attributesObject[ "value" ] = new AttributeVO( "value", editableContentAttribute[ 0 ] );
				}

				return attributesObject;
			}

//
//			public function get selfChanged() : Boolean
//			{
//
//				return _selfChanged;
//			}

			private function rollback() : void
			{

				applyChanges( 'rollback', null );
			}

			private function rotate( value : int ) : void
			{

				applyChanges( 'rotate',
					<Attributes>
						<Attribute Name="method">{value}</Attribute>
					</Attributes>
					);
			}

			private function brightness( value : Number ) : void
			{

				applyChanges( 'brightness',
					<Attributes>
						<Attribute Name="factor">{value}</Attribute>
					</Attributes>
					);
			}

			private function contrast( value : Number ) : void
			{

				applyChanges( 'contrast',
					<Attributes>
						<Attribute Name="factor">{value}</Attribute>
					</Attributes>
					);
			}

			private function flip( value : int ) : void
			{

				applyChanges( 'flip',
					<Attributes>
						<Attribute Name="method">{value}</Attribute>
					</Attributes>
					);
			}

			private function greyscale() : void
			{

				applyChanges( 'greyscale', null );
			}

			private function applyChanges( operation : String, attributes : XML ) : void
			{
				dispatchEvent( new ToolbarEvent( ToolbarEvent.IMAGE_CHANGED, { operation: operation, attributes: attributes } ) );

//				item.waitMode = true;
//				dataManager.addEventListener( DataManagerEvent.MODIFY_RESOURCE_COMPLETE, resourceModifedHandler );
//				dataManager.modifyResource( resourceId, operation, attributeName, attributes );
			}
			
			public function get vdomObjectAttributesVO() : VdomObjectAttributesVO
			{
				var vdomObjectAttributesVO : VdomObjectAttributesVO = new VdomObjectAttributesVO(_item.vdomObjectVO);
				var attributeVO : AttributeVO = new AttributeVO( "valie" );
				
//				attributeVO.value = tinyMCE.getContent();
//				vdomObjectAttributesVO.attributes = [attributeVO];
				
				return vdomObjectAttributesVO;
			}

//			private function resourceModifedHandler( event : DataManagerEvent ) : void
//			{
//
//				var resId : String = event.result.Object.Attributes.Attribute.( @Name == "value" )[ 0 ];
//
//				var resRegExp : RegExp = /^#Res\(([-a-zA-Z0-9]*)\)/;
//
//				resourceId = resId.match( resRegExp )[ 1 ]
//			}
		]]>
	</fx:Script>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/reset_size.png')" width="20"
			   click="rollback()"/>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/rotate_left.png')" styleName="toolbarButton" width="20"
			   click="rotate(0)"/>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/rotate_right.png')" styleName="toolbarButton" width="20"
			   click="rotate(1)"/>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/flip_vertical.png')" styleName="toolbarButton" width="20"
			   click="flip(0)"/>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/flip_horizontal.png')" styleName="toolbarButton" width="20"
			   click="flip(1)"/>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/contrast_up.png')" styleName="toolbarButton" width="20"
			   click="contrast(.1)"/>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/contrast_down.png')" styleName="toolbarButton" width="20"
			   click="contrast(-.1)"/>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/brightness_up.png')" styleName="toolbarButton" width="20"
			   click="brightness(.1)"/>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/brightness_down.png')" styleName="toolbarButton" width="20"
			   click="brightness(-.1)"/>

	<mx:Button height="20" icon="@Embed(source='assets/toolbars/imageToolbar/grayscale.png')" styleName="toolbarButton" width="20"
			   click="greyscale()"/>
</s:HGroup>
