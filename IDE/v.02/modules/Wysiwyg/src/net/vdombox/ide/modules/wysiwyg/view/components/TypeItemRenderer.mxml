<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:s="library://ns.adobe.com/flex/spark"
				width="100%"
				creationComplete="dispatchEvent( new Event( 'TypeRendererCreated' ))" mouseDown="mouseDownHandler()"
				autoDrawBackground="false">

	<fx:Script>
		<![CDATA[
			import mx.core.DragSource;

			import net.vdombox.ide.common.vo.ResourceVO;
			import net.vdombox.ide.common.vo.TypeVO;
			import net.vdombox.ide.modules.wysiwyg.model.business.VdomDragManager;

			import spark.filters.GlowFilter;


			[Bindable]
			private var typeName : String

			[Bindable]
			private var _resourceVO : ResourceVO;

			private var _typeVO : TypeVO;

			public function set resourceVO( value : ResourceVO ) : void
			{
				_resourceVO = value;
			}

			public function get typeVO() : TypeVO
			{
				return _typeVO;
			}

			override public function set data( value : Object ) : void
			{
				_typeVO = value as TypeVO;

				if ( value )
					typeName = value.displayName;
				else
					typeName = "";

				super.data = value;
			}

			override public function set selected( value : Boolean ) : void
			{
				super.selected = value;

				if ( value )
					currentState = "selected";
				else
					currentState = "normal";
			} 

			private function dragIt( event : MouseEvent ) : void
			{
				removeEventListener( MouseEvent.MOUSE_MOVE, dragIt );

				var dragInitiator : TypeItemRenderer = this;
				var ds : DragSource = new DragSource();

				var dataObject : Object = { typeId: data.id, aviableContainers: data.containers, offX: dragInitiator.mouseX,
						offY: dragInitiator.mouseY };

				ds.addData( dataObject, 'typeDescription' );

				var proxy : Image = new Image();

				proxy.width = 40;
				proxy.height = 40;
				proxy.smoothBitmapContent = true;
				proxy.source = typeIcon.source;

				var vdomDragManager : VdomDragManager = VdomDragManager.getInstance();

				vdomDragManager.doDrag( dragInitiator, ds, event, proxy, proxy.width / 2 - dragInitiator.mouseX,
					proxy.height / 2 - dragInitiator.mouseY );
			}

			private function mouseDownHandler() : void
			{
				addEventListener( MouseEvent.MOUSE_MOVE, dragIt, false, 0, true );
				stage.addEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler, false, 0, true );
			}

			private function stage_mouseUpHandler( event : MouseEvent ) : void
			{
				removeEventListener( MouseEvent.MOUSE_MOVE, dragIt );
				stage.removeEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>

	<!--<s:Ellipse height="40" height.selected="55" width="40" width.selected="55"
		 horizontalCenter="0">
		 <s:fill>
		 <s:LinearGradient rotation="90">
		 <s:GradientEntry color="#595C61"/>
		 <s:GradientEntry color="#3A3B3D"/>
		 </s:LinearGradient>
		 </s:fill>
		 </s:Ellipse>-->

	<mx:Image id="typeIcon"
			  height="40" source="{ _resourceVO.data }" width="40"
			  horizontalCenter="0" top="5"
			  filters.selected="{ [ new GlowFilter( 0xFFFFFF, 1, 6, 6, 2 ) ] }" smoothBitmapContent="true"/>

	<s:RichText text="{ typeName }" width="100%"
				color="white" fontFamily="Verdana" horizontalCenter="0" top="50"/>

</s:ItemRenderer>
