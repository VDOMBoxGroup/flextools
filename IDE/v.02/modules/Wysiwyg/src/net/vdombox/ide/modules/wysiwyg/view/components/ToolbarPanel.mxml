<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:mx="library://ns.adobe.com/flex/halo"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  color="white" skinClass="net.vdombox.ide.modules.wysiwyg.view.skins.ToolbarPanelSkin">

	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;
			
			import net.vdombox.ide.common.vo.TypeVO;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IRenderer;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IToolbar;
			import net.vdombox.ide.modules.wysiwyg.view.components.toolbars.ImageToolbar;
			import net.vdombox.ide.modules.wysiwyg.view.components.toolbars.RichTextToolbar;
			import net.vdombox.ide.modules.wysiwyg.view.components.toolbars.TextToolbar;
			import net.vdombox.ide.modules.wysiwyg.view.skins.ToolbarPanelSkin;

			private var _currentToolbar : IToolbar;
			private var _selectedRenderer : IRenderer;

			private var isSelectedRendererChanged : Boolean;

			public function set selectedRenderer( value : IRenderer ) : void
			{
				if ( _selectedRenderer == value )
					return;

				_selectedRenderer = value;

				isSelectedRendererChanged = true;
				invalidateProperties();
			}

			public function get currentToolbar() : IToolbar
			{
				return _currentToolbar;
			}

			public function set currentToolbar( value : IToolbar ) : void
			{
				if ( !value && _currentToolbar && IVisualElement( _currentToolbar ).parent === this )
				{
					_currentToolbar.close();
					removeElement( _currentToolbar as IVisualElement );
					_currentToolbar = null;
				}

				_currentToolbar = value;

				if ( value )
					addElement( value as IVisualElement );
			}

			override protected function commitProperties() : void
			{
				if( isSelectedRendererChanged )
				{
					isSelectedRendererChanged = false;
					
					if ( _currentToolbar )
					{
						_currentToolbar.close();
						_currentToolbar = null;
						
						removeAllElements();
					}

					if( !_selectedRenderer || !_selectedRenderer.editableComponent )
						return;
					
					var typeVO : TypeVO = _selectedRenderer.typeVO;
					
					switch ( typeVO.interfaceType )
					{
						case "1":
						{
							break;
						}
							
						case "2":
						{
							var richTextToolbar : RichTextToolbar = new RichTextToolbar();
							
							_currentToolbar = richTextToolbar;
							addElement( richTextToolbar );
							richTextToolbar.init( _selectedRenderer );
							
							break;
						}
							
						case "3":
						{
							var textToolbar : TextToolbar = new TextToolbar();
							
							_currentToolbar = textToolbar;
							addElement( textToolbar );
							textToolbar.init( _selectedRenderer );
							
							break;
						}
							
						case "4":
						{
							var imageToolbar : ImageToolbar = new ImageToolbar();
							
							_currentToolbar = imageToolbar;
							addElement( imageToolbar );
							imageToolbar.init( _selectedRenderer );
							
							break;
						}
					}
					
					if( currentToolbar )
					{
						visible = true;
						includeInLayout = true;
					}
					else
					{
						visible = false;
						includeInLayout = false;
					}
				}
			}
		]]>
	</fx:Script>
</s:SkinnableContainer>
