<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300">
	<fx:Script>
		<![CDATA[
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			
			import net.vdombox.ide.common.model.vo.TypeVO;
			import net.vdombox.ide.modules.wysiwyg.events.RendererDropEvent;
			import net.vdombox.ide.modules.wysiwyg.view.components.TypesAccordionHeader;
			import net.vdombox.ide.modules.wysiwyg.view.components.TypesCategory;
			
			import spark.events.TextOperationEvent;
			
			private var _types : Array;
			
			private var categories : Array = [];
			
			private var _userTypes : Object;
			private var userCategory : TypesCategory;
			
			public function set userTypes(value:Object):void
			{
				_userTypes = value;
			}

			public function get types():Array
			{
				return _types;
			}

			public function set types(value:Array):void
			{
				_types = value;
				showTypes();
			}
			
			private function showTypes() : void
			{
				var type : TypeVO;
				var category : TypesCategory;
				
				userCategory = new TypesCategory();
				userCategory.label = resourceManager.getString( 'Wysiwyg_General', 'toolbox_panel_user_category');
				
				for ( var i : int = 0; i < types.length; i++ )
				{
					type = types[ i ] as TypeVO;
					
					category = insertCategory( type.category );
					
					category.addType( type );
					
					if ( _userTypes.hasOwnProperty( type.id ) && _userTypes[type.id] != "" )
					{
						type.includedInUserCategory = true;
						userCategory.addType( type );
					}
				}	
				typesAccordion.addChildAt(userCategory, 0);
			}
			
			private function insertCategory( categoryName : String ) : TypesCategory
			{
				var currentCategory : TypesCategory;
				
				if ( !categories[ categoryName ] )
				{
					currentCategory = new TypesCategory();
					
					categories[ categoryName ] = currentCategory;
					
					currentCategory.label = categoryName;
					
					var childArray : Array = typesAccordion.getChildren();
					var k:int = 0;
					
					for ( ; k < childArray.length;k++ )
					{
						if( categoryName < childArray[k].label )
							break;
					}
					if (k >= childArray.length)
						typesAccordion.addChild(currentCategory);
					else
						typesAccordion.addChildAt(currentCategory, k);
				}
				else
				{
					currentCategory = categories[ categoryName ];
				}
				
				return currentCategory;
			}
			
			public function updateUserCategory(): void
			{
				if ( userCategory.types.dataProvider )
					userCategory.types.dataProvider.removeAll();
				
				var type : TypeVO;
				
				for ( var i : int = 0; i < types.length; i++ )
				{
					type = types[ i ] as TypeVO;
					
					if ( _userTypes.hasOwnProperty( type.id)  && _userTypes[type.id] != "" )
					{
						type.includedInUserCategory = true;
						userCategory.addType( type );
					}
				}	
			}
			
			
			private function renderer_dropHandler( event: RendererDropEvent ) : void
			{
				
			}
			
			
			public function clearData() : void
			{
				typesAccordion.removeAllChildren();
				categories = [];
				typeFilter.text = resourceManager.getString( 'Wysiwyg_General', 'toolbox_panel_filter');
			}

			protected function typeFilter_changeHandler(event:TextOperationEvent):void
			{
				if ( typeFilter.text.length > 0 && typeFilter.text != resourceManager.getString( 'Wysiwyg_General', 'toolbox_panel_filter') )
				{
					typesAccordion.removeAllChildren();
					var typesCategory : TypesCategory = new TypesCategory();
					typesCategory.label = resourceManager.getString( 'Wysiwyg_General', 'toolbox_panel_types_found');
					typesAccordion.addChild(typesCategory);
					
					for each ( var typeVO : TypeVO in _types )
					{
						if ( typeVO.displayName.toLowerCase().indexOf( typeFilter.text ) >= 0 )
							typesCategory.addType( typeVO );
					}
				}
				else
				{
					typesAccordion.removeAllChildren();
					categories = [];
					showTypes();
				}
			}
			
			protected function typeFilter_focusInHandler(event:FocusEvent):void
			{
				if ( typeFilter.text == resourceManager.getString( 'Wysiwyg_General', 'toolbox_panel_filter') )
					typeFilter.text = "";
			}
			
			protected function typeFilter_focusOutHandler(event:FocusEvent):void
			{
				if ( typeFilter.text == "" )
					typeFilter.text = resourceManager.getString( 'Wysiwyg_General', 'toolbox_panel_filter');
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:BitmapFill source = "@Embed('icons/texture_ide_sidebar.png')" smooth="true" fillMode="repeat"/>
		</s:fill>
	</s:Rect>
	
	<s:VGroup width="100%" height="100%">
		
		<s:TextInput id="typeFilter" width="100%" 
					 text="{resourceManager.getString( 'Wysiwyg_General', 'toolbox_panel_filter')}" fontStyle="italic"
					 change="typeFilter_changeHandler(event)" 
					 focusIn="typeFilter_focusInHandler(event)" focusOut="typeFilter_focusOutHandler(event)"/>
		
		<mx:Accordion id="typesAccordion" width="100%" height="100%" 
					  borderVisible="false"
					  color="white"
					  textRollOverColor="white" textSelectedColor="white"
					  headerHeight="29"
					  headerRenderer="{ new ClassFactory( TypesAccordionHeader ) }"
					  headerStyleName="typesAccordionHeader" textAlign="center"
					  verticalGap="0" contentBackgroundAlpha="0"/>
	</s:VGroup>
	
</s:Group>
