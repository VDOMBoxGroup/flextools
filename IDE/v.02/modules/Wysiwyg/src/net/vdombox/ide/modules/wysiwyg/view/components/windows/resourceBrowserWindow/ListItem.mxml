<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:resourceBrowserWindow="net.vdombox.ide.modules.wysiwyg.view.components.windows.resourceBrowserWindow.*"
				autoDrawBackground="false"
				contentBackgroundColor="#383838"
				contentBackgroundAlpha="0"
				creationComplete="creationCompleteHandler(event)"
				doubleClickEnabled="true"
				doubleClick="doubleClickHandler(event)">
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			
			import net.vdombox.ide.common.vo.ResourceVO;
			import net.vdombox.ide.modules.wysiwyg.events.ResourceSelectorWindowEvent;
			
			public static var ITEM_DOUBLE_CLICKED	: String = "itemDoubleClicked";
			
			public var resourceVO					: ResourceVO;
			
			private var creationCompleted			: Boolean;
			private var itemElement					: *;
			
			override public function set data ( value : Object ) : void 
			{
				super.data = value;
				
				resourceVO = value as ResourceVO;

				if (!creationCompleted)
					return;
				
				addContentElement();
				
			}
			
			override protected function stateChanged(oldState:String, newState:String, recursive:Boolean):void
			{
				super.stateChanged(oldState, newState, recursive);
				if (itemElement)
					itemElement.selected = selected;
			}
			
			private function addContentElement():void
			{
				if (!visible)
					return;
				
				if (itemElement && contains(itemElement)) {
					if (resourceVO && (itemElement is ListItemNotEmptyContent))
					{
						ListItemNotEmptyContent(itemElement).addEventListener(ListItemNotEmptyContent.ICON_ADDED, onContentIconAdded, false, 0, true);
						itemElement.data = resourceVO;
						return;
					} else  {		// remove element -> add empty element
						removeElement(itemElement);
						itemElement = null;
					}
				}
				
				if (resourceVO) 
				{
					itemElement = new ListItemNotEmptyContent();
					ListItemNotEmptyContent(itemElement).addEventListener(ListItemNotEmptyContent.ICON_ADDED, onContentIconAdded, false, 0, true);
					itemElement.data = resourceVO;
				} else {
					removeSpinner();
					itemElement = new ListItemEmptyContent();
				}
				this.addElement(itemElement);
			}
			
			protected function spinner_creationCompleteHandler(event:FlexEvent):void
			{
				spinner.addEventListener(SpinningSmoothImage.SPINNING_STARTED, onSpinnerAnimStarted, false, 0, true);
				spinner.rotateImage();
			}
			
			private function onSpinnerAnimStarted(evt:Event):void
			{
				spinner.removeEventListener(SpinningSmoothImage.SPINNING_STARTED, onSpinnerAnimStarted);
			}
			
			private function removeSpinner():void
			{
				spinner.stopRotateImage();
				try 
				{
					groupBG.removeElement(spinner);
				} catch(e:Error)
				{
				}
			}
			
			private function onContentIconAdded(evt:Event):void
			{
				ListItemNotEmptyContent(itemElement).removeEventListener(ListItemNotEmptyContent.ICON_ADDED, onContentIconAdded);
				
				removeSpinner();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				creationCompleted = true;
				
				addContentElement();
			}
			
			protected function doubleClickHandler(event:MouseEvent):void
			{
				dispatchEvent( new Event( ITEM_DOUBLE_CLICKED ) );
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>	
		<s:State name="selected"/>
	</s:states>
	
	<s:Group height="64" width="184" id="groupBG">
		<s:Rect height="100%" width="100%" radiusX="4" radiusY="4">
			<s:stroke>
				<s:SolidColorStroke color="#424242" weight="1"/>
			</s:stroke>
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="#FFFFFF" color.selected="#b50000"/>
					<s:GradientEntry color="#bcbcbc" color.selected="#9e0000"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		
		<resourceBrowserWindow:SpinningSmoothImage id="spinner" height="42" width="42"
												   left="10" top="10"
												   maintainAspectRatio="true"
												   scaleContent="true" 
												   smoothBitmapContent="true"
												   cacheAsBitmap="true"
												   source="@Embed('assets/spinner.png')"
												   creationComplete="spinner_creationCompleteHandler(event)"/>

	</s:Group>
	
</s:ItemRenderer>
