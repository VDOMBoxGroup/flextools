<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:components="net.vdombox.ide.modules.wysiwyg.view.components.*"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark">

	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;

			import net.vdombox.ide.common.vo.AttributeDescriptionVO;
			import net.vdombox.ide.common.vo.AttributeVO;
			import net.vdombox.ide.common.vo.TypeVO;
			import net.vdombox.ide.common.vo.VdomObjectAttributesVO;
			import net.vdombox.ide.modules.wysiwyg.events.ObjectAttributesPanelEvent;
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.AttributeColorItemRenderer;
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.AttributeDropdownItemRenderer;
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.AttributeExternalEditorItemRenderer;
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.AttributeFileItemRenderer;
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.AttributeMultilineItemRenderer;
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.AttributeNumberItemRenderer;
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.AttributeObjectlistItemRenderer;
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.AttributePagelinkItemRenderer;
			import net.vdombox.ide.modules.wysiwyg.view.components.attributeRenderers.AttributeTextFiledItemRenderer;

			private var _attributesVO : VdomObjectAttributesVO;
			private var _typeVO : TypeVO;

			private var attributes : ArrayCollection;
			private var codeInterfaceRE : RegExp = /^(\w*)\((.*)\)/;

			public function get attributesVO() : VdomObjectAttributesVO
			{
				return _attributesVO;
			}

			public function set attributesVO( value : VdomObjectAttributesVO ) : void
			{
				_attributesVO = value;

				if ( !value )
				{
					typeNameLabel.text = "";
					attributesList.dataProvider = null;
					return;
				}

				_typeVO = _attributesVO.vdomObjectVO.typeVO;

				typeNameLabel.text = _typeVO.displayName;

				var attributesArray : Array = [];
				var attributeVO : AttributeVO;
				var attributeDescriptionVO : AttributeDescriptionVO;

				for each ( attributeVO in _attributesVO.attributes )
				{
					attributeDescriptionVO = getAttributeDesctriptionVOByName( attributeVO.name );

					if ( !attributeDescriptionVO.visible )
						continue;

					attributesArray.push( { group: attributeDescriptionVO.colorGroup, 
											name: 					attributeDescriptionVO.name, 
											attributeVO: 			attributeVO,
											attributeDescriptionVO: attributeDescriptionVO, 
											objectsList:	 		_attributesVO.objectsList,
											pageLinks: 				_attributesVO.pageLinks } );
				}

				attributes = new ArrayCollection( attributesArray );
				attributes.sort = new Sort();
				attributes.sort.fields = [ new SortField( "group" ), new SortField( "name" ) ];
				attributes.refresh();

				attributesList.dataProvider = attributes;
			}

			private function itemRendererFunction( data : Object ) : IFactory
			{
				var attributeDescriptionVO : AttributeDescriptionVO = data.attributeDescriptionVO;

				var codeInterface : Object = {}
				var matches : Array = attributeDescriptionVO.codeInterface.match( codeInterfaceRE );

				var factory : ClassFactory;

				codeInterface[ "type" ] = matches[ 1 ].toLowerCase();
				codeInterface[ "value" ] = matches[ 2 ];

				switch ( codeInterface[ "type" ] )
				{
					case "number":
					{
						factory = new ClassFactory( AttributeNumberItemRenderer );
						break;
					}

					case "textfield":
					{
						factory = new ClassFactory( AttributeTextFiledItemRenderer );
						break;
					}

					case "multiline":
					{
						factory = new ClassFactory( AttributeMultilineItemRenderer );
						break;
					}

					case "file":
					{
						factory = new ClassFactory( AttributeFileItemRenderer );
						break;
					}

					case "color":
					{
						factory = new ClassFactory( AttributeColorItemRenderer );
						break;
					}

					case "dropdown":
					{
						factory = new ClassFactory( AttributeDropdownItemRenderer );
						break;
					}

					case "pagelink":
					{
						factory = new ClassFactory( AttributePagelinkItemRenderer );
						break;
					}

					case "objectlist":
					{
						factory = new ClassFactory( AttributeObjectlistItemRenderer );
						break;
					}

					case "externaleditor":
					{
						factory = new ClassFactory( AttributeExternalEditorItemRenderer );
						break;
					}
				}

				factory.properties = { autoDrawBackground: false };

				return factory;
			}

			private function getAttributeDesctriptionVOByName( name : String ) : AttributeDescriptionVO
			{
				var result : AttributeDescriptionVO;
				var attributeDescriptionVO : AttributeDescriptionVO;

				for each ( attributeDescriptionVO in _typeVO.attributeDescriptions )
				{
					if ( attributeDescriptionVO.name == name )
					{
						result = attributeDescriptionVO;
						break;
					}
				}

				return result;
			}
		]]>
	</fx:Script>

	<s:Label id="typeNameLabel"
			 height="20"
			 backgroundColor="#000000" color="#FFFFFF" left="0" paddingLeft="3" paddingTop="3" right="0" textAlign="center" verticalAlign="middle"/>

	<s:List id="attributesList"
			width="220"
			bottom="0" top="20"
			change="dispatchEvent( new ObjectAttributesPanelEvent( ObjectAttributesPanelEvent.CURRENT_ATTRIBUTE_CHANGED ))"
			itemRendererFunction="itemRendererFunction" useVirtualLayout="false">

		<s:layout>
			<s:VerticalLayout gap="0"
							  variableRowHeight="true"/>
		</s:layout>

	</s:List>

	<s:controlBarContent>

		<components:PanelButton id="deleteButton"
								icon="@Embed('assets/delete.png')" label="{ resourceManager.getString( 'Wysiwyg_General', 'object_attributes_panel_delete') }"
								click="dispatchEvent( new ObjectAttributesPanelEvent( ObjectAttributesPanelEvent.DELETE_REQUEST ))"
								skinClass="net.vdombox.ide.modules.wysiwyg.view.skins.PanelButtonSkin"/>

		<mx:Spacer width="100%"/>

		<components:PanelButton id="saveButton"
								icon="@Embed('assets/save.png')" label="{ resourceManager.getString( 'Wysiwyg_General', 'object_attributes_panel_save') }"
								click="dispatchEvent( new ObjectAttributesPanelEvent( ObjectAttributesPanelEvent.SAVE_REQUEST ))"
								skinClass="net.vdombox.ide.modules.wysiwyg.view.skins.PanelButtonSkin"/>

	</s:controlBarContent>

</s:Panel>
