<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 creationComplete="creationCompleteHandler()">

	<fx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			
			import net.vdombox.ide.modules.wysiwyg.events.ObjectsTreePanelEvent;
			
			import spark.components.IItemRenderer;

			[Bindable]
			private var _pages : XMLList;

			private var lastHighlightedItem : XML;
			
			public function get pages() : XMLList
			{
				return _pages;
			}

			public function set pages( value : XMLList ) : void
			{
				_pages = value;
			}

			public function get selectedObjectID() : String
			{
				var selectedItem : XML = objectsTree.selectedItem as XML;

				var itemID : String;

				if ( selectedItem && selectedItem.name() == "object" )
					itemID = selectedItem.@id;

				return itemID;

			}

			public function set selectedObjectID( value : String ) : void
			{
				var currentID : String;

				if ( !_pages )
					return;

				try
				{
					currentID = objectsTree.selectedItem.@id;
				}
				catch ( error : Error )
				{
				}

				if ( !value )
					objectsTree.selectedIndex = -1;
				else if ( value != currentID )
					setSelectionByID( value );
			}

			public function get selectedPageID() : String
			{
				var selectedItem : XML = objectsTree.selectedItem as XML;
				var itemID : String;
				var parentItem : XML;

				if ( !selectedItem )
				{
				}
				else if ( selectedItem.name() == "page" )
				{
					itemID = selectedItem.@id;
				}
				else if ( selectedItem.name() == "object" )
				{
					parentItem = selectedItem.parent();

					while ( parentItem )
					{
						if ( parentItem.name() == "page" )
						{
							itemID = parentItem.@id;
							break;
						}

						parentItem = parentItem.parent();
					}
				}

				return itemID;
			}

			public function set selectedPageID( value : String ) : void
			{
				var currentID : String;

				if ( !_pages )
					return;

				try
				{
					currentID = objectsTree.selectedItem.@id;
				}
				catch ( error : Error )
				{
				}

				if ( !value )
					objectsTree.selectedIndex = -1;
				else if ( value != currentID )
					setSelectionByID( value );
			}

			public function get selectedItem() : XML
			{
				return objectsTree.selectedItem as XML;
			}

			private function setSelectionByID( id : String ) : void
			{
				var elementForSelection : XML;

				try
				{
					elementForSelection = _pages.( @id == id )[ 0 ];

					if ( !elementForSelection )
						_pages..object.( @id == id )[ 0 ];
				}
				catch ( error : Error )
				{

				}

				if ( elementForSelection )
				{
					openTree( elementForSelection );
					objectsTree.selectedItem = elementForSelection;
					objectsTree.scrollToIndex( objectsTree.selectedIndex );
				}

			}

			private function openTree( item : Object ) : void
			{
				var parentItem : Object = XML( item ).parent();

				if ( parentItem )
				{
					openTree( parentItem );
					objectsTree.expandItem( parentItem, true, false );
					objectsTree.validateNow();
				}
			}

			private function creationCompleteHandler() : void
			{
				addEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler, false, 0, true );

				objectsTree.addEventListener( ListEvent.CHANGE, objectsTree_changeHandler, false, 0, true );
				
				objectsTree.addEventListener( ListEvent.ITEM_ROLL_OVER, objectsTree_highlightChangeHandler, false, 0, true );
				
				objectsTree.addEventListener( MouseEvent.MIDDLE_CLICK, objectsTree_doubleClickHandler, false, 0, true );
				objectsTree.addEventListener( MouseEvent.CLICK, objectsTree_doubleClickHandler, false, 0, true );
			}

			private function removedFromStageHandler( event : Event ) : void
			{
				removeEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler );

				objectsTree.removeEventListener( ListEvent.CHANGE, objectsTree_changeHandler );
				objectsTree.removeEventListener( MouseEvent.DOUBLE_CLICK, objectsTree_doubleClickHandler, true );
			}

			private function objectsTree_changeHandler( event : ListEvent ) : void
			{
//				dispatchEvent( new ObjectsTreePanelEvent( ObjectsTreePanelEvent.CHANGE ) );
			}
			
			private function objectsTree_highlightChangeHandler( event : ListEvent ) : void
			{
				if( event.type == ListEvent.ITEM_ROLL_OVER )
					lastHighlightedItem = event.itemRenderer.data as XML;
				else
					lastHighlightedItem = null;
			}
			
			protected function objectsTree_doubleClickHandler( event : MouseEvent ) : void
			{
				trace( event.type )
//				dispatchEvent( new ObjectsTreePanelEvent( ObjectsTreePanelEvent.DOUBLE_CLICK ) );
			}
		]]>
	</fx:Script>

	<s:layout>
		<s:VerticalLayout/>
	</s:layout>

	<mx:Tree id="objectsTree"
			 dataProvider="{ _pages }" doubleClickEnabled="true" height="100%" labelField="@name" showRoot="true" width="100%"/>
</s:Panel>
