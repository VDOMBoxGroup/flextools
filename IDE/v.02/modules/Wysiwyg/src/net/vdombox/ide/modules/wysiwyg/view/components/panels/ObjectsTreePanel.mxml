<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 creationComplete="creationCompleteHandler()">

	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import net.vdombox.ide.modules.wysiwyg.events.ObjectsTreePanelEvent;
			
			import spark.components.IItemRenderer;

			[Bindable]
			private var _pages : XMLList;

			private var lastHighlightedItem : XML;

			private var isMiddleDown : Boolean;

			public function get pages() : XMLList
			{
				return _pages;
			}

			public function set pages( value : XMLList ) : void
			{
				_pages = value;
			}

			public function get selectedObjectID() : String
			{
				var selectedItem : XML = objectsTree.selectedItem as XML;

				var itemID : String;

				if ( selectedItem && selectedItem.name() == "object" )
					itemID = selectedItem.@id;

				return itemID;

			}

			public function set selectedObjectID( value : String ) : void
			{
				var currentID : String;

				if ( !_pages )
					return;

				try
				{
					currentID = objectsTree.selectedItem.@id;
				}
				catch ( error : Error )
				{
				}

				if ( !value )
					objectsTree.selectedIndex = -1;
				else if ( value != currentID )
					setSelectionByID( value );
			}

			public function get selectedPageID() : String
			{
				var selectedItem : XML = objectsTree.selectedItem as XML;
				var itemID : String;
				var parentItem : XML;

				if ( !selectedItem )
				{
				}
				else if ( selectedItem.name() == "page" )
				{
					itemID = selectedItem.@id;
				}
				else if ( selectedItem.name() == "object" )
				{
					parentItem = selectedItem.parent();

					while ( parentItem )
					{
						if ( parentItem.name() == "page" )
						{
							itemID = parentItem.@id;
							break;
						}

						parentItem = parentItem.parent();
					}
				}

				return itemID;
			}

			public function set selectedPageID( value : String ) : void
			{
				var currentID : String;

				if ( !_pages )
					return;
				try
				{
					currentID = objectsTree.selectedItem.@id;
				}
				catch ( error : Error )
				{
				}
				

				if ( !value )
					objectsTree.selectedIndex = -1;
				else 
//					if ( value != currentID )
					setSelectionByID( value );
			}

			public function get selectedItem() : XML
			{
				return objectsTree.selectedItem as XML;
			}

			
			private var elementForSelection : XML;
			private var _needUpdateProperties : Boolean = false;
			private function setSelectionByID( id : String ) : void
			{
				try
				{
					elementForSelection = _pages.( @id == id )[ 0 ];

					if ( !elementForSelection )
						elementForSelection = _pages..object.( @id == id )[ 0 ];
				}
				catch ( error : Error )
				{

				}

				if ( elementForSelection )
				{
					_needUpdateProperties = true;
					
					invalidateProperties();
				}
			}
			
			override public function  validateProperties():void
			{
				super.validateProperties();
				
				if ( _needUpdateProperties )
				{
					_needUpdateProperties 		= false;
					_needValideteDisplayList 	= true;
					
					openTree( elementForSelection );
				
					objectsTree.selectedItem = elementForSelection;
					
					invalidateDisplayList();
				}
				
			}
			
			
			private var _needValideteDisplayList : Boolean = false;
			override public function  validateDisplayList():void
			{
				// scrolling to necessary position
				super.validateDisplayList();
				
				if ( !_needValideteDisplayList )
					return
					
				_needValideteDisplayList = false;
				
				if (objectsTree.selectedIndex == -1 )
					return;
				
				var index : int =  objectsTree.selectedIndex;
				var newVPos:int;
				
				// claculate new index scroll to
				if (index >= objectsTree.verticalScrollPosition + objectsTree.rowCount 
					|| index < objectsTree.verticalScrollPosition)
				{
					if ( index > 2) 
						index -= 2;
					newVPos = Math.min((index), objectsTree.maxVerticalScrollPosition);

					objectsTree.verticalScrollPosition = newVPos ;
				}
			}

			private function openTree( item : Object ) : void
			{
				var parentItem : Object = XML( item ).parent();

				if ( parentItem )
				{
					openTree( parentItem );
					objectsTree.expandItem( parentItem, true, false );
				}
			}

			private function creationCompleteHandler() : void
			{
				addEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler, false, 0, true );

				objectsTree.addEventListener( ListEvent.CHANGE, objectsTree_changeHandler, false, 0, true );

				objectsTree.addEventListener( ListEvent.ITEM_ROLL_OVER, objectsTree_highlightChangeHandler, false, 0, true );
				objectsTree.addEventListener( ListEvent.ITEM_ROLL_OUT, objectsTree_highlightChangeHandler, false, 0, true );

				//objectsTree.addEventListener( MouseEvent.MIDDLE_MOUSE_UP, objectsTree_mouseHandler, false, 0, true );
				//objectsTree.addEventListener( MouseEvent.MIDDLE_MOUSE_DOWN, objectsTree_mouseHandler, false, 0, true );
			}
			
		

			private function removedFromStageHandler( event : Event ) : void
			{
				removeEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler );
			}

			private function objectsTree_changeHandler( event : ListEvent ) : void
			{
//				var otpe : ObjectsTreePanelEvent = new ObjectsTreePanelEvent( ObjectsTreePanelEvent.OPEN );
				
//				otpe.pageID = selectedPageID;
//				otpe.objectID = selectedObjectID;
				
				dispatchEvent( new ObjectsTreePanelEvent( ObjectsTreePanelEvent.CHANGE ) );
			}

			private function objectsTree_highlightChangeHandler( event : ListEvent ) : void
			{
				if ( event.type == ListEvent.ITEM_ROLL_OVER )
					lastHighlightedItem = event.itemRenderer.data as XML;
				else
					lastHighlightedItem = null;
			}

			private function objectsTree_mouseHandler( event : MouseEvent ) : void
			{
				var otpe : ObjectsTreePanelEvent;
				var parentItem : XML;

				/*if( event.type == MouseEvent.MIDDLE_MOUSE_DOWN )
				{
					isMiddleDown = true;
					return;
				}*/
				
				if ( !lastHighlightedItem && isMiddleDown )
					return;

				otpe = new ObjectsTreePanelEvent( ObjectsTreePanelEvent.OPEN );

				if ( lastHighlightedItem.name() == "page" )
				{
					otpe.pageID = lastHighlightedItem.@id;
				}
				else if ( lastHighlightedItem.name() == "object" )
				{
					otpe.objectID = lastHighlightedItem.@id;
					parentItem = lastHighlightedItem.parent();

					while ( parentItem )
					{
						if ( parentItem.name() == "page" )
						{
							otpe.pageID = parentItem.@id;
							break;
						}

						parentItem = parentItem.parent();
					}
				}

				isMiddleDown = false;
				
				dispatchEvent( otpe );
			}
		]]>
	</fx:Script>

	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<mx:Tree id="objectsTree"
			 dataProvider="{ _pages }" doubleClickEnabled="true" height="100%" labelField="@name" showRoot="true" width="100%"
			 contentBackgroundAlpha="0"/>
</s:Panel>
