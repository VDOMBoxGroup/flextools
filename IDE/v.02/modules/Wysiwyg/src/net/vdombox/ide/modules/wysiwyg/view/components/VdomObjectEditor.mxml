<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:components="net.vdombox.ide.modules.wysiwyg.view.components.*"
					  xmlns:editors="net.vdombox.editors.*"
					  xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  height="100%" width="100%"
					  skinClass="net.vdombox.ide.modules.wysiwyg.view.skins.EditorSkin"
					  preinitialize="preinitializeHandler()"
					  implements="net.vdombox.ide.modules.wysiwyg.interfaces.IEditor">
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			
			import net.vdombox.ide.common.components.WorkAreaButton;
			import net.vdombox.ide.common.interfaces.IVDOMObjectVO;
			import net.vdombox.ide.common.vo.VdomObjectXMLPresentationVO;
			import net.vdombox.ide.modules.wysiwyg.events.EditorEvent;
			import net.vdombox.ide.modules.wysiwyg.events.RendererEvent;
			import net.vdombox.ide.modules.wysiwyg.events.TransformMarkerEvent;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IEditor;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IRenderer;
			import net.vdombox.ide.modules.wysiwyg.model.vo.EditorVO;
			import net.vdombox.ide.modules.wysiwyg.model.vo.RenderVO;
			
			import spark.components.Label;

			public static const STATUS_NULL : uint = 0;
			public static const STATUS_SAVING : uint = 1;
			public static const STATUS_SAVING_OK : uint = 2;
			public static const STATUS_LOADING : uint = 3;
			public static const STATUS_LOADING_OK : uint = 4;

			[SkinPart( required="true" )]
			public var saveXMLButton : WorkAreaButton;

			[SkinPart( required="true" )]
			public var statusLabel : Label;

			private var _editorVO : EditorVO;

			private var _selectedRenderer : IRenderer

			private var _status : uint;

			private var isVdomObjectVOChanged : Boolean;
			private var isStatusChanged : Boolean;

			
			public function get editorVO() : EditorVO
			{
//				trace("...editorVO()");
				if ( !_editorVO )
				{
					_editorVO = createEditorVO();
				}

				return _editorVO;
			}

			[Bindable]
			public function get selectedRenderer() : IRenderer
			{
				return _selectedRenderer;
			}

			public function set selectedRenderer( value : IRenderer ) : void
			{
//				trace("...selectedRenderer");
				_selectedRenderer = value;
			}

			[Bindable]
			public function get status() : uint
			{
				return _status;
			}

			public function set status( value : uint ) : void
			{
				_status = value;

				isStatusChanged = true;
			}

			override protected function commitProperties() : void
			{
//				trace("...commitProperties()");
				super.commitProperties();

				if ( isStatusChanged )
				{
					isStatusChanged = false;

					if ( skin )
						skin.invalidateProperties();
				}

				if ( isVdomObjectVOChanged )
				{
					isVdomObjectVOChanged = false;

					dispatchEvent( new EditorEvent( EditorEvent.VDOM_OBJECT_VO_CHANGED ) );
				}
			}

			override protected function partAdded( partName : String, instance : Object ) : void
			{
//				trace("...partAdded()");
				super.partAdded( partName, instance );

				if ( instance == saveXMLButton )
				{
					saveXMLButton.addEventListener( MouseEvent.CLICK, saveXMLButton_clickHandler, false, 0, true );
				}
				else if ( instance == statusLabel )
				{
					isStatusChanged = true;
					invalidateProperties();
				}
			}

			private function addHandlers() : void
			{
//				trace("...addHandlers()");
				addEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler, false, 0, true );

				addEventListener( RendererEvent.MOVE, renderer_movedHandler, true, 0, true );
				addEventListener( TransformMarkerEvent.TRANSFORM_COMPLETE, transformMarker_tansformCompleteHandler, true, 0, true );
				
				addEventListener( FlexEvent.SHOW, showHendler, true, 0, true );
				
			}
			
			private function showHendler(event : FlexEvent ): void
			{
				trace("\nEDITOR Showed")
			}

			private function removeHandlers() : void
			{
//				trace("...removeHandlers()");
				removeEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler );

				if ( skin )
					skin.removeEventListener( StateChangeEvent.CURRENT_STATE_CHANGE, changeStateHandler );
			}

			private function refreshToolbar() : void
			{
//				trace("...refreshToolbar)(");
			}

			private function createEditorVO() : EditorVO
			{
//				trace("...createEditorVO()");
				var newEditorVO : EditorVO;

				newEditorVO = new EditorVO();

				BindingUtils.bindSetter( vdomObjectChanged, newEditorVO, "vdomObjectVO", true, true );
				BindingUtils.bindSetter( renderVOChanged, newEditorVO, "renderVO");
				BindingUtils.bindSetter( xmlPresentationChanged, newEditorVO, "vdomObjectXMLPresentationVO", true, true );

				return newEditorVO;
			}

			private function vdomObjectChanged( value : IVDOMObjectVO ) : void
			{
//				trace("...vdomObjectChanged()");
				isVdomObjectVOChanged = true;
				invalidateProperties();
			}

			private function renderVOChanged( value : RenderVO ) : void
			{
//				trace("...renderVOChanged() ++++++++++");
				if ( renderer )
					renderer.renderVO = value;
			}

			private function xmlPresentationChanged( value : VdomObjectXMLPresentationVO ) : void
			{
//				trace("..xmlPresentationChanged()");
			}

			private function dispatchStateEvent() : void
			{
//				trace("...dispatchStateEvent()");
				currentState = skin.currentState;

				if ( skin.currentState.substr( 0, 7 ) == "wysiwyg" )
					dispatchEvent( new EditorEvent( EditorEvent.WYSIWYG_OPENED ) )
				else if ( skin.currentState.substr( 0, 3 ) == "xml" )
					dispatchEvent( new EditorEvent( EditorEvent.XML_EDITOR_OPENED ) )
			}

			private function preinitializeHandler() : void
			{
//				trace("...preinitializeHandler()");
				addHandlers();
				dispatchEvent( new EditorEvent( EditorEvent.PREINITIALIZED ) );
			}

			private function creationCompleteHandler( event : FlexEvent ) : void
			{
//				trace("...creationCompleteHandler()");
				skin.addEventListener( StateChangeEvent.CURRENT_STATE_CHANGE, changeStateHandler, false, 0, true );
				dispatchStateEvent();
			}

			private function removedFromStageHandler( event : Event ) : void
			{
//				trace("...removedFromStageHandler(e)");
				dispatchEvent( new EditorEvent( EditorEvent.REMOVED ) );

				removeHandlers();
			}

			private function changeStateHandler( event : StateChangeEvent ) : void
			{
//				trace("...changeStateHandler(e)");
				dispatchStateEvent();
			}

			private function saveXMLButton_clickHandler( event : MouseEvent ) : void
			{
//				trace("...saveXMLButton_clickHandler()");
//				if( xmlPresentation )
//				{
//					var ee : EditorEvent = new EditorEvent( EditorEvent.XML_SAVE );
//					dispatchEvent( ee );
//				}
			}

			private function renderer_movedHandler( event : RendererEvent ) : void
			{
//				trace("...renderer_movedHandler(e)");
				var ee : EditorEvent = new EditorEvent( EditorEvent.RENDERER_TRANSFORMED );

				ee.renderer = event.target as IRenderer;
				ee.attributes = { x: UIComponent( ee.renderer ).x, y: UIComponent( ee.renderer ).y };

				dispatchEvent( ee );
			}

			private function transformMarker_tansformCompleteHandler( event : TransformMarkerEvent ) : void
			{
//				trace("...transformMarker_tansformCompleteHandler(e)");
				var ee : EditorEvent = new EditorEvent( EditorEvent.RENDERER_TRANSFORMED );

				ee.renderer = TransformMarker( event.target ).renderer;
				ee.attributes = event.properties;

				dispatchEvent( ee );
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="wysiwyg"/>
		<s:State name="wysiwygDisabled"/>
		<s:State name="xml"/>
		<s:State name="xmlDisabled"/>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>

	<s:layout>
		<s:VerticalLayout/>
	</s:layout>

	<s:Group height="100%" width="100%">
		<components:PageRenderer id="renderer" 
								 height="100%" width="100%"
								 selectedRenderer="{ selectedRenderer }" includeIn="wysiwyg, wysiwygDisabled, normal, disabled"/>

		<editors:XMLScriptEditor id="xmlScriptEditor"
								 height="100%" width="100%"
								 includeIn="xml, xmlDisabled"/>

	</s:Group>

	<components:ToolbarPanel id="toolbarPanel"
							 includeInLayout="false" width="100%"
							 selectedRenderer="{ selectedRenderer }"/>

</s:SkinnableContainer>
