<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:components="net.vdombox.ide.modules.wysiwyg.view.components.*"
					  xmlns:editors="net.vdombox.editors.*"
					  xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  height="100%" width="100%"
					  skinClass="net.vdombox.ide.modules.wysiwyg.view.skins.EditorSkin"
					  preinitialize="skinnablecontainer1_preinitializeHandler(event)"
					  implements="net.vdombox.ide.modules.wysiwyg.interfaces.IEditor"
					  creationComplete="skinnablecontainer1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			import mx.utils.DisplayUtil;
			
			import net.vdombox.ide.common.interfaces.IVDOMObjectVO;
			import net.vdombox.ide.common.model._vo.VdomObjectXMLPresentationVO;
			import net.vdombox.ide.common.view.components.button.WorkAreaButton;
			import net.vdombox.ide.modules.wysiwyg.events.EditorEvent;
			import net.vdombox.ide.modules.wysiwyg.events.RendererEvent;
			import net.vdombox.ide.modules.wysiwyg.events.TransformMarkerEvent;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IEditor;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IRenderer;
			import net.vdombox.ide.modules.wysiwyg.model.vo.EditorVO;
			import net.vdombox.ide.modules.wysiwyg.model.vo.RenderVO;
			import net.vdombox.ide.modules.wysiwyg.view.skins.EditorSkin;
			
			import spark.components.CheckBox;
			import spark.components.Label;

			public static const STATUS_NULL : uint = 0;
			public static const STATUS_SAVING : uint = 1;
			public static const STATUS_SAVING_OK : uint = 2;
			public static const STATUS_LOADING : uint = 3;
			public static const STATUS_LOADING_OK : uint = 4;

			[SkinPart( required="true" )]
			public var saveXMLButton : WorkAreaButton;

			[SkinPart( required="true" )]
			public var statusLabel : Label;
			
			[SkinPart( required="true" )]
			public var strXWritten : Label;
			
			[SkinPart( required="true" )]
			public var strYWritten : Label;

			private var _editorVO : EditorVO;

			private var _selectedRenderer : IRenderer

			private var _status : uint;

			private var isVdomObjectVOChanged : Boolean;
			private var isStatusChanged : Boolean;
			
			[Bindable]
			private var _value : VdomObjectXMLPresentationVO;

			
			public function get editorVO() : EditorVO
			{
				if ( !_editorVO )
				{
					_editorVO = createEditorVO();
				}

				return _editorVO;
			}

			[Bindable]
			public function get selectedRenderer() : IRenderer
			{
				return _selectedRenderer;
			}

			public function set selectedRenderer( value : IRenderer ) : void
			{
				_selectedRenderer = value;
				
			}

			[Bindable]
			public function get status() : uint
			{
				return _status;
			}

			public function set status( value : uint ) : void
			{
				_status = value;

				isStatusChanged = true;
			}
			
			public function get xmlPresentation(): VdomObjectXMLPresentationVO
			{
					return _value;
			}
			
			public function set xmlPresentation(value: VdomObjectXMLPresentationVO): void
			{
				_value = value;
				if ( xmlScriptEditor )
					xmlScriptEditor.scriptAreaComponent.text = value.xmlPresentation;
			}
			
			public function get state(): String
			{
				return skin.currentState;
			}

			override protected function commitProperties() : void
			{
				super.commitProperties();

				if ( isStatusChanged )
				{
					isStatusChanged = false;

					if ( skin )
						skin.invalidateProperties();
				}

				if ( isVdomObjectVOChanged )
				{
					isVdomObjectVOChanged = false;

					dispatchEvent( new EditorEvent( EditorEvent.VDOM_OBJECT_VO_CHANGED ) );
				}
			}

			override protected function partAdded( partName : String, instance : Object ) : void
			{
				super.partAdded( partName, instance );

				if ( instance == saveXMLButton )
				{
					saveXMLButton.addEventListener( MouseEvent.CLICK, saveXMLButton_clickHandler, false, 0, true );
				}
				else if ( instance == statusLabel )
				{
					isStatusChanged = true;
					invalidateProperties();
				}
			}

			private function addHandlers() : void
			{
				addEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler, false, 0, true );

				addEventListener( RendererEvent.MOVE, renderer_moveHandler, true, 0, true );
				addEventListener( RendererEvent.HTML_ADDED, renderer_htmlAddedHandler, true, 0, true );
				
				addEventListener( TransformMarkerEvent.TRANSFORM_BEGIN, transformMarker_tansformBeginHandler, true, 0, true );
				addEventListener( TransformMarkerEvent.TRANSFORM_COMPLETE, transformMarker_tansformCompleteHandler, true, 0, true );
				
			}
			

			private function removeHandlers() : void
			{
				removeEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler );
				
				removeEventListener( EditorEvent.UNDO, undo_fun );
				removeEventListener( EditorEvent.REDO, redo_fun );

				if ( skin )
					skin.removeEventListener( StateChangeEvent.CURRENT_STATE_CHANGE, changeStateHandler );
			}

			private function refreshToolbar( renderer : RendererBase ) : void
			{
				toolbarPanel.refresh( renderer );
			}

			private function createEditorVO() : EditorVO
			{
				var newEditorVO : EditorVO;

				newEditorVO = new EditorVO();

				BindingUtils.bindSetter( vdomObjectChanged, newEditorVO, "vdomObjectVO", true, true );
				BindingUtils.bindSetter( renderVOChanged, newEditorVO, "renderVO");
				BindingUtils.bindSetter( xmlPresentationChanged, newEditorVO, "vdomObjectXMLPresentationVO", true, true );

				return newEditorVO;
			}

			private function vdomObjectChanged( value : IVDOMObjectVO ) : void
			{
				isVdomObjectVOChanged = true;
				invalidateProperties();
			}

			private function renderVOChanged( value : RenderVO ) : void
			{
				if ( renderer )
					renderer.renderVO = value;
			}

			private function xmlPresentationChanged( value : VdomObjectXMLPresentationVO ) : void
			{
				//toolbarPanel.isSelectedRendererChanged = false;
			}

			private function dispatchStateEvent() : void
			{
				currentState = skin.currentState;

				if ( skin.currentState.substr( 0, 7 ) == "wysiwyg" )
					dispatchEvent( new EditorEvent( EditorEvent.WYSIWYG_OPENED ) )
				else if ( skin.currentState.substr( 0, 3 ) == "xml" )
					dispatchEvent( new EditorEvent( EditorEvent.XML_EDITOR_OPENED ) )
			}

			private function removedFromStageHandler( event : Event ) : void
			{
				dispatchEvent( new EditorEvent( EditorEvent.REMOVED ) );

				removeHandlers();
			}

			private function changeStateHandler( event : StateChangeEvent ) : void
			{
				dispatchStateEvent();
			}

			private function saveXMLButton_clickHandler( event : MouseEvent ) : void
			{
				if( xmlPresentation )
				{
					_value.xmlPresentation = xmlScriptEditor.scriptAreaComponent.text;
					dispatchEvent( new EditorEvent( EditorEvent.XML_SAVE ) );
				}
			}

			private function renderer_moveHandler( event : RendererEvent ) : void
			{
				var ee : EditorEvent = new EditorEvent( EditorEvent.RENDERER_TRANSFORMED );

				ee.renderer = event.target as IRenderer;
				ee.attributes = { x: int( UIComponent( ee.renderer ).x ), y: int (UIComponent( ee.renderer ).y) };

				dispatchEvent( ee );
			}
			
			private function renderer_htmlAddedHandler(event : RendererEvent):void
			{
				refreshToolbar( event.target as RendererBase );
			}

			private function transformMarker_tansformBeginHandler( event : TransformMarkerEvent ) : void
			{
				//trace ("-- [VdomObjectEditor] transformMarker_tansformBegin");
				toolbarPanel.saveProperties();
			}
			
			private function transformMarker_tansformCompleteHandler( event : TransformMarkerEvent ) : void
			{
				var ee : EditorEvent = new EditorEvent( EditorEvent.RENDERER_TRANSFORMED );

				ee.renderer = TransformMarker( event.target ).renderer;
				ee.attributes = event.properties;

				dispatchEvent( ee );
			}
			
			protected function skinnablecontainer1_preinitializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				addHandlers();
				dispatchEvent( new EditorEvent( EditorEvent.PREINITIALIZED ) );
			}
			
			protected function skinnablecontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				skin.addEventListener( StateChangeEvent.CURRENT_STATE_CHANGE, changeStateHandler, false, 0, true );
				skin.addEventListener( "nerrr", changeHandler ); 
				
				addEventListener( EditorEvent.UNDO, undo_fun, false, 0 , true );
				addEventListener( EditorEvent.REDO, redo_fun, false, 0 , true );
			}
			
			private function undo_fun( event : EditorEvent ) : void
			{
				if ( xmlScriptEditor && skin.currentState == "xml" || skin.currentState == "xmlDisabled")
					xmlScriptEditor.scriptAreaComponent.undo_fun();
			}
			
			private function redo_fun( event : EditorEvent ) : void
			{
				if ( xmlScriptEditor && skin.currentState == "xml" || skin.currentState == "xmlDisabled")
					xmlScriptEditor.scriptAreaComponent.redo_fun();
			}
			
			private function changeHandler( event : Event ) : void
			{
				dispatchEvent( new Event( Event.CHANGE ) );
			}
			
			private function mouseMoveOnPageRenderer( event : MouseEvent ) : void
			{
				var pt:Point = new Point(event.localX, event.localY);
				pt = event.target.localToGlobal(pt);
				
				pt=renderer.dataGroup.globalToContent(pt);
				
				strXWritten.text = "x: " + pt.x.toString() + "px";
				strYWritten.text = "y: " + pt.y.toString() + "px";
			}
			
			public function set showLinking( value : Boolean ) : void
			{
				var editor : EditorSkin = skin as EditorSkin;
				editor.showLinking.selected = value;
			}
			
			public function get showLinking() : Boolean
			{
				var editor : EditorSkin = skin as EditorSkin;
				
				return editor.showLinking.selected;
			}
			
		]]>
	</fx:Script>

	<s:states>
		<s:State name="wysiwyg"/>
		<s:State name="wysiwygDisabled"/>
		<s:State name="xml"/>
		<s:State name="xmlDisabled"/>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>

	<s:layout>
		<s:VerticalLayout/>
	</s:layout>

	<s:Group id="groupPageRenderer" height="100%" width="100%" clipAndEnableScrolling="false">
		<components:PageRenderer id="renderer" 
								 top="0" bottom="0" left="0" right="0"
								 selectedRenderer="{ selectedRenderer }" includeIn="wysiwyg, wysiwygDisabled, normal, disabled" 
								 mouseMove="mouseMoveOnPageRenderer(event)"/>

		<editors:XMLScriptEditor id="xmlScriptEditor"
								 height="100%" width="100%"
								 includeIn="xml, xmlDisabled"/>

	</s:Group>

	<components:ToolbarPanel id="toolbarPanel"
							 includeInLayout="false" width="100%"
							 selectedRenderer="{ selectedRenderer }"
							 excludeFrom="xml, xmlDisabled"/>

</s:SkinnableContainer>
