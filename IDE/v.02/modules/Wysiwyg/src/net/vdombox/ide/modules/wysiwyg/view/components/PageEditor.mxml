<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:components="net.vdombox.ide.modules.wysiwyg.view.components.*"
					  xmlns:editors="net.vdombox.editors.*"
					  xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  skinClass="net.vdombox.ide.modules.wysiwyg.view.skins.EditorSkin"
					  creationComplete="creationCompleteHandler()"
					  implements="net.vdombox.ide.modules.wysiwyg.interfaces.IEditor">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;

			import net.vdombox.ide.common.interfaces.IVDOMObjectVO;
			import net.vdombox.ide.modules.wysiwyg.events.EditorEvent;
			import net.vdombox.ide.modules.wysiwyg.events.RendererEvent;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IEditor;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IRenderer;
			import net.vdombox.ide.modules.wysiwyg.model.vo.RenderVO;

			private var _vdomObjectVO : IVDOMObjectVO;

			private var _xml : String;
			private var _renderVO : RenderVO;

			private var _renderers : Dictionary;

			public function get vdomObjectVO() : IVDOMObjectVO
			{
				return _vdomObjectVO;
			}

			public function set vdomObjectVO( value : IVDOMObjectVO ) : void
			{
				_vdomObjectVO = value;

				refreshToolbar();
			}

			public function get xmlPresentation() : String
			{
				return xmlScriptEditor ? xmlScriptEditor.scriptAreaComponent.text : _xml;
			}

			public function set xmlPresentation( value : String ) : void
			{
				_xml = value;

				if ( xmlScriptEditor )
					xmlScriptEditor.scriptAreaComponent.text = value;
			}

			public function get renderVO() : RenderVO
			{
				return renderer ? renderer.renderVO : _renderVO;
			}

			public function set renderVO( value : RenderVO ) : void
			{
				_renderVO = value;

				if ( renderer )
					renderer.renderVO = value;
			}

			public function set selectedRenderer( value : IRenderer ) : void
			{
				transformMarker.renderer = value;
			}

			public function getRendererByID( id : String ) : IRenderer
			{
				var result : IRenderer;

				for ( var renderer : * in _renderers )
				{
					if ( IRenderer( renderer ).renderVO.vdomObjectVO.id == id )
					{
						result = renderer as IRenderer;
						break;
					}
				}

				return result;
			}

			private function addHandlers() : void
			{
				addEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler, false, 0, true );

				skin.addEventListener( StateChangeEvent.CURRENT_STATE_CHANGE, changeStateHandler, false, 0, true );

				addEventListener( RendererEvent.CREATED, renderer_createdHandler, true, 0, true );
				addEventListener( RendererEvent.REMOVED, renderer_removedHandler, true, 0, true );
			}

			private function removeHandlers() : void
			{
				removeEventListener( Event.REMOVED_FROM_STAGE, removedFromStageHandler );

				skin.removeEventListener( StateChangeEvent.CURRENT_STATE_CHANGE, changeStateHandler );

				removeEventListener( RendererEvent.CREATED, renderer_createdHandler, true );
				removeEventListener( RendererEvent.REMOVED, renderer_removedHandler, true );
			}

			private function refreshToolbar() : void
			{
			}

			private function addRenderer( renderer : IRenderer ) : void
			{
				if ( renderer )
					_renderers[ renderer ] = null;
			}

			private function removeRenerer( renderer : IRenderer ) : void
			{
				if ( renderer )
					delete _renderers[ renderer ];
			}

			private function dispatchStateEvent() : void
			{
				currentState = skin.currentState;

				if ( skin.currentState.substr( 0, 7 ) == "wysiwyg" )
					dispatchEvent( new EditorEvent( EditorEvent.WYSIWYG_OPENED ) )
				else if ( skin.currentState.substr( 0, 3 ) == "xml" )
					dispatchEvent( new EditorEvent( EditorEvent.XML_EDITOR_OPENED ) )
			}

			private function creationCompleteHandler() : void
			{
				_renderers = new Dictionary( true );

				removeEventListener( FlexEvent.CREATION_COMPLETE, creationCompleteHandler );

				addHandlers();

				dispatchEvent( new EditorEvent( EditorEvent.CREATED ) );

				dispatchStateEvent();
			}

			private function removedFromStageHandler( event : Event ) : void
			{
				_renderers = null;
				removeHandlers();
			}

			private function changeStateHandler( event : StateChangeEvent ) : void
			{
				dispatchStateEvent();
			}

			private function renderer_createdHandler( event : RendererEvent ) : void
			{
				addRenderer( event.target as IRenderer );
			}

			private function renderer_removedHandler( event : RendererEvent ) : void
			{
				removeRenerer( event.target as IRenderer );
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="wysiwyg"/>
		<s:State name="wysiwygDisabled"/>
		<s:State name="xml"/>
		<s:State name="xmlDisabled"/>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>

	<s:layout>
		<s:VerticalLayout/>
	</s:layout>

	<s:Group height="100%" width="100%">

		<components:PageRenderer id="renderer"
								 height="100%" width="100%"
								 includeIn="wysiwyg, wysiwygDisabled, normal, disabled"/>

		<editors:XMLScriptEditor id="xmlScriptEditor"
								 height="100%" width="100%"
								 includeIn="xml, xmlDisabled"/>

		<components:TransformMarker id="transformMarker"
									includeIn="wysiwyg, normal"/>
	</s:Group>

	<components:ToolbarPanel id="toolbarPanel"
							 width="100%"/>

</s:SkinnableContainer>
