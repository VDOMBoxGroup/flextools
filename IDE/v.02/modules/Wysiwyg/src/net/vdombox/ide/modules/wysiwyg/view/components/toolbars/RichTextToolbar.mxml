<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:controls="net.vdombox.ide.modules.wysiwyg.view.components.controls.*"
		  xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  implements="net.vdombox.ide.modules.wysiwyg.interfaces.IToolbar" >
	
	<fx:Script source="richTextToolbarTemplate.as"/>
	
	<fx:Script>
		<![CDATA[
			import flash.html.HTMLLoader;
			
			import mx.controls.HTML;
			import mx.core.IUIComponent;
			import mx.core.IVisualElement;
			import mx.core.ScrollPolicy;
			import mx.core.UIComponent;
			import mx.events.ColorPickerEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import net.vdombox.ide.common.model._vo.AttributeVO;
			import net.vdombox.ide.common.model._vo.VdomObjectAttributesVO;
			import net.vdombox.ide.modules.wysiwyg.interfaces.IRenderer;
			import net.vdombox.ide.modules.wysiwyg.view.components.toolbars.richTextToolbarClasses.CharMap;
			import net.vdombox.ide.modules.wysiwyg.view.components.toolbars.richTextToolbarClasses.CodeEditor;
			import net.vdombox.ide.modules.wysiwyg.view.components.toolbars.richTextToolbarClasses.LinkSelection;
			import net.vdombox.ide.modules.wysiwyg.view.skins.FlatButtonSkin;
			
			public var attributesObject : Object;
			
			private var _item : IRenderer;
			
			public function get attributes() : Array
			{
				
				var result : Array = [];
				var attributeVO : AttributeVO;
				
				if ( attributesObject )
				{
					for each ( attributeVO in attributesObject )
					{
						result.push( attributeVO );
					}
				}
				
				return result;
			}
			
			public function get vdomObjectAttributesVO() : VdomObjectAttributesVO
			{
				var vdomObjectAttributesVO : VdomObjectAttributesVO = new VdomObjectAttributesVO(_item.vdomObjectVO);
				/*var attributeVO : AttributeVO = new AttributeVO( "value" );
				
				attributeVO.value = activeEditor.getContent();*/
				
				var attributeVO : AttributeVO = attributesObject["value"].clone();
				vdomObjectAttributesVO.attributes = [attributeVO];
				
				return vdomObjectAttributesVO;
			}
			
			public function get item() : IRenderer
			{
				return _item;
			}
			
			private function get editableHTML() : HTML
			{
				var edHTML : Object;
				
				try
				{
					edHTML = _item.editableComponent;
				}
				catch ( error : Error )
				{
				}
				
				return edHTML as HTML;
			}
			
			private function get bodyTag() : *
			{
				var bdTag : *;
				try
				{
					bdTag = editableHTML.domWindow.document.getElementsByTagName( "body" )[ 0 ];
				}
				catch ( error : Error )
				{
				}
				
				return bdTag;
			}
			
			private function get tinyMCE() : *
			{
				var tnMCE : *;
				try
				{
					tnMCE = item.editableComponent.domWindow.tinyMCE;
				}
				catch ( error : Error )
				{
				}
				
				return tnMCE;
			}
			
			private function get activeEditor() : *
			{
				if (!tinyMCE)
					return null;
				
				return tinyMCE.activeEditor;
			}
			
			private function get selection() : *
			{
				if (!activeEditor)
					return null;
				
				return activeEditor.selection;
			}
			
			private var currentRange : *;
			
			public function init( item_ : IRenderer ) : void
			{
				if ( !item_.editableComponent )
				{
					_item = null;
					return;
				}
				
				_item = item_;
				
				try
				{
					Object( _item ).scroller.visible = false;
				}
				catch ( error : Error )
				{
				}
				
				
				attributesObject = extractAttributes( _item );
				
				if ( !editableHTML.loaded )
					editableHTML.addEventListener( Event.COMPLETE, editableHTML_completeHandler );
				else
					editableHTML_completeHandler( new Event( "true" ) );
				
			}
			
			public function refresh( item_ : IRenderer ) : void
			{
				init(item_);
			}
			
			public function close() : void
			{
				removeAllHandlers();
				
				bodyTag.innerText = saveValue();
				
				editableHTML.horizontalScrollPolicy = ScrollPolicy.AUTO;
				
				UIComponent( item ).setFocus();
			}
			
			public function saveValue() : String
			{
				var value : String = "";
				
				if ( tinyMCE && activeEditor)
				{
					value = activeEditor.getContent();
					
					if ( attributesObject[ "value" ].value != value )
					{
						attributesObject[ "value" ].value = value;
					
						dispatchEvent( new Event( Event.CHANGE ) );
					}
				}
				
				return value;
			}
			
			private function removeAllHandlers() : void
			{
				editableHTML.removeEventListener( Event.COMPLETE, editableHTML_completeHandler );
				editableHTML.removeEventListener( Event.HTML_DOM_INITIALIZE, onTinyHTMLDomInitalize );
			}
			
			private function extractAttributes( item : IRenderer ) : Object
			{
				var editableAttributeVO : AttributeVO;
				var attributeVO : AttributeVO;
				
				for each ( attributeVO in item.renderVO.attributes )
				{
					if ( attributeVO.name == "editable" )
					{
						editableAttributeVO = attributeVO;
						break;
					}
				}
				
				var attributesObject : Object = {};
				var attributeName : String;
				var attributeNames : Array = editableAttributeVO.value.split( "," );
				
				for each ( attributeName in attributeNames )
				{
					attributeName = StringUtil.trim( attributeName );
					attributesObject[ attributeName ] = null;
				}
				
				var editableContent : XML = item.renderVO.content.( "@editable" )[ 0 ];
				var editableContentAttributes : XMLList = editableContent.attributes();
				var editableContentAttribute : XML;
				
				for each ( editableContentAttribute in editableContentAttributes )
				{
					attributeName = editableContentAttribute.name().toString();
					
					if ( attributesObject.hasOwnProperty( attributeName ) )
						attributesObject[ attributeName ] = new AttributeVO( attributeName, editableContentAttribute[ 0 ] );
					
					// TODO Fix
					
					if ( attributeName == "textalign" )
						attributesObject[ "align" ] = new AttributeVO( "align", editableContentAttribute[ 0 ] );
					
					if ( attributeName == "width" )
						attributesObject[ "width" ] = new AttributeVO( "width", editableContentAttribute[ 0 ] );
					
					if ( attributeName == "height" )
						attributesObject[ "height" ] = new AttributeVO( "height", editableContentAttribute[ 0 ] );
				}
				
				if ( attributesObject.hasOwnProperty( "value" ) )
					attributesObject[ "value" ] = new AttributeVO( "value", editableContent[ 0 ] );
				
				return attributesObject;
			}
			
			private function execCommand( commandName : String, commandAttributes : String = null ) : void
			{
				tinyMCE.execCommand( commandName, false, commandAttributes );
			}
			
			private function tryToOpenInsertLinkPopup():void
			{
				if (!selection)
					return;
				
				if (selection.getContent() || selection.getNode().href)
				{
					openInsertLinkPopUp();
				}
			}
			
			private function openInsertLinkPopUp() : void
			{
				var linkSelection : LinkSelection = new LinkSelection();
				linkSelection.hostName = selection.getNode().hostname;
				
				linkSelection.addEventListener( LinkSelection.EVENT_LINK_SELECTED, linkSelection_linkSelectedHandler );
				
				PopUpManager.addPopUp( linkSelection, DisplayObject( this.parentApplication ), true );
				PopUpManager.centerPopUp( linkSelection );
			}
			
			private function linkSelection_linkSelectedHandler( event : Event ) : void
			{
				event.currentTarget.removeEventListener( LinkSelection.EVENT_LINK_SELECTED, linkSelection_linkSelectedHandler );
				
				var href : String = event.currentTarget.url;
				
				if (selection.getNode().href)
				{
					var elm : * = activeEditor.dom.getParent(selection.getNode(), "A");
					
					activeEditor.dom.setAttrib(elm, 'href', href)
					
					return;
				}
					
				var htmlLink : String = "<a href=\""+href+"\" target=\"_blank\" >"+selection.getContent()+"</a>";
				tinyMCE.execCommand('insertHTML', false, htmlLink);
				
			}
			
			private function unLink() : void
			{
				tinyMCE.execCommand( "unlink", false );
			}
			
			private function openInsertCharPopup() : void
			{
				var charMap : CharMap = new CharMap();
				
				charMap.addEventListener( CharMap.EVENT_CHAR_SELECTED, charSelectedHandler );
				
				PopUpManager.addPopUp( charMap, DisplayObject( this.parentApplication ), true );
				PopUpManager.centerPopUp( charMap );
			}
			
			private function charSelectedHandler( event : Event ) : void
			{
				event.currentTarget.removeEventListener( CharMap.EVENT_CHAR_SELECTED, charSelectedHandler );
				
				tinyMCE.execCommand( "mceInsertContent", false, event.currentTarget.charCode );
			}
			
			private function changeFont( event : ListEvent ) : void
			{
				var val : String = fontSelector.selectedItem.data

				tinyMCE.execCommand( "FontName", false, val );
			}
			
			private function colorFillChanged( event : ColorPickerEvent ) : void
			{
				var hexValue : String = event.color.toString( 16 );
				var hexLength : int = hexValue.length;
				for ( var i : int = hexLength; i < 6; i++ )
					hexValue = "0" + hexValue;
				
				tinyMCE.execCommand( "HiliteColor", false, hexValue );
			}
			
			private function colorTextChanged( event : ColorPickerEvent ) : void
			{
				var hexValue : String = event.color.toString( 16 );
				var hexLength : int = hexValue.length;
				
				for ( var i : int = hexLength; i < 6; i++ )
				{
					hexValue = "0" + hexValue;
				}
				
				tinyMCE.execCommand( "forecolor", false, hexValue );
			}
			
			private function openCodeEditor() : void
			{
				var codeEditor : CodeEditor = new CodeEditor();
				
				codeEditor.code = activeEditor.getContent();
				codeEditor.addEventListener( CodeEditor.EVENT_CODE_CHANGED, updateCodeHandler );
				
				PopUpManager.addPopUp( codeEditor, DisplayObject( parentApplication ), true );
				PopUpManager.centerPopUp( codeEditor );
			}
			
			private function updateCodeHandler( event : Event ) : void
			{
				event.currentTarget.removeEventListener( CodeEditor.EVENT_CODE_CHANGED, updateCodeHandler );
				
				activeEditor.setContent( event.currentTarget.code );
			}
			
			private var startContent : String;

			private function editableHTML_completeHandler( event : Event ) : void
			{
				editableHTML.removeEventListener( Event.COMPLETE, editableHTML_completeHandler );
				
				editableHTML.horizontalScrollPolicy = ScrollPolicy.OFF;
				
				if (attributesObject[ "width" ])
					editableHTML.width = Number(attributesObject[ "width" ].value);
				
				if (attributesObject[ "height" ])
					editableHTML.height = Number(attributesObject[ "height" ].value);
				
				startContent = editableHTML.htmlText;
				
				editableHTML.addEventListener( Event.HTML_DOM_INITIALIZE, onTinyHTMLDomInitalize );

				editableHTML.location = "app:/modules/wysiwyg/libs/tinymce/examples/full.html";
			}
			
			private function onTinyHTMLDomInitalize(event : Event):void
			{
				editableHTML.removeEventListener( Event.HTML_DOM_INITIALIZE, onTinyHTMLDomInitalize );
				
				editableHTML.domWindow.onEditorAdded = onEditorAdded;
				editableHTML.domWindow.tinyOnNodeChange = tinyOnNodeChange;
				editableHTML.domWindow.tracer = tracer;
			}
			
			private function tracer(p1:*, p2:*=null, p3:*=null):void
			{
				trace ('tracer: ' + p1);				
			}
			
			private function onEditorAdded():void
			{
				if (tinyMCE && activeEditor)
				{
					activeEditor.startContent = startContent;
					activeEditor.setContent(startContent);
				}
			}
			
			private function tinyOnNodeChange():void
			{
				btnBold.selected = activeEditor.queryCommandState('Bold');
				btnItalic.selected = activeEditor.queryCommandState('Italic');
				btnUnderline.selected = activeEditor.queryCommandState('Underline');
				btnStrikeThrough.selected = activeEditor.queryCommandState('Strikethrough');
				
				btnJustifyLeft.selected = activeEditor.queryCommandState('JustifyLeft');
				btnJustifyRight.selected = activeEditor.queryCommandState('JustifyRight');
				btnJustifyCenter.selected = activeEditor.queryCommandState('JustifyCenter');
				btnJustifyFull.selected = activeEditor.queryCommandState('JustifyFull');
				
				btnInsertOrderedList.selected = activeEditor.queryCommandState('InsertOrderedList');
				btnInsertUnorderedList.selected = activeEditor.queryCommandState('InsertUnorderedList');
				
				updateBlockFormat();
				
				updateFontFamily();
				updateFontSize();
				
				updateTextColor();
				updateFillColor();
				
			}
			
			private function updateTextColor():void
			{
				var rgbGetted : String = activeEditor.queryCommandValue('ForeColor');
				
				if (rgbGetted.indexOf('rgb') == -1) // color is undefined
				{
					foreColorPicker.selectedColor = 0x000000;
					return;
				}
				
				var resoultColor : Number = parseRGBFromTiny(rgbGetted);
				
				if (resoultColor < 0)
					return;
				
				foreColorPicker.selectedColor = resoultColor; 
					
			}
			
			private function updateFillColor():void
			{
				var rgbGetted : String = activeEditor.queryCommandValue('HiliteColor');
				
				if (rgbGetted.indexOf('rgb') == -1) // color is undefined
				{
					fillColorPicker.selectedColor = 0x000000;
					return;
				}
				
				var resoultColor : Number = parseRGBFromTiny(rgbGetted);
				
				if (resoultColor < 0)
					return;
				
				fillColorPicker.selectedColor = resoultColor; 
				
			}
			
			private function updateBlockFormat():void
			{
				var formatRecieved : String = activeEditor.queryCommandValue('FormatBlock');
				
				if (!formatRecieved)
				{
					formatRecieved = RichTextToolbarConstants.FORMAT_TYPE_P;
				}
				
				switch(formatRecieved.toLowerCase())
				{
					case RichTextToolbarConstants.FORMAT_TYPE_P:
					{
						styleSelector.selectedIndex = 0;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_ADDRESS:
					{
						styleSelector.selectedIndex = 1;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_PREFORMATTED:
					{
						styleSelector.selectedIndex = 2;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_H1:
					{
						styleSelector.selectedIndex = 3;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_H2:
					{
						styleSelector.selectedIndex = 4;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_H3:
					{
						styleSelector.selectedIndex = 5;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_H4:
					{
						styleSelector.selectedIndex = 6;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_H5:
					{
						styleSelector.selectedIndex = 7;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_H6:
					{
						styleSelector.selectedIndex = 8;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_DIV:
					{
						styleSelector.selectedIndex = 9;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_BLOCKQUOTE:
					{
						styleSelector.selectedIndex = 10;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_CODE:
					{
						styleSelector.selectedIndex = 11;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_DD:
					{
						styleSelector.selectedIndex = 12;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_DT:
					{
						styleSelector.selectedIndex = 13;
						break;
					}
					case RichTextToolbarConstants.FORMAT_TYPE_SAMPLE:
					{
						styleSelector.selectedIndex = 14;
						break;
					}
						
					default:
					{
						styleSelector.selectedIndex = 0;
						break;
					}
				}
			}
			
			private function updateFontFamily():void
			{
				var fontFamilyRecieved : String = activeEditor.queryCommandValue('FontName');
				
				if (!fontFamilyRecieved)
				{
					fontFamilyRecieved = RichTextToolbarConstants.FONT_NAME_VERDANA;
				}
				
				switch(fontFamilyRecieved.toLowerCase())
				{
					case RichTextToolbarConstants.FONT_NAME_ANDALE_MONO:
					{
						fontSelector.selectedIndex = 0;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_ARIAL_HELVETICA:
					{
						fontSelector.selectedIndex = 1;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_ARIAL_BLACK:
					{
						fontSelector.selectedIndex = 2;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_BOOK_ANTIQUA:
					{
						fontSelector.selectedIndex = 3;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_COMIC_SANS:
					{
						fontSelector.selectedIndex = 4;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_COURIER_NEW:
					{
						fontSelector.selectedIndex = 5;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_GEORGIA:
					{
						fontSelector.selectedIndex = 6;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_HELVETICA:
					{
						fontSelector.selectedIndex = 7;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_IMPACT_CHICAGO:
					{
						fontSelector.selectedIndex = 8;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_SYMBOL:
					{
						fontSelector.selectedIndex = 9;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_TAHOMA:
					{
						fontSelector.selectedIndex = 10;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_TERMINAL_MONACO:
					{
						fontSelector.selectedIndex = 11;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_TIMES_NEW_ROMAN:
					{
						fontSelector.selectedIndex = 12;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_TREBUCHET:
					{
						fontSelector.selectedIndex = 13;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_VERDANA:
					{
						fontSelector.selectedIndex = 14;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_WEBDINGS:
					{
						fontSelector.selectedIndex = 15;
						break;
					}
					case RichTextToolbarConstants.FONT_NAME_WINGDINGS:
					{
						fontSelector.selectedIndex = 16;
						break;
					}
						
					default:
					{
						fontSelector.selectedIndex = 14;
						break;
					}
				}
			}
			
			private function updateFontSize():void
			{
				var fontSizeRecieved : String = activeEditor.queryCommandValue('FontSize');
					
				if (!fontSizeRecieved)
				{
					fontSizeRecieved = RichTextToolbarConstants.FONT_STR_SIZE_4;
				}
				
				switch(fontSizeRecieved.toLowerCase())
				{
					case RichTextToolbarConstants.FONT_STR_SIZE_1:
					{
						sizeSelector.selectedIndex = 0;
						break;
					}
						
					case RichTextToolbarConstants.FONT_STR_SIZE_2:
					{
						sizeSelector.selectedIndex = 1;
						break;
					}
					case RichTextToolbarConstants.FONT_STR_SIZE_3:
					{
						sizeSelector.selectedIndex = 2;
						break;
					}
					case RichTextToolbarConstants.FONT_STR_SIZE_4:
					{
						sizeSelector.selectedIndex = 3;
						break;
					}
					case RichTextToolbarConstants.FONT_STR_SIZE_5:
					{
						sizeSelector.selectedIndex = 4;
						break;
					}
					case RichTextToolbarConstants.FONT_STR_SIZE_6:
					{
						sizeSelector.selectedIndex = 5;
						break;
					}
					case RichTextToolbarConstants.FONT_STR_SIZE_7:
					{
						sizeSelector.selectedIndex = 6;
						break;
					}
						
					default:
					{
						sizeSelector.selectedIndex = 3;
						break;
					}
				}
			}
			
			private function parseRGBFromTiny(colorString : String) : Number
			{
				var colorOutputString : String = '0x';
				
				var regExpDigitVal	: RegExp = /[\d]+/g;
				var arrColorDigits	: Array = colorString.match(regExpDigitVal);
				
				if (!arrColorDigits || arrColorDigits.length != 3)
				{
					return -1;	
				}
				
				colorOutputString += rgb2hex (arrColorDigits[0], arrColorDigits[1], arrColorDigits[2]).toString(16);
				
				return int(colorOutputString); 
				
			}
			
			private function rgb2hex(r:Number, g:Number, b:Number):Number {
				return(r<<16 | g<<8 | b);
			}
		
			private function HTMLEditorLoader_uncaughtScriptException( event : HTMLUncaughtScriptExceptionEvent ) : void
			{
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup verticalAlign="middle">
		<!--<components:ToolbarButtonlabel="Save" icon="@Embed(source='assets/toolbars/richTextToolbar/icon_save.png')"
		height="24"  focusEnabled="false"/>
		
		<mx:VRule height="24" />-->
		
		<controls:ToolbarButton id="btnSelectAll" height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_select_all.png')" width="24"
								focusEnabled="false"
								click="{execCommand('selectall'); btnSelectAll.selected = false;}"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_select_all' ) }"/>
		
		<controls:ToolbarButton id="btnRemoveFormat" height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_rem_formatting.png')" width="24"
								focusEnabled="false"
								click="{execCommand('removeformat'); btnRemoveFormat.selected = false;}"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_remove_format' ) }"/>
		
		<mx:VRule height="24"/>
		
		<controls:ToolbarButton id="btnLink" height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_ins_link.png')" width="24"
								focusEnabled="false"
								click="tryToOpenInsertLinkPopup(); btnLink.selected = false;"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_insert_link' ) }"/>
		
		<controls:ToolbarButton id="btnUnlink" height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_rem_link.png')" width="24"
								focusEnabled="false"
								click="{execCommand('unlink'); btnUnlink.selected=false;}"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_unlink' ) }"/>
		
		<controls:ToolbarButton id="btnInsertHorizontalRule"
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_rule.png')" width="24"
								click="execCommand('inserthorizontalrule'); btnInsertHorizontalRule.selected = false;"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_insert_horizontal_rule' ) }"/>
		
		<controls:ToolbarButton id="btnInsertChar" 
								focusEnabled="false" 
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_ins_char.png')" width="24"
								click="openInsertCharPopup(); btnInsertChar.selected = false;"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_insert_char' ) }"/>
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle">
		
		<controls:ToolbarButton id="btnBold" height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_bold.png')" width="24"
								fontWeight="bold"
								focusEnabled="false"
								click="execCommand('Bold')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_bold' ) }"/>
		
		<controls:ToolbarButton id="btnItalic" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_italic.png')" width="24"
								click="execCommand('Italic')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_italic' ) }"/>
		
		<controls:ToolbarButton id="btnUnderline" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_underline.png')" width="24"
								click="execCommand('Underline')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_underline' ) }"/>
		
		<controls:ToolbarButton id="btnStrikeThrough"
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_strikethrough.png')" width="24"
								click="execCommand('Strikethrough')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_strikethrough' ) }"/>
		
		<mx:VRule height="24"/>
		
		<controls:ToolbarButton id="btnJustifyLeft" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_left.png')" width="24"
								click="execCommand('JustifyLeft')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_justify_left' ) }"/>
		
		<controls:ToolbarButton id="btnJustifyCenter" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_center.png')" width="24"
								click="execCommand('JustifyCenter')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_justify_center' ) }"/>
		
		<controls:ToolbarButton id="btnJustifyRight" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_right.png')" width="24"
								click="execCommand('JustifyRight')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_justify_right' ) }"/>
		
		<controls:ToolbarButton id="btnJustifyFull" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_block.png')" width="24"
								click="execCommand('JustifyFull')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_justify_full' ) }"/>
		
		<mx:VRule height="24"/>
		
		<controls:ToolbarButton id="btnInsertOrderedList" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_numlist.png')" width="24"
								click="execCommand('InsertOrderedList')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_insert_ordered_list' ) }"/>
		
		<controls:ToolbarButton id="btnInsertUnorderedList" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_bullist.png')" width="24"
								click="execCommand('InsertUnorderedList')"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_insert_unordered_list' ) }"/>
		
		<mx:VRule height="24"/>
		
		<controls:ToolbarButton id="btnOutdent" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_outdent.png')" width="24"
								click="execCommand('Outdent'); btnOutdent.selected = false;"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_outdent' ) }"/>
		
		<controls:ToolbarButton id="btnIndent" 
								focusEnabled="false"
								height="24" icon="@Embed(source='../assets/toolbars/richTextToolbar/icon_indent.png')" width="24"
								click="execCommand('Indent'); btnIndent.selected = false;"
								toolTip="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_indent' ) }"/>
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle">
		
		<s:Label text="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_style' ) }"/>
		
		<mx:ComboBox id="styleSelector"
					 focusEnabled="false"
					 height="24" styleName="toolbarComboBox" width="100"
					 color="black"
					 change="{tinyMCE.execCommand('FormatBlock', false, styleSelector.selectedItem.data)}">
			
			<mx:dataProvider>
				
				<mx:ArrayCollection>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_P}" label="Paragraph"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_ADDRESS}" label="Address"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_PREFORMATTED}" label="Preformatted"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_H1}" label="Heading 1"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_H2}" label="Heading 2"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_H3}" label="Heading 3"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_H4}" label="Heading 4"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_H5}" label="Heading 5"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_H6}" label="Heading 6"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_DIV}" label="Div"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_BLOCKQUOTE}" label="Blockquote"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_CODE}" label="Code"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_DT}" label="Definition term"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_DD}" label="Definition description"/>
					
					<fx:Object data="{RichTextToolbarConstants.FORMAT_TYPE_SAMPLE}" label="Code sample"/>
				</mx:ArrayCollection>
			</mx:dataProvider>
		</mx:ComboBox>
		
		<mx:VRule height="24"/>
		
		<s:Label text="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_font' ) }"/>
		
		<mx:ComboBox id="fontSelector"
					 focusEnabled="false" height="24" styleName="toolbarComboBox" width="100"
					 color="black"
					 change="changeFont(event)">
			
			<mx:dataProvider>
				
				<mx:ArrayCollection>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_ANDALE_MONO}" label="Andale Mono"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_ARIAL_HELVETICA}" label="Arial"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_ARIAL_BLACK}" label="Arial Black"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_BOOK_ANTIQUA}" label="Book Antiqua"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_COMIC_SANS}" label="Comic Sans MS"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_COURIER_NEW}" label="Courier New"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_GEORGIA}" label="Georgia"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_HELVETICA}" label="Helvetica"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_IMPACT_CHICAGO}" label="Impact"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_SYMBOL}" label="Symbol"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_TAHOMA}" label="Tahoma"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_TERMINAL_MONACO}" label="Terminal"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_TIMES_NEW_ROMAN}" label="Times New Roman"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_TREBUCHET}" label="Trebuchet MS"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_VERDANA}" label="Verdana"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_WEBDINGS}" label="Webdings"/>
					
					<fx:Object data="{RichTextToolbarConstants.FONT_NAME_WINGDINGS}" label="Wingdings"/>
				</mx:ArrayCollection>
			</mx:dataProvider>
		</mx:ComboBox>
		
		<mx:VRule height="24"/>
		
		<s:Label text="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_size' ) }"/>
		
		<mx:ComboBox id="sizeSelector"
					 focusEnabled="false"
					 height="24" styleName="toolbarComboBox" width="100"
					 color="black"
					 change="{tinyMCE.execCommand('FontSize', false, sizeSelector.selectedItem.data);}">
			
			<mx:dataProvider>
				
				<mx:ArrayCollection>
					
					<fx:Object data="1" label="1 (8 pt)"/>
					
					<fx:Object data="2" label="2 (10 pt)"/>
					
					<fx:Object data="3" label="3 (12 pt)"/>
					
					<fx:Object data="4" label="4 (14 pt)"/>
					
					<fx:Object data="5" label="5 (18 pt)"/>
					
					<fx:Object data="6" label="6 (24 pt)"/>
					
					<fx:Object data="7" label="7 (36 pt)"/>
				</mx:ArrayCollection>
			</mx:dataProvider>
		</mx:ComboBox>
		
		<mx:VRule height="24"/>
		
		<s:Label text="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_text_color' ) }"/>
		
		<mx:ColorPicker id="foreColorPicker" 
						focusEnabled="false" height="24" width="36"
						change="colorTextChanged(event);"
						/>
		
		<s:Label text="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_fill_color' ) }"/>
		
		<mx:ColorPicker id="fillColorPicker" 
						focusEnabled="false" height="24" width="36"
						change="colorFillChanged(event)"/>
		
		<mx:VRule height="24"/>
		
		<s:Button height="24" label="{ resourceManager.getString( 'Wysiwyg_General', 'richtext_toolbar_source' ) }"
				  skinClass="net.vdombox.ide.modules.wysiwyg.view.skins.FlatButtonSkin"
				  click="openCodeEditor()"/>
	</s:HGroup>
</s:VGroup>
