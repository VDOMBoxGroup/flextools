<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:components="net.vdombox.ide.modules.tree.view.components.*"
			 xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:button="net.vdombox.ide.common.view.components.button.*" 
			 xmlns:components1="net.vdombox.ide.common.view.components.*"
			 creationComplete="creationCompleteHandler()" 
			 remove="sparkskin1_removeHandler(event)">
	
	<fx:Metadata>
		<![CDATA[ 
		[HostComponent("net.vdombox.ide.modules.tree.view.components.WorkArea")]
		]]>
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			
			import net.vdombox.ide.common.view.components.VDOMImage;
			import net.vdombox.ide.common.view.skins.VDOMScrollBarSkin.VDOMWorkAreaHScrollBarSkin;
			import net.vdombox.ide.common.view.skins.VDOMScrollBarSkin.VDOMWorkAreaVScrollBarSkin;
			import net.vdombox.ide.modules.tree.events.WorkAreaEvent;
			
			private var isExpanded : Boolean;
			
			[Bindable]
			private var scale : Number = 1;
			
			private var scrollPosition : Point;
			private var _NeedSetVerticalScrollPosition : Boolean = false;
			
			private var multiRect : Rect = new Rect();
			
			private var pt:Point = new Point();
			
			private function creationCompleteHandler() : void
			{
				isExpanded = false;
				expandAllButton.label = resourceManager.getString( 'Tree_General', 'work_area_expand_all' );
				
				BindingUtils.bindSetter( allExpandedChanged, hostComponent, "isAllExpanded", true );
				BindingUtils.bindSetter( allExpandedChanged, hostComponent, "isAllCollapsed", true );
				
				addEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler, true, 0 , true );
				
				multiRect.stroke =  new SolidColorStroke( 0x0000FF, 1 );
			}
			
			private function allExpandedChanged( value : Boolean ) : void
			{
				var oldIsExpanded : Boolean = isExpanded;
				
				if ( !hostComponent.isAllExpanded && hostComponent.isAllCollapsed )
					isExpanded = false;
				else
					isExpanded = true;
				
				if ( oldIsExpanded == isExpanded )
					return;
				
				if ( isExpanded )
					expandAllButton.label = resourceManager.getString( 'Tree_General', 'work_area_collapse_all' );
				else
					expandAllButton.label = resourceManager.getString( 'Tree_General', 'work_area_expand_all' );
			}
			
			private function expandAllButton_clickHandler() : void
			{
				if ( isExpanded )
					hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.COLLAPSE_ALL ) );
				else
					hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.EXPAND_ALL ) );
			}
			
			protected function showSignatureButton_clickHandler() : void
			{
				if ( hostComponent.isSignatureShowed )
					hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.HIDE_SIGNATURE ) );
				else
					hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.SHOW_SIGNATURE ) );
				
				hostComponent.isSignatureShowed = !hostComponent.isSignatureShowed;
			}
			
			protected function scroller_creationCompleteHandler(event:FlexEvent):void
			{
				addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler, true, 0, true );
				
				scroller.verticalScrollBar.setStyle( "SkinClass", VDOMWorkAreaVScrollBarSkin );
				scroller.horizontalScrollBar.setStyle( "skinClass", VDOMWorkAreaHScrollBarSkin );
				
				scroller.horizontalScrollBar.height = 12;
				
				scroller.horizontalScrollBar.thumb.height = 12;
				scroller.verticalScrollBar.thumb.width = 12;
				
				scroller.horizontalScrollBar.track.height = 12;
				scroller.verticalScrollBar.track.width = 12;
			}
			
			private function mouseWheelHandler( event : MouseEvent ) : void
			{
				if ( event.ctrlKey )
				{		
					if ( event.delta > 0 && scale < 3)
						scale += 0.1;
					else if ( event.delta < 0 && scale > 0.25 )
						scale -= 0.1;
					
					
					event.stopImmediatePropagation();
				}
				
				event.delta = event.delta > 0 ? 30 : -30;
			}
			
			protected function sparkskin1_removeHandler(event:FlexEvent):void
			{
				removeEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler, true );
			}
			
			private function mouseMoveHandler( event : MouseEvent ) : void
			{	
				pt = new Point(event.localX, event.localY);
				
				pt = event.target.localToGlobal(pt);
				
				pt=multiRectGroup.globalToContent(pt);
				
				multiRect.width = pt.x - multiRect.x;
				multiRect.height = pt.y - multiRect.y;
			}
			
			private function mouseUpHandler( event : MouseEvent ) : void
			{
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler, true );
				removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, true );
				
				if ( multiRect.width < 0 )
				{
					multiRect.x += multiRect.width;
					multiRect.width = -1 * multiRect.width;
				}
				
				if ( multiRect.height < 0 )
				{
					multiRect.y += multiRect.height;
					multiRect.height = -1 * multiRect.height;
				}
				
				hostComponent.setMultiSelectInRect( multiRect.x, multiRect.y, multiRect.x + multiRect.width, multiRect.y + multiRect.height );
				
				multiRect.width = 0;
				multiRect.height = 0;
				
				multiRectGroup.removeAllElements();
			}
			
			private function mouseDownHandler( event : MouseEvent ) : void
			{
				setFocus();
				
				if ( !event.ctrlKey && event.target is Group && event.target.id == "scaleGroup" )
				{
					if ( !event.shiftKey )
						hostComponent.removeAllSelectedElements();
					
					pt = new Point(event.localX, event.localY);
					
					pt = event.target.localToGlobal(pt);
					
					pt=multiRectGroup.globalToContent(pt);
					
					multiRect.left = pt.x;
					multiRect.top = pt.y;
					
					multiRectGroup.addElement( multiRect );
					
					addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler, true, 0, true );
					addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, true, 0, true );
					
					return;
				}
				
				if ( !event.ctrlKey )
					return;
				
				scale = 1;
				
				_NeedSetVerticalScrollPosition = true;
				
				pt = new Point(event.localX, event.localY);
				pt = event.target.localToGlobal(pt);
				
				pt=scroller.globalToContent(pt);
				
				scrollPosition = pt;
			}
			
			protected function scroller_updateCompleteHandler(event:FlexEvent):void
			{
				if ( _NeedSetVerticalScrollPosition )
				{
					_NeedSetVerticalScrollPosition = false;
					
					scroller.verticalScrollBar.viewport.verticalScrollPosition = scrollPosition.y - scroller.height / 2;
					scroller.horizontalScrollBar.viewport.horizontalScrollPosition = scrollPosition.x - scroller.width / 2;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		
		<s:State name="normal"/>
		<s:State name="unsaved"/>
		<s:State name="disabled"/>
	</s:states>
	
	<s:Rect id="backgroundRect"
			bottom="0" left="0" right="0" top="0">
		
		<s:fill>
			
			<s:SolidColor color="gray"
						  alpha=".5"/>
		</s:fill>
		
		<s:stroke>
			
			<s:SolidColorStroke/>
		</s:stroke>
	</s:Rect>
	
	<s:Rect height="20"
			left="1" right="1" top="1">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xCDCDCD"/>
				<s:GradientEntry color="0xE8E8E8"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<s:HGroup height="20"
			  left="1" right="1" top="1"
			  gap="0">
		
		<button:WorkAreaButton id="saveButton"
							   enabled="true" enabled.disabled="false" height="20" icon="{VDOMImage.Save}"
							   label="{ resourceManager.getString( 'Tree_General', 'work_area_save' ) }"
							   highlighted="false" highlighted.unsaved="true"/>
		
		<button:WorkAreaButton id="undoButton"
							   enabled="false" enabled.unsaved="true" height="20" icon="{VDOMImage.Undo}" visible="false"
							   label="{ resourceManager.getString( 'Tree_General', 'work_area_undo' ) }"/>
		
		<mx:Spacer width="100%"/>
		
		<button:WorkAreaButton id="setHome"
							   height="20" icon="@Embed('assets/home.png')" label="{ resourceManager.getString( 'Tree_General', 'properties_panel_btn_start' ) }"
							   click="hostComponent.dispatchEvent( new WorkAreaEvent ( WorkAreaEvent.SET_START ) )"/>
		
		<button:WorkAreaButton id="newPageButton"
							   height="20" icon="@Embed('assets/new.png')" label="{ resourceManager.getString( 'Tree_General', 'work_area_new_page' ) }"
							   click="hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.CREATE_PAGE ) )"/>
		
		<button:WorkAreaButton id="autoSpaceingButton"
							   height="20" icon="@Embed('assets/spacing.png')" label="{ resourceManager.getString( 'Tree_General', 'work_area_auto_spacing' ) }"
							   click="hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.AUTO_SPACING ) )"/>
		
		<button:WorkAreaButton id="expandAllButton"
							   height="20" icon="@Embed('assets/expand.png')"
							   click="expandAllButton_clickHandler()"/>
		
		<button:WorkAreaButton id="showSignatureButton"
							   height="20" icon="@Embed('assets/signature.png')" label="{ hostComponent.isSignatureShowed ? resourceManager.getString( 'Tree_General', 'work_area_hide_signature' ) : resourceManager.getString( 'Tree_General', 'work_area_show_signature' ) }"
							   click="showSignatureButton_clickHandler()"/>
	</s:HGroup>
	
	<s:Group id="workLayers"
			 bottom="0" left="0" right="0" top="22">
		<s:Rect height="100%" width="100%">
			<s:fill>
				<s:BitmapFill source = "{VDOMImage.BG_WorkArea}" smooth="true" fillMode="repeat"/>
			</s:fill>
		</s:Rect>
		
		<components1:VDOMScroller id="scroller"
								  height="100%" width="100%" creationComplete="scroller_creationCompleteHandler(event)"
								  updateComplete="scroller_updateCompleteHandler(event)">
			
			<s:Group id="scaleGroup" scaleX="{scale}" scaleY="{scale}">
				<s:Group id="linkagesLayer"/>
				<s:Group id="contentGroup"/>
				<s:Group id="multiRectGroup"/>
			</s:Group>
		</components1:VDOMScroller>
	</s:Group>
</s:SparkSkin>
