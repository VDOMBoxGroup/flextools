<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:components="net.vdombox.ide.modules.tree.view.components.*"
			 xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 creationComplete="creationCompleteHandler()" xmlns:components1="net.vdombox.components.*" xmlns:components2="net.vdombox.ide.common.view.components.*">

	<fx:Metadata>
		<![CDATA[ 
			[HostComponent("net.vdombox.ide.modules.tree.view.components.WorkArea")]
		]]>
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			
			import net.vdombox.ide.common.view.components.VDOMImage;
			import net.vdombox.ide.common.view.skins.VDOMScrollBarSkin.VDOMWorkAreaHScrollBarSkin;
			import net.vdombox.ide.common.view.skins.VDOMScrollBarSkin.VDOMWorkAreaVScrollBarSkin;
			import net.vdombox.ide.modules.tree.events.WorkAreaEvent;

			private var isExpanded : Boolean;

			private function creationCompleteHandler() : void
			{
				isExpanded = false;
				expandAllButton.label = resourceManager.getString( 'Tree_General', 'work_area_expand_all' );

				BindingUtils.bindSetter( allExpandedChanged, hostComponent, "isAllExpanded", true );
				BindingUtils.bindSetter( allExpandedChanged, hostComponent, "isAllCollapsed", true );
			}

			private function allExpandedChanged( value : Boolean ) : void
			{
				var oldIsExpanded : Boolean = isExpanded;

				if ( !hostComponent.isAllExpanded && hostComponent.isAllCollapsed )
					isExpanded = false;
				else
					isExpanded = true;

				if ( oldIsExpanded == isExpanded )
					return;

				if ( isExpanded )
					expandAllButton.label = resourceManager.getString( 'Tree_General', 'work_area_collapse_all' );
				else
					expandAllButton.label = resourceManager.getString( 'Tree_General', 'work_area_expand_all' );
			}

			private function expandAllButton_clickHandler() : void
			{
				if ( isExpanded )
					hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.COLLAPSE_ALL ) );
				else
					hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.EXPAND_ALL ) );
			}

			protected function showSignatureButton_clickHandler() : void
			{
				if ( hostComponent.isSignatureShowed )
					hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.HIDE_SIGNATURE ) );
				else
					hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.SHOW_SIGNATURE ) );

				hostComponent.isSignatureShowed = !hostComponent.isSignatureShowed;
			}
			
			protected function scroller_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				scroller.verticalScrollBar.setStyle( "skinClass", VDOMWorkAreaVScrollBarSkin );
				scroller.horizontalScrollBar.setStyle( "skinClass", VDOMWorkAreaHScrollBarSkin );
				addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler, true, 0, true );
			}
			
			private function mouseWheelHandler( event : MouseEvent ) : void
			{
				event.delta = event.delta > 0 ? 20 : -20;
			}
			
		]]>
	</fx:Script>

	<s:states>

		<s:State name="normal"/>
		<s:State name="unsaved"/>
		<s:State name="disabled"/>
	</s:states>

	<s:Rect id="backgroundRect"
			bottom="0" left="0" right="0" top="0">

		<s:fill>

			<s:SolidColor color="gray"
						  alpha=".5"/>
		</s:fill>

		<s:stroke>

			<s:SolidColorStroke/>
		</s:stroke>
	</s:Rect>

	<s:Rect height="20"
			left="1" right="1" top="1">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xCDCDCD"/>
				<s:GradientEntry color="0xE8E8E8"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<s:HGroup height="20"
			  left="1" right="1" top="1"
			  gap="0">

		<components:WorkAreaButton id="saveButton"
								   enabled="true" enabled.disabled="false" height="20" icon="{VDOMImage.Save}"
								   label="{ resourceManager.getString( 'Tree_General', 'work_area_save' ) }"
								   highlighted="false" highlighted.unsaved="true"/>

		<components:WorkAreaButton id="undoButton"
								   enabled="false" enabled.unsaved="true" height="20" icon="@Embed('assets/undo.png')"
								   label="{ resourceManager.getString( 'Tree_General', 'work_area_undo' ) }"/>

		<mx:Spacer width="100%"/>

		<components:WorkAreaButton id="newPageButton"
								   height="20" icon="@Embed('assets/new.png')" label="{ resourceManager.getString( 'Tree_General', 'work_area_new_page' ) }"
								   click="hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.CREATE_PAGE ) )"/>

		<components:WorkAreaButton id="autoSpaceingButton"
								   height="20" icon="@Embed('assets/spacing.png')" label="{ resourceManager.getString( 'Tree_General', 'work_area_auto_spacing' ) }"
								   click="hostComponent.dispatchEvent( new WorkAreaEvent( WorkAreaEvent.AUTO_SPACING ) )"/>

		<components:WorkAreaButton id="expandAllButton"
								   height="20" icon="@Embed('assets/expand.png')"
								   click="expandAllButton_clickHandler()"/>

		<components:WorkAreaButton id="showSignatureButton"
								   height="20" icon="@Embed('assets/signature.png')" label="{ hostComponent.isSignatureShowed ? resourceManager.getString( 'Tree_General', 'work_area_hide_signature' ) : resourceManager.getString( 'Tree_General', 'work_area_show_signature' ) }"
								   click="showSignatureButton_clickHandler()"/>
	</s:HGroup>

	<s:Group id="workLayers"
			 bottom="0" left="0" right="0" top="22">
		<s:Rect height="100%" width="100%">
			<s:fill>
				<s:SolidColor color="black"
							  alpha="0.0"/>
			</s:fill>
		</s:Rect>

		<components2:VDOMScroller id="scroller"
					height="100%" width="100%" creationComplete="scroller_creationCompleteHandler(event)">
			<s:VGroup paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Group>
					<s:Group id="linkagesLayer"/>
					<s:Group id="contentGroup"/>
				</s:Group>
			</s:VGroup>
		</components2:VDOMScroller>
	</s:Group>
</s:SparkSkin>
