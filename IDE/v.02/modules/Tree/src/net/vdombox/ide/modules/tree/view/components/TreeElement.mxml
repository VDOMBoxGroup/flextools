<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:components="net.vdombox.ide.modules.tree.view.components.*"
					  xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:mx="library://ns.adobe.com/flex/halo"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  width="200" x="@{ _treeElementVO.left }" y="@{ _treeElementVO.top }"
					  skinClass="net.vdombox.ide.modules.tree.view.skins.TreeElementSkin"
					  creationComplete="creationCompleteHandler()" 
					  remove="removeHandler()"				 
					  >

	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Image;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import net.vdombox.ide.common.model._vo.AttributeVO;
			import net.vdombox.ide.common.model._vo.ResourceVO;
			import net.vdombox.ide.common.model._vo.VdomObjectAttributesVO;
			import net.vdombox.ide.common.view.components.VDOMImage;
			import net.vdombox.ide.common.view.components.button.AlertButton;
			import net.vdombox.ide.common.view.components.windows.Alert;
			import net.vdombox.ide.modules.tree.events.TreeElementEvent;
			import net.vdombox.ide.modules.tree.model.vo.TreeElementVO;
			import net.vdombox.ide.modules.tree.view.skins.TreeElementSkin;
			
			import spark.components.Group;
			import spark.filters.DropShadowFilter;

			[SkinPart( required="true" )]
			public var headerGroup : Group;

			[SkinPart( required="true" )]
			public var typeImage : SmoothImage;
			
			[SkinPart( required="true" )]
			public var deleteButton : Image;

			[Bindable]
			private var _typeResource : ResourceVO;

			[Bindable]
			private var _pageResource : ResourceVO

			[Bindable]
			private var _treeElementVO : TreeElementVO;

			[Bindable]
			private var _title : String;
			
			private var _nameAttribute : String;

			[Bindable]
			private var _typeName : String;

			[Bindable]
			public var isIndexPage : Boolean;
			
			private var _selected : Boolean;

			private var mouseOffcetX : int;

			private var mouseOffcetY : int;
			
			[Embed( source = "assets/arrow.png" )]
			public static var array : Class;
			
			private var _vdomObjectAttributesVO : VdomObjectAttributesVO;
			
			[Bindable]
			private var descriptionAttributeVO : AttributeVO;

			public function get vdomObjectAttributesVO():VdomObjectAttributesVO
			{
				return _vdomObjectAttributesVO;
			}

			public function set vdomObjectAttributesVO(value:VdomObjectAttributesVO):void
			{
				_vdomObjectAttributesVO = value;
				descriptionAttributeVO = getAttributeByName( "description" );
				_title = getAttributeValue( "title" );
				
			}

			[Bindable]
			public function get typeResource() : ResourceVO
			{
				return _typeResource;
			}

			public function set typeResource( value : ResourceVO ) : void
			{
				_typeResource = value;
			}

			[Bindable]
			public function get nameAttribute() : String
			{
				return _nameAttribute;
			}
			
			public function set nameAttribute(name:String) : void
			{
				_nameAttribute = name;
			}
						
			[Bindable]
			public function get typeName() : String
			{
				return _typeName;
			}

			public function set typeName( value : String ) : void
			{
				_typeName = value;
			}

			public function get treeElementVO() : TreeElementVO
			{
				return _treeElementVO;
			}

			public function set treeElementVO( value : TreeElementVO ) : void
			{
				_treeElementVO = value;
				
				if( _treeElementVO && _treeElementVO.pageVO && _treeElementVO.pageVO.id == _treeElementVO.pageVO.applicationVO.indexPageID )
					isIndexPage = true;
				else
					isIndexPage = false;
				
				if (treeElementVO)
					nameAttribute = treeElementVO.pageVO.name;
				
				/*if ( image && !treeElementVO.resourceVO )
				{
					image.source = array;
					rectImage.visible = true;
				}*/
			}

			[Bindable]
			public function get selected() : Boolean
			{
				return _selected;
			}

			public function set selected( value : Boolean ) : void
			{
				if ( _selected != value )
					_selected = value;
			}
			
			private function getAttributeValue( attributeName : String ) : String
			{
				var result : String;
				
				for each ( var attributeVO : AttributeVO in _vdomObjectAttributesVO.attributes )
				{
					if ( attributeVO.name == attributeName )
					{
						result = attributeVO.value;
						break;
					}
				}
				
				return result;
			}
			
			private function getAttributeByName( name : String ) : AttributeVO
			{
				var result : AttributeVO;
				
				for each ( var attributeVO : AttributeVO in _vdomObjectAttributesVO.attributes )
				{
					if ( attributeVO.name == name )
					{
						result = attributeVO;
						
						break;
					}
				}
				
				return result;
			}

			override protected function partAdded( partName : String, instance : Object ) : void
			{
				super.partAdded( partName, instance );

				if ( instance == headerGroup )
					headerGroup.addEventListener( MouseEvent.MOUSE_DOWN, header_mouseDownHandler, false, 0, true );

				if ( instance == typeImage )
					typeImage.addEventListener( MouseEvent.MOUSE_DOWN, header_mouseDownHandler, false, 0, true );
				
				if ( instance == deleteButton )
					deleteButton.addEventListener( MouseEvent.CLICK, deleteButton_clickHandler, false, 0, true );
			}

			private function sizeChanged( value : Object ) : void
			{
				if( _treeElementVO )
				{
					_treeElementVO.width = width;
					_treeElementVO.height = height;
				}					
			}
			
			// todo Bad decision. Remake.
			private function show():void
			{
				if ( selected )
				{
					selected = false;
					selected = true;
				}
			}
			
			private function creationCompleteHandler() : void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.CREATED ) );

				BindingUtils.bindSetter( sizeChanged, this, "width" );
				BindingUtils.bindSetter( sizeChanged, this, "height" );
								
				addEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler );
				show();
				
				/*if ( !treeElementVO.resourceVO || !treeElementVO.resourceVO.data )
				{
					image.source = array;
					rectImage.visible = true;
				}*/
				
			
			}

			private function removeHandler() : void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.REMOVED ) );
			}
			
			private function mouseDownHandler( event : MouseEvent ) : void
			{
				if( deleteButton !== event.target )
					dispatchEvent( new TreeElementEvent( TreeElementEvent.SELECTION ) );
			}

			private function header_mouseDownHandler( event : MouseEvent ) : void
			{
				stage.addEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandlerExt );

				mouseOffcetX = mouseX;
				mouseOffcetY = mouseY;
			}

			private function stage_mouseMoveHandler( event : MouseEvent ) : void
			{
				var newX : int = parent.mouseX - mouseOffcetX;
				var newY : int = parent.mouseY - mouseOffcetY;

				if ( newX < 0 )
					x = 0;
				else
					x = newX;

				if ( newY < 0 )
					y = 0;
				else
					y = newY;
				
			/*	treeElementVO.left = x;
				treeElementVO.top = y;*/

			}

			private function stage_mouseMoveHandlerExt( event : MouseEvent ) : void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.MOVED ) );
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandlerExt );
			}
			
			private function stage_mouseUpHandler( event : MouseEvent ) : void
			{
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler );
				stage.removeEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
			}

			private function setStartPageButton_clickHandler( event : MouseEvent ) : void
			{
//				dispatchEvent( new TreeElementEvent( TreeElementEvent.CREATE_LINKAGE_REQUEST ) );
			}
			
			private function deleteButton_clickHandler( event : MouseEvent ) :void
			{
				Alert.setPatametrs( "Delete", "Cancel", VDOMImage.Delete );
				
				Alert.Show( "Are you sure want to delete " + nameAttribute + " ?",AlertButton.OK_No, this.parentApplication, deleteHandler);
				
				function deleteHandler(event : CloseEvent) : void
				{
					if (event.detail == Alert.YES)
					{
						dispatchEvent( new TreeElementEvent( TreeElementEvent.DELETE ) );
					}
				}
				
			}
			
			protected function textinput1_keyDownHandler(event:KeyboardEvent):void
			{
				if (treeElementVO && treeElementVO.pageVO)
				{
					treeElementVO.pageVO.name = txtName.text;
					dispatchEvent( new TreeElementEvent ( TreeElementEvent.SAVE_PAGE_NAME ) );
				}
			}
			
			protected function txtName_focusOutHandler(event:FocusEvent):void
			{
				if (treeElementVO && treeElementVO.pageVO)
				{
					treeElementVO.pageVO.name = txtName.text;
					dispatchEvent( new TreeElementEvent ( TreeElementEvent.SAVE_PAGE_NAME ) );
				}
				
				txtName.setStyle("borderVisible", false);
				txtName.setStyle("contentBackgroundAlpha", 0);
			}
			
			protected function txtDescription_focusOutHandler(event:FocusEvent):void
			{
				if ( _vdomObjectAttributesVO )
				{
					dispatchEvent( new TreeElementEvent ( TreeElementEvent.SAVE_PAGE_ATTRIBUTES ) )
				}
				
			}
			
			protected function txtName_focusInHandler(event:FocusEvent):void
			{
				txtName.setStyle("borderVisible", true);
				txtName.setStyle("contentBackgroundAlpha", 1);
			}
			
		]]>
	</fx:Script>

	<s:layout>

		<s:VerticalLayout gap="1"/>
	</s:layout>

	<s:VGroup width="100%" gap="5">

		<s:HGroup width="100%" height="100%" paddingLeft="5" paddingTop="5" gap="5">
			
			<!--<s:Group width="55" height="55">
				<s:Rect id="rectImage" width="100%" height="100%" visible="false">
					<s:stroke>
						<s:SolidColorStroke color="0x000000"
											weight="1"/>
					</s:stroke>
					<s:fill>
						<s:SolidColor color="white"/>
					</s:fill>
				</s:Rect>
				
				<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<components:SmoothImage id="image" maxHeight="55" maxWidth="55"
											source="{ _treeElementVO.resourceVO.data }" />
				</s:HGroup>
			</s:Group> -->
			
			
			<s:Group width="100%" height="100%">
				<s:Rect width="100%" height="100%"
						filters="{[ new DropShadowFilter(4, 45, 0xC7C7C7, 1,4,4,1,1,true,false) ]}">
					<s:stroke>
						<s:SolidColorStroke color="0xC7C7C7"
											weight="2"/>
					</s:stroke>
					<s:fill>
						<s:SolidColor color="white"/>
					</s:fill>
				</s:Rect>
				
				<s:VGroup width="100%" height="100%" gap="0">
					<s:TextInput id="txtName" text="{ nameAttribute }" width="100%"
								 borderVisible="false" contentBackgroundAlpha="0" 
								 keyDown="textinput1_keyDownHandler(event)" focusIn="txtName_focusInHandler(event)" focusOut="txtName_focusOutHandler(event)"/>
					
					<s:Line width="100%">
						<s:stroke>
							<s:SolidColorStroke color="0xC7C7C7" weight="2"/>
						</s:stroke>
					</s:Line>
					
					<s:Scroller width="100%" height="100%" maxHeight="150">
						<s:Group>
							<s:RichEditableText id="txtDescription" text="@{ descriptionAttributeVO.value }" width="100%"
										color="0x474747" paddingBottom="3" paddingLeft="3" paddingRight="3"
										paddingTop="3" focusOut="txtDescription_focusOutHandler(event)" />
						</s:Group>
					</s:Scroller>
				</s:VGroup>
				
				
			</s:Group>
			
		</s:HGroup>
		

		<s:Label text="{_typeName.toUpperCase()}"
				 bottom="3" color="0xC7C7C7" width="100%"
				 textAlign="center"
				 maxDisplayedLines="1"/>

	</s:VGroup>

</s:SkinnableContainer>
