<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:components="net.vdombox.ide.modules.tree.view.components.*"
					  xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:mx="library://ns.adobe.com/flex/halo"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  width="200" x="@{ _treeElementVO.left }" y="@{ _treeElementVO.top }"
					  skinClass="net.vdombox.ide.modules.tree.view.skins.TreeElementSkin"
					  creationComplete="creationCompleteHandler()" removed="removedHandler()">

	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Image;
			import mx.events.FlexEvent;
			
			import net.vdombox.ide.common.vo.ResourceVO;
			import net.vdombox.ide.modules.tree.events.TreeElementEvent;
			import net.vdombox.ide.modules.tree.model.vo.TreeElementVO;
			import net.vdombox.ide.modules.tree.view.skins.TreeElementSkin;
			
			import spark.components.Group;
			import spark.filters.DropShadowFilter;

			[SkinPart( required="true" )]
			public var headerGroup : Group;

			[SkinPart( required="true" )]
			public var typeImage : SmoothImage;
			
			[SkinPart( required="true" )]
			public var deleteButton : ElementButton;

			[Bindable]
			private var _typeResource : ResourceVO;

			[Bindable]
			private var _pageResource : ResourceVO

			[Bindable]
			private var _treeElementVO : TreeElementVO;

			private var _title : String;

			[Bindable]
			private var _description : String;

			[Bindable]
			private var _typeName : String;

			[Bindable]
			public var isIndexPage : Boolean;
			
			private var _selected : Boolean;

			private var mouseOffcetX : int;

			private var mouseOffcetY : int;

			[Bindable]
			public function get typeResource() : ResourceVO
			{
				return _typeResource;
			}

			public function set typeResource( value : ResourceVO ) : void
			{
				_typeResource = value;
			}

			[Bindable]
			public function get description() : String
			{
				return _description;
			}

			public function set description( value : String ) : void
			{
				_description = value;
			}

			[Bindable]
			public function get title() : String
			{
				return _title;
			}

			public function set title( value : String ) : void
			{
				_title = value;
			}

			[Bindable]
			public function get typeName() : String
			{
				return _typeName;
			}

			public function set typeName( value : String ) : void
			{
				_typeName = value;
			}

			public function get treeElementVO() : TreeElementVO
			{
				return _treeElementVO;
			}

			public function set treeElementVO( value : TreeElementVO ) : void
			{
				_treeElementVO = value;
				
				if( _treeElementVO && _treeElementVO.pageVO && _treeElementVO.pageVO.id == _treeElementVO.pageVO.applicationVO.indexPageID )
					isIndexPage = true;
				else
					isIndexPage = false;
			}

			[Bindable]
			public function get selected() : Boolean
			{
				return _selected;
			}

			public function set selected( value : Boolean ) : void
			{
				if ( _selected != value )
					_selected = value;
			}

			override protected function partAdded( partName : String, instance : Object ) : void
			{
				super.partAdded( partName, instance );

				if ( instance == headerGroup )
					headerGroup.addEventListener( MouseEvent.MOUSE_DOWN, header_mouseDownHandler, false, 0, true );

				if ( instance == typeImage )
					typeImage.addEventListener( MouseEvent.MOUSE_DOWN, header_mouseDownHandler, false, 0, true );
				
				if ( instance == deleteButton )
					deleteButton.addEventListener( MouseEvent.CLICK, deleteButton_clickHandler, false, 0, true );
			}

			private function sizeChanged( value : Object ) : void
			{
				if( _treeElementVO )
				{
					_treeElementVO.width = width;
					_treeElementVO.height = height;
				}
					
			}
			
			private function creationCompleteHandler() : void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.CREATED ) );

				BindingUtils.bindSetter( sizeChanged, this, "width" );
				BindingUtils.bindSetter( sizeChanged, this, "height" );
				
				addEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler );
			}

			private function removedHandler() : void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.REMOVED ) );
			}
			
			private function mouseDownHandler( event : MouseEvent ) : void
			{
				if( deleteButton !== event.target )
					dispatchEvent( new TreeElementEvent( TreeElementEvent.SELECTION ) );
			}

			private function header_mouseDownHandler( event : MouseEvent ) : void
			{
				stage.addEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandlerExt );

				mouseOffcetX = mouseX;
				mouseOffcetY = mouseY;
			}

			private function stage_mouseMoveHandler( event : MouseEvent ) : void
			{
				var newX : int = parent.mouseX - mouseOffcetX;
				var newY : int = parent.mouseY - mouseOffcetY;

				if ( newX < 0 )
					x = 0;
				else
					x = newX;

				if ( newY < 0 )
					y = 0;
				else
					y = newY;
			}

			private function stage_mouseMoveHandlerExt( event : MouseEvent ) : void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.MOVED ) );
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandlerExt );
			}
			
			private function stage_mouseUpHandler( event : MouseEvent ) : void
			{
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler );
				stage.removeEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
			}

			private function setStartPageButton_clickHandler( event : MouseEvent ) : void
			{
//				dispatchEvent( new TreeElementEvent( TreeElementEvent.CREATE_LINKAGE_REQUEST ) );
			}
			
			private function deleteButton_clickHandler( event : MouseEvent ) :void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.DELETE ) );
			}
		]]>
	</fx:Script>

	<s:layout>

		<s:VerticalLayout gap="1"/>
	</s:layout>

	<s:Group height="80" width="100%">

		<components:SmoothImage height="55" source="{ _treeElementVO.resourceVO.data }" width="55"
								left="5" top="5"/>

		<s:Rect bottom="19" left="64" right="4" top="4"
				filters="{[ new DropShadowFilter(4, 45, 0xC7C7C7, 1,4,4,1,1,true,false) ]}">
			<s:stroke>
				<s:SolidColorStroke color="0xC7C7C7"
									weight="2"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="white"/>
			</s:fill>
		</s:Rect>

		<s:Scroller bottom="20" left="65" right="5" top="5">
			<s:Group>
				<s:RichText text="{ _description }" width="100%"
							color="0x474747" paddingBottom="3" paddingLeft="3" paddingRight="3"
							paddingTop="3"/>
			</s:Group>
		</s:Scroller>

		<s:Label text="{_typeName.toUpperCase()}"
				 bottom="3" color="0xC7C7C7" left="75" right="5"
				 textAlign="right"
				 maxDisplayedLines="1"/>

	</s:Group>

</s:SkinnableContainer>
