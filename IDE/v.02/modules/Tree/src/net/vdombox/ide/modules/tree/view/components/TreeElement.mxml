<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableComponent xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/halo" 
					  
					  height="125" width="200" x="@{ _treeElementVO.left }"
					  y="@{ _treeElementVO.top }"
					  skinClass="net.vdombox.ide.modules.tree.view.skins.TreeElementSkin">

	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Image;

			import net.vdombox.ide.common.vo.ResourceVO;
			import net.vdombox.ide.modules.tree.events.TreeElementEvent;
			import net.vdombox.ide.modules.tree.model.vo.TreeElementVO;
			import net.vdombox.ide.modules.tree.view.skins.TreeElementSkin;

			import spark.components.Group;

			[SkinPart( required="true" )]
			public var minimizeButton : Image;

			[SkinPart( required="true" )]
			public var createLineButton : Image;

			[SkinPart( required="true" )]
			public var deleteButton : Image;

			[SkinPart( required="true" )]
			public var setStartPageButton : Image;

			[SkinPart( required="true" )]
			public var header : Group;

			[Bindable]
			private var _typeResource : ResourceVO;

			[Bindable]
			private var _pageResource : ResourceVO

			[Bindable]
			private var _treeElementVO : TreeElementVO;

			private var _title : String;

			private var _description : String;

			private var _typeName : String;

			private var _selected : Boolean;

			private var mouseOffcetX : int;

			private var mouseOffcetY : int;

			private var widthWatcher : ChangeWatcher;

			private var heightWatcher : ChangeWatcher;

			private var stateWatcher : ChangeWatcher;


			[Bindable]
			public function get typeResource() : ResourceVO
			{
				return _typeResource;
			}

			public function set typeResource( value : ResourceVO ) : void
			{
				_typeResource = value;
			}

			[Bindable]
			public function get pageResource() : ResourceVO
			{
				return _pageResource;
			}

			public function set pageResource( value : ResourceVO ) : void
			{
				_pageResource = value;
			}

			[Bindable]
			public function get description() : String
			{
				return _description;
			}

			public function set description( value : String ) : void
			{
				_description = value;
			}

			[Bindable]
			public function get title() : String
			{
				return _title;
			}

			public function set title( value : String ) : void
			{
				_title = value;
			}

			[Bindable]
			public function get typeName() : String
			{
				return _typeName;
			}

			public function set typeName( value : String ) : void
			{
				_typeName = value;
			}

			public function set treeElementVO( value : TreeElementVO ) : void
			{
				_treeElementVO = value;

				widthWatcher = BindingUtils.bindProperty( _treeElementVO, "width", this, "width", false,
														  true );
				
				heightWatcher = BindingUtils.bindProperty( _treeElementVO, "height", this, "height",
														   false, true );
				
				stateWatcher = BindingUtils.bindSetter( statePropertyChanged, _treeElementVO, "state",
														false, true );
			}

			public function set selected( value : Boolean ) : void
			{
				if ( _selected != value )
				{
					_selected = value;
					callLater( invalidateSkinState );
				}
			}

			override protected function getCurrentSkinState() : String
			{
				var skinStateName : String;

				if ( !_treeElementVO )
					return skin.currentState;

				if ( _treeElementVO.state )
				{
					if ( _selected )
						skinStateName = "normalSelected";
					else
						skinStateName = "normal";

					height = 125;
				}
				else
				{
					if ( _selected )
						skinStateName = "minimizedSelected";
					else
						skinStateName = "minimized";

					height = 30;
				}

				return skinStateName;
			}

			override protected function attachSkin() : void
			{
				super.attachSkin();

				skin.addEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true );
			}

			override protected function partAdded( partName : String, instance : Object ) : void
			{
				switch ( partName )
				{
					case "header":
					{
						header.addEventListener( MouseEvent.MOUSE_DOWN, header_mouseDownHandler, false,
												 0, true );
						break;
					}

					case "minimizeButton":
					{
						minimizeButton.addEventListener( MouseEvent.CLICK, minimizeButton_clickHandler,
														 true, 0, true );
						break;
					}

					case "createLineButton":
					{
						createLineButton.addEventListener( MouseEvent.CLICK, createLineButton_clickHandler,
														   false, 0, true );
						break;
					}

					case "deleteButton":
					{
						deleteButton.addEventListener( MouseEvent.CLICK, deleteButton_clickHandler, false,
													   0, true );
						break;
					}

					case "setStartPageButton":
					{
						setStartPageButton.addEventListener( MouseEvent.CLICK, setStartPageButton_clickHandler,
															 false, 0, true );
						break;
					}
				}
			}

			private function statePropertyChanged( object : Object ) : void
			{
				callLater( invalidateSkinState );
			}

			private function mouseDownHandler( event : MouseEvent ) : void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.ELEMENT_SELECTION ) );
			}

			private function header_mouseDownHandler( event : MouseEvent ) : void
			{
				stage.addEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler );

				mouseOffcetX = mouseX;
				mouseOffcetY = mouseY;
			}

			private function stage_mouseMoveHandler( event : MouseEvent ) : void
			{
				var newX : int = parent.mouseX - mouseOffcetX;
				var newY : int = parent.mouseY - mouseOffcetY;

				if ( newX < 0 )
					x = 0;
				else
					x = newX;

				if ( newY < 0 )
					y = 0;
				else
					y = newY;
			}

			private function stage_mouseUpHandler( event : MouseEvent ) : void
			{
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler );
				stage.removeEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
			}

			private function minimizeButton_clickHandler( event : MouseEvent ) : void
			{
				_treeElementVO.state = !_treeElementVO.state;

				callLater( invalidateSkinState );
			}

			private function createLineButton_clickHandler( event : MouseEvent ) : void
			{

			}

			private function deleteButton_clickHandler( event : MouseEvent ) : void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.DELETE_REQUEST ) );
			}

			private function setStartPageButton_clickHandler( event : MouseEvent ) : void
			{
				dispatchEvent( new TreeElementEvent( TreeElementEvent.CREATE_LINKAGE_REQUEST ) );
			}
		]]>
	</fx:Script>
</s:SkinnableComponent>
