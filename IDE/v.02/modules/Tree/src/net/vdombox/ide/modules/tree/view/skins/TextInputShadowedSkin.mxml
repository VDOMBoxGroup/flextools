<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 alpha.disabled="0.5" blendMode="normal">

	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.TextInput")]
		]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		import spark.filters.DropShadowFilter;
		
		private var paddingChanged : Boolean;

		/* Define the skin elements that should not be colorized. */
		static private const exclusions : Array = [ "background", "textDisplay" ];

		/**
		 * @private
		 */
		override public function get colorizeExclusions() : Array
		{
			return exclusions;
		}

		/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
		static private const contentFill : Array = [ "bgFill" ];

		/**
		 *  @private
		 */
		override public function get contentItems() : Array
		{
			return contentFill
		}
		;

		/**
		 *  @private
		 */
		override protected function commitProperties() : void
		{
			super.commitProperties();

			if ( paddingChanged )
			{
				updatePadding();
				paddingChanged = false;
			}
		}

		/**
		 * @private
		 */
		override protected function initializationComplete() : void
		{
			useChromeColor = true;
			super.initializationComplete();
		}

		/**
		 *  @private
		 */
		override protected function updateDisplayList( unscaledWidth : Number, unscaledHeight : Number ) : void
		{
			if ( getStyle( "borderVisible" ) == true )
			{
				border.visible = true;
				shadow.visible = true;
				background.left = background.top = background.right = background.bottom = 1;
				textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 1;
			}
			else
			{
				border.visible = false;
				shadow.visible = false;
				background.left = background.top = background.right = background.bottom = 0;
				textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
			}

			borderStroke.color = getStyle( "borderColor" );
			borderStroke.alpha = getStyle( "borderAlpha" );

			super.updateDisplayList( unscaledWidth, unscaledHeight );
		}

		/**
		 *  @private
		 */
		private function updatePadding() : void
		{
			if ( !textDisplay )
				return;

			// Push padding styles into the textDisplay
			var padding : Number;

			padding = getStyle( "paddingLeft" );
			if ( textDisplay.getStyle( "paddingLeft" ) != padding )
				textDisplay.setStyle( "paddingLeft", padding );

			padding = getStyle( "paddingTop" );
			if ( textDisplay.getStyle( "paddingTop" ) != padding )
				textDisplay.setStyle( "paddingTop", padding );

			padding = getStyle( "paddingRight" );
			if ( textDisplay.getStyle( "paddingRight" ) != padding )
				textDisplay.setStyle( "paddingRight", padding );

			padding = getStyle( "paddingBottom" );
			if ( textDisplay.getStyle( "paddingBottom" ) != padding )
				textDisplay.setStyle( "paddingBottom", padding );
		}

		/**
		 *  @private
		 */
		override public function styleChanged( styleProp : String ) : void
		{
			var allStyles : Boolean = !styleProp || styleProp == "styleName";

			super.styleChanged( styleProp );

			if ( allStyles || styleProp.indexOf( "padding" ) == 0 )
			{
				paddingChanged = true;
				invalidateProperties();
			}
		}
	</fx:Script>

	<fx:Script>
		<![CDATA[
			/**
			 * @private
			 */
			private static const focusExclusions : Array = [ "textDisplay" ];

			/**
			 *  @private
			 */
			override public function get focusSkinExclusions() : Array
			{
				return focusExclusions;
			}
			;
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
		<s:State name="disabledWithPrompt"/>
		<s:State name="normalWithPrompt"/>
	</s:states>

	<!-- border -->
	<!--- @private -->
	<s:Rect id="border"
			bottom="0" left="0" right="0" top="0">
		<s:stroke>
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke"
								weight="1"/>
		</s:stroke>
	</s:Rect>

	<!-- fill -->
	<!--- Defines the appearance of the TextInput component's background. -->
	<s:Rect id="background"
			bottom="1" left="1" right="1" top="1"
			filters="{[ new DropShadowFilter(3, 45, 0xC7C7C7, .7,4,4,1,1,true,false) ]}">
		<s:fill>
			<!--- @private Defines the background fill color. -->
			<s:SolidColor id="bgFill"
						  color="0xFFFFFF"/>
		</s:fill>
	</s:Rect>

	<!-- shadow -->
	<!--- @private -->
	<s:Rect id="shadow"
			height="1"
			left="1" right="1" top="1">
		<s:fill>
			<s:SolidColor color="0x000000"
						  alpha="0.12"/>
		</s:fill>
	</s:Rect>

	<!-- text -->
	<!--- @copy spark.components.supportClasses.SkinnableTextBase#textDisplay -->
	<s:RichEditableText id="textDisplay"
						bottom="1" left="1" right="1" top="1"
						verticalAlign="middle"
						widthInChars="10"/>

</s:SparkSkin>
