<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 creationComplete="panel1_creationCompleteHandler(event)"
		 remove="panel1_removeHandler(event)">

	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			
			import net.vdombox.ide.common.events.PopUpWindowEvent;
			import net.vdombox.ide.common.model._vo.LibraryVO;
			import net.vdombox.ide.common.view.components.VDOMImage;
			import net.vdombox.ide.common.view.components.button.AlertButton;
			import net.vdombox.ide.common.view.components.windows.Alert;
			import net.vdombox.ide.modules.scripts.events.LibrariesPanelEvent;
			import net.vdombox.ide.modules.scripts.events.ListItemRendererEvent;
			
			import spark.events.IndexChangeEvent;

			[Bindable]
			private var _libraries : ArrayCollection;

			public function get selectedLibrary() : LibraryVO
			{
				return librariesList.selectedItem as LibraryVO;
			}

			public function set selectedLibrary( value : LibraryVO ) : void
			{
				librariesList.selectedItem = value;
				librariesList.validateNow();
			}

			public function set libraries( value : Array ) : void
			{
				var oldSelectedItem : LibraryVO;
				var oldSelectedIndex : int;
				var isSelectedItemChanged : Boolean = true;
				
				if ( librariesList )
				{
					oldSelectedIndex = librariesList.selectedIndex;
					oldSelectedItem = librariesList.selectedItem as LibraryVO;
				}

				if ( value && value.length > 0 )
				{
					var newSelectedIndex : int = -1;

					if ( oldSelectedItem )
					{
						var i : uint;
						for ( i = 0; i < value.length; i++ )
						{
							if ( LibraryVO( value[ i ] ).name == oldSelectedItem.name )
							{
								isSelectedItemChanged = false;
								newSelectedIndex = i;
								break;
							}
						}
					}
					else
					{
						isSelectedItemChanged = false;
					}

					_libraries = new ArrayCollection( value );
					
					_libraries.sort = new Sort();
					
					var sortField : SortField = new SortField( "name" );
					sortField.caseInsensitive = true;
					
					_libraries.sort.fields = [ sortField ];
					_libraries.refresh();

					if ( newSelectedIndex != -1 )
						librariesList.validateNow();

					librariesList.selectedIndex = newSelectedIndex;
				}
				else
				{
					_libraries = null;
					
					if( librariesList.selectedIndex != -1 )
						librariesList.selectedIndex = -1;
					
					if( oldSelectedIndex == -1 )
						isSelectedItemChanged = false;
				}
				
				/*if( isSelectedItemChanged )
					dispatchEvent( new LibrariesPanelEvent( LibrariesPanelEvent.SELECTED_LIBRARY_CHANGED ) )			*/		
			}

			protected function librariesList_changeHandler( event : ListItemRendererEvent ) : void
			{
				dispatchEvent( new LibrariesPanelEvent( LibrariesPanelEvent.SELECTED_LIBRARY_CHANGED ) );
			}

			protected function librariesList_creationCompleteHandler( event : FlexEvent ) : void
			{
				librariesList.addEventListener( ListItemRendererEvent.ITEM_CHENGED,librariesList_changeHandler, true, 0, true );
				librariesList.addEventListener( KeyboardEvent.KEY_DOWN, itemrenderer1_keyDownHandler, false, 0, true );
				librariesList.addEventListener( ListItemRendererEvent.DELETE_PRESS,librariesList_delete, true, 0, true );
			}
			
			private function librariesList_delete(event:ListItemRendererEvent):void
			{
				var deleteEvent : LibrariesPanelEvent = new LibrariesPanelEvent( LibrariesPanelEvent.DELETE_LIBRARY);
				deleteEvent.object = event.target.data;
				dispatchEvent( deleteEvent );	
			}
			
			private function itemrenderer1_keyDownHandler(event:KeyboardEvent):void
			{
				if ( event.keyCode == Keyboard.DELETE )
					Alert.Show( resourceManager.getString( 'Scripts_General', 'delete_library' ),
						resourceManager.getString( 'Scripts_General', 'delete_Renderer' ), 
								AlertButton.OK_No, this.parentApplication, removeactionRequest );
			}
			
			private function removeactionRequest( event : PopUpWindowEvent ) : void 
			{
				if ( event.detail == Alert.YES )
				{
					var deleteEvent : LibrariesPanelEvent = new LibrariesPanelEvent( LibrariesPanelEvent.DELETE_LIBRARY);
					deleteEvent.object = selectedLibrary;
					dispatchEvent( deleteEvent );
				}
			}
			
			protected function panel1_removeHandler(event:FlexEvent):void
			{
				librariesList.removeEventListener( ListItemRendererEvent.ITEM_CHENGED,librariesList_changeHandler, true );
			}
			
			protected function panel1_creationCompleteHandler(event:FlexEvent):void
			{
				//titleDisplay.left = 25;
			}
			
		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:BitmapFill source = "{VDOMImage.Fon_Texture}" smooth="true" fillMode="repeat"/>
		</s:fill>
	</s:Rect>
	
	<mx:Image id="icon" source="@Embed('assets/Libraries_white.png')" height="16" width="16" left="10" top="-23" 
			  smoothBitmapContent="true"/>
	
	<mx:Image id="createLibrary" source="{VDOMImage.Plus}" height="20" width="20" right="10" top="-23" 
			  smoothBitmapContent="true" click="dispatchEvent( new LibrariesPanelEvent( LibrariesPanelEvent.CREATE_LIBRARY ) )"/>

	<s:List id="librariesList"
			dataProvider="{ _libraries }" height="100%" labelField="name" width="100%"
			itemRenderer="net.vdombox.ide.modules.scripts.view.components.ListItemRenderer"
			contentBackgroundAlpha="0" borderVisible="false"
			creationComplete="librariesList_creationCompleteHandler(event)"
			doubleClickEnabled="true"/>
</s:Panel>
