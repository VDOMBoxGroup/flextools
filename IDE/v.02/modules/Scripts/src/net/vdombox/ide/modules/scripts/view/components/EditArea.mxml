<?xml version="1.0" encoding="utf-8"?>
<mx:HTML xmlns:mx="http://www.adobe.com/2006/mxml"
		 horizontalScrollPolicy="off" verticalScrollPolicy="off"
		 complete="completeHandler()" creationComplete="creationCompleteHandler()"
		 hide="hideHandler()" show="showHandler()">

	<mx:Metadata> 
        [Event(name="save", type="vdom.events.EditAreaEvent")]  
    </mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import flash.filesystem.File;
			import flash.filesystem.FileMode;
			import flash.filesystem.FileStream;

			import net.vdombox.ide.modules.scripts.events.EditAreaEvent;

			private const ID : String = "code_editor";
			private const BASE_URL : String = "app:/modules/scripts/libs/edit_area/";

			private var _syntax : String = "vscript";

			private var _content : String;
			private var isEditorLoaded : Boolean = false;

			public function get syntax() : String
			{
				return _syntax;
			}

			public function set syntax( value : String ) : void
			{
				if( value )
					_syntax = value;
			}

			public function get content() : String
			{
				if ( editAreaLoader )
					return editAreaLoader.getValue( ID );
				else
					return null;
			}

			public function set content( value : String ) : void
			{
				_content = value;

				if ( !isEditorLoaded )
					return;

				if ( editAreaLoader )
				{
					try
					{
						editAreaLoader.setValue( ID, value );
						var editArea : * = domWindow.window.frames[ "frame_" + ID ].editArea;
						var saveImg : * = domWindow.window.frames[ "frame_" + ID ].document.getElementById( "save" );
						editArea.switchClassSticky( saveImg, 'editAreaButtonDisabled', true );
//						
						editArea.previous = [];
						editArea.check_redo();
						editArea.next = [];
						editArea.check_undo( true );
					}
					catch ( error : Error )
					{
						var d : * = "";
					}
				}
			}

			private function get editAreaLoader() : *
			{
				return domWindow.editAreaLoader;
			}

			private function save_code( id : String, content : String ) : void
			{
				var editArea : * = domWindow.window.frames[ "frame_" + ID ].editArea;
				var saveImg : * = domWindow.window.frames[ "frame_" + ID ].document.getElementById( "save" );
				editArea.switchClassSticky( saveImg, 'editAreaButtonDisabled', true );
				var eae : EditAreaEvent = new EditAreaEvent( EditAreaEvent.SAVE );
				eae.content = content;
				dispatchEvent( eae );
			}

			private function test( ... arg ) : void
			{
//				trace( arg );
			}

			private function getTemplateString() : String
			{
				var template : String = "";

				try
				{
					var file : File = new File( BASE_URL + "template.html" );
					var fs : FileStream = new FileStream();
					fs.open( file, FileMode.READ );
					template = fs.readUTFBytes( fs.bytesAvailable );
					fs.close();
				}
				catch ( error : Error )
				{
					trace( " get tmpl error " );
				}

				return template;
			}

			private function saveCompiledTemplate( path : String, content : String ) : Boolean
			{
				try
				{
					var file : File = new File( path );
					var fs : FileStream = new FileStream();
					fs.open( file, FileMode.WRITE );
					fs.writeUTFBytes( content );
					fs.close();
				}
				catch ( error : Error )
				{
					return false;
				}
				return true;
			}

			private function completeHandler() : void
			{
				if ( location == "about:blank" )
					return;

				domWindow.getTemplateString = getTemplateString;
				domWindow.saveCompiledTemplate = saveCompiledTemplate;
				domWindow.test = test;

				isEditorLoaded = true;

				if ( !editAreaLoader )
					return;

				editAreaLoader.init( { id: ID, start_highlight: true, font_family: "verdana, monospace",
						toolbar: "save, |, search, go_to_line, |, undo, redo, |, select_font, |, change_smooth_selection, highlight, |, help",
						allow_resize: "none", allow_toggle: false, language: resourceManager.localeChain[ 0 ], save_callback: save_code,
						syntax: _syntax } );

				if ( _content )
					content = _content; // FIXME: fix!
			}

			private function showHandler() : void
			{
				addEventListener( KeyboardEvent.KEY_DOWN, keyboard_keyDownHandler, true );
				location = BASE_URL + "init.html";
			}

			private function hideHandler() : void
			{
				removeEventListener( KeyboardEvent.KEY_DOWN, keyboard_keyDownHandler, true );
				location = "about:blank";
				isEditorLoaded = false;
			}


			private function keyboard_keyDownHandler( event : KeyboardEvent ) : void
			{
				if ( isEditorLoaded && event.charCode != 0 )
				{
					var editArea : * = domWindow.window.frames[ "frame_" + ID ].editArea;
					var saveImg : * = domWindow.window.frames[ "frame_" + ID ].document.getElementById( "save" );
					editArea.switchClassSticky( saveImg, 'editAreaButtonNormal', true );
				}
			}

			protected function creationCompleteHandler() : void
			{
				addEventListener( KeyboardEvent.KEY_DOWN, keyboard_keyDownHandler, true );
				location = BASE_URL + "init.html";
			}
		]]>
	</mx:Script>
</mx:HTML>
