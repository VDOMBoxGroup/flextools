<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
		 creationComplete="panel1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			
			import net.vdombox.ide.common.interfaces.IVDOMObjectVO;
			import net.vdombox.ide.common.model._vo.ObjectVO;
			import net.vdombox.ide.common.model._vo.PageVO;
			import net.vdombox.ide.common.model._vo.ServerActionVO;
			import net.vdombox.ide.common.view.components.VDOMImage;
			import net.vdombox.ide.modules.scripts.events.ListItemRendererEvent;
			import net.vdombox.ide.modules.scripts.events.TabsPanelEvent;
			
			[Bindable]
			private var _tabs : ArrayCollection;
			
			private function findServerAction( action : ServerActionVO ) : ServerActionVO
			{
				for each( var serverActionVO : Object in _tabs.source )
				{
					if ( serverActionVO is ServerActionVO && serverActionVO.name == action.name 
						&& serverActionVO.containerID == action.containerID )
					{
						return  serverActionVO as ServerActionVO;
					}
				}
				
				return null;
			}
			
			private function findGlobalActionOrLibrary( action : Object ) : Object
			{
				for each( var object : Object in _tabs.source )
				{
					if ( !(object is ServerActionVO) && object.name == action.name )
					{
						return  object;
					}
				}
				
				return null;
			}
			
			public function addAction( action : Object ) : void
			{
				if ( !_tabs )
					_tabs = new ArrayCollection();
				
				var tabsItem : Object;
				
				if ( action is ServerActionVO )
					tabsItem = findServerAction( action as ServerActionVO );
				else
					tabsItem = findGlobalActionOrLibrary( action );
					
				if ( tabsItem )
				{
						tabs.selectedItem = tabsItem;
						tabs_changeHandler();
						return;
				}
				
				
				
				_tabs.addItem( action );
				
				_tabs.sort = new Sort();
				_tabs.sort.fields = [ new SortField( "name" ), new SortField( "containerName" ) ];
				_tabs.refresh();
				
				tabs.selectedItem = action;
				tabs_changeHandler();
			}
			
			public function RemoveAction( action : Object ) : Object
			{
				if ( !_tabs )
					return null;
				
				var tabsItem : Object;
				
				if ( action is ServerActionVO )
					tabsItem = findServerAction( action as ServerActionVO );
				else
					tabsItem = findGlobalActionOrLibrary( action );
				
				if ( tabsItem )
				{
					if ( tabs.selectedItem == tabsItem )
					{
						if ( tabs.selectedIndex != 0 )
						{
							tabs.selectedIndex = 0;
							tabs_changeHandler();
						}
						else if ( tabs.dataProvider.length > 1 )
						{
							tabs.selectedIndex = 1;
							tabs_changeHandler();
						}
					}
					_tabs.removeItemAt( _tabs.getItemIndex( tabsItem ) );
					return tabsItem;
				}
				
				return null;
			}
			
			public function deleteActionByObjectVO( objectVO : IVDOMObjectVO ) : void
			{
				/*if ( objectVO is ObjectVO )
				{
					for each ( var action : Object in _tabs )
					{
						if ( action is ServerActionVO && action.containerVO.id == objectVO.id )
							_tabs.removeItemAt(  _tabs.getItemIndex( action ) );
					}
				}
				else if ( objectVO is PageVO )
				{
					for each ( var action : Object in _tabs )
					{
						if ( action is ServerActionVO && action.containerVO.id == objectVO.id )
							_tabs.removeItemAt(  _tabs.getItemIndex( action ) );
					}
				}*/
			}
			
			protected function panel1_creationCompleteHandler(event:FlexEvent):void
			{
				tabs.addEventListener( ListItemRendererEvent.ITEM_CHENGED,tabs_changeHandler, true, 0, true );
				tabs.addEventListener( ListItemRendererEvent.DELETE_PRESS,tabs_deleteHandler, true, 0, true );
			}
			
			private function tabs_changeHandler( event : ListItemRendererEvent = null ) : void
			{
				dispatchEvent( new TabsPanelEvent( TabsPanelEvent.SELECTED_TAB_CHANGED ) );
			}
			
			private function tabs_deleteHandler( event : ListItemRendererEvent = null ) : void
			{
				var actionVO : Object =(event.target as TabsPanelItemRenderer).data;
				
				_tabs.removeItemAt(  _tabs.getItemIndex( actionVO ) );
				
				dispatchEvent( new TabsPanelEvent( TabsPanelEvent.TAB_DELETE, actionVO ) );
			}
			
			public function checkTabs( applicationID : String ) : Boolean
			{
				var flag : Boolean = false;
				
				if ( _tabs && _tabs.length > 0 )
				{
					if ( _tabs[0] is ServerActionVO )
					{
						if ( _tabs[0].containerVO is PageVO && _tabs[0].containerVO.applicationVO.id != applicationID)
							flag = true;
						else if ( _tabs[0].containerVO is ObjectVO && _tabs[0].containerVO.pageVO.applicationVO.id != applicationID )
							flag = true;
					}
					else
					{
						if ( _tabs[0].applicationVO.id != applicationID )
							flag = true;
					}
				}
				
				if ( flag )
				{
					removeAll();
					return true;
				}
				else
					return false;
					
			}
			
			public function renameAction( actionID : String, newName : String ) : void
			{
				if ( !_tabs )
					return;
				
				var count : int = _tabs.source.length;
				
				for( var i : int; i < count; i++ )
				{
					if ( _tabs.source[i] is ServerActionVO && _tabs.source[i].id == actionID )
					{
						_tabs.source[i].setName( newName );
						_tabs.source[i].saved = !_tabs.source[i].saved
						_tabs.source[i].saved = !_tabs.source[i].saved
						
						_tabs.sort = new Sort();
						_tabs.sort.fields = [ new SortField( "name" ), new SortField( "containerName" ) ];
						_tabs.refresh();
						
						break;
					}
				}
			
			}
			
			public function removeAll() : void
			{
				_tabs.removeAll();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:BitmapFill source = "{VDOMImage.Fon_Texture}" smooth="true" fillMode="repeat"/>
		</s:fill>
	</s:Rect>
	
	<s:List id="tabs" dataProvider="{_tabs}"
			width="100%" height="100%"
			itemRenderer="net.vdombox.ide.modules.scripts.view.components.TabsPanelItemRenderer"
			contentBackgroundAlpha="0" borderVisible="false"
			doubleClickEnabled="true"/>
</s:Panel>
