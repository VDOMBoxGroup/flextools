<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 addedToStage="panel1_addedToStageHandler(event)"
		 creationComplete="panel1_creationCompleteHandler(event)"
		 removedFromStage="panel1_removedFromStageHandler(event)">

	<fx:Script>
		<![CDATA[
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			
			import net.vdombox.ide.common.events.ObjectsTreePanelEvent;
			import net.vdombox.ide.modules.scripts.events.ContainersPanelEvent;

			[Bindable]
			private var _structure : XMLList;
			
			[Embed(source="icons/disclosureClosedIcon.png")]
			public var plus:Class;
			
			[Embed(source="icons/disclosureOpenIcon.png")]
			public var minus:Class;

			public function get selectedObject() : XML
			{
				var selectedItem : XML = containersTree.selectedItem as XML;
				
				var item : XML;
				
				if ( selectedItem && selectedItem.name() == "object" )
					item = selectedItem;
				
				return item;
				
			}
			
			public function set selectedObjectID( value : String ) : void
			{
				var currentID : String;
				
				if ( !_structure )
					return;
				
				try
				{
					currentID = containersTree.selectedItem.@id;
				}
				catch ( error : Error )
				{
				}
				
				if ( !value )
					containersTree.selectedIndex = -1;
				else if ( value != currentID )
					setSelectionByID( value );
			}
			
			public function get selectedPage() : XML
			{
				var selectedItem : XML = containersTree.selectedItem as XML;
				var item : XML;
				var parentItem : XML;
				
				if ( !selectedItem )
				{
				}
				else if ( selectedItem.name() == "page" )
				{
					item = selectedItem;
				}
				else if ( selectedItem.name() == "object" )
				{
					parentItem = selectedItem.parent();
					
					while ( parentItem )
					{
						if ( parentItem.name() == "page" )
						{
							item = parentItem;
							break;
						}
						
						parentItem = parentItem.parent();
					}
				}
				
				return item;
			}
			
			public function set selectedPageID( value : String ) : void
			{
				var currentID : String;
				
				if ( !_structure )
					return;
				
				try
				{
					currentID = containersTree.selectedItem.@id;
				}
				catch ( error : Error )
				{
				}
				
				
				if ( !value )
					containersTree.selectedIndex = -1;
				else 
					//					if ( value != currentID )
					setSelectionByID( value );
			}
			
			private var elementForSelection : XML;
			private var _needUpdateProperties : Boolean = false;
			
			private function setSelectionByID( id : String ) : void
			{
				try
				{
					elementForSelection = _structure.( @id == id )[ 0 ];
					
					if ( !elementForSelection )
						elementForSelection = _structure..object.( @id == id )[ 0 ];
				}
				catch ( error : Error )
				{
					
				}
				
				if ( elementForSelection )
				{
					_needUpdateProperties = true;
					
					invalidateProperties();
				}
			}
			
			override public function  validateProperties():void
			{
				super.validateProperties();
				
				if ( _needUpdateProperties )
				{
					_needUpdateProperties 		= false;
					
					_needValideteDisplayList 	= true;
					
					openTree( elementForSelection );
					
					containersTree.selectedItem = elementForSelection;
					
					invalidateDisplayList();
				}
				
			}
			
			private function openTree( item : Object ) : void
			{
				var parentItem : Object = XML( item ).parent();
				
				if ( parentItem )
				{
					openTree( parentItem );
					containersTree.expandItem( parentItem, true, false );
				}
			}
			
			private var _needValideteDisplayList : Boolean = false;
			override public function  validateDisplayList():void
			{
				// scrolling to necessary position
				super.validateDisplayList();
				
				if ( !_needValideteDisplayList )
					return
					
					_needValideteDisplayList = false;
				
				if (containersTree.selectedIndex == -1 )
					return;
				
				var index : int =  containersTree.selectedIndex;
				var newVPos:int;
				
				containersTree.scrollToIndex(index);
				
			}

			public function get selectedItem() : XML
			{
				return containersTree.selectedItem as XML;
			}

			public function set structure( value : XMLList ) : void
			{
				_structure = value;
			}
			
			public function get structure() : XMLList
			{
				return _structure;
			}
			
			protected function containersTree_creationCompleteHandler(event:FlexEvent):void
			{
				containersTree.setStyle("disclosureOpenIcon", minus);
				containersTree.setStyle("disclosureClosedIcon", plus);
			}
			
			private function objectsTree_changeHandler( event : ListEvent ) : void
			{
				dispatchEvent( new ContainersPanelEvent( ContainersPanelEvent.CONTAINER_CHANGED ) );
			}
			
			protected function panel1_removedFromStageHandler(event:Event):void
			{
				containersTree.removeEventListener( ListEvent.CHANGE, objectsTree_changeHandler );
			}
			
			protected function panel1_addedToStageHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if ( containersTree )
					containersTree.addEventListener( ListEvent.CHANGE, objectsTree_changeHandler, false );
			}
			
			protected function panel1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				containersTree.addEventListener( ListEvent.CHANGE, objectsTree_changeHandler, false );
			}
			
		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:BitmapFill source = "@Embed('icons/texture_ide_sidebar.png')" smooth="true" fillMode="repeat"/>
		</s:fill>
	</s:Rect>

	<mx:Tree id="containersTree"
			 dataProvider="{ _structure }" height="100%" labelField="@name" showRoot="true"
			 itemRenderer="net.vdombox.components.ObjectsTreePanelItemRenderer"
			 contentBackgroundAlpha="0" width="100%"
			 maxHorizontalScrollPosition="140"
			 creationComplete="containersTree_creationCompleteHandler(event)"/>
</s:Panel>
