<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:components="net.vdombox.ide.modules.events.view.components.*"
					  xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:mx="library://ns.adobe.com/flex/halo"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  width="200" x="@{ data.left }" y="@{ data.top }"
					  skinClass="net.vdombox.ide.modules.events.view.skins.ActionElementSkin"
					  creationComplete="skinnablecontainer1_creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import mx.controls.Image;
			import mx.events.FlexEvent;
			
			import net.vdombox.ide.common.vo.ActionParameterVO;
			import net.vdombox.ide.common.vo.ClientActionVO;
			import net.vdombox.ide.common.vo.EventParameterVO;
			import net.vdombox.ide.common.vo.EventVO;
			import net.vdombox.ide.common.vo.ServerActionVO;
			import net.vdombox.ide.modules.events.events.ElementEvent;
			import net.vdombox.ide.modules.events.view.skins.EventElementSkin;
			
			import spark.components.Group;
			import spark.components.Label;
			import spark.skins.spark.PanelSkin;

			[SkinPart( required="true" )]
			public var headerGroup : Group;

			[SkinPart( required="true" )]
			public var hideButton : ElementButton;
			
			[SkinPart( required="true" )]
			public var showElement : Image;

			[Bindable]
			public var title : String;

			private var _data : Object;

			private var isNeedUpdateParameters : Boolean;

			private var mouseOffcetX : int;
			private var mouseOffcetY : int;
			
			[Embed( source = "assets/eye_0w.png" )]
			public var noVisibleEye : Class;
			
			[Embed( source = "assets/eye_1.png" )]
			public var visibleEye : Class;

			public function get showElements():Boolean
			{
				return _data.visibleEvent;
			}

			public function set showElements(value:Boolean):void
			{
				_data.visibleEvent = value ;
				if ( _data.visibleEvent )
					showElement.source = visibleEye;
				else
					showElement.source = noVisibleEye;
			}
			
			public function set visibleElements(value:Boolean):void
			{
				visible = value;
			}
			
			public function get idElement() : String
			{
				if ( _data )
					return _data.id;
				else
					return "";
			}
			
			public function get objectID() : String
			{
				if ( _data )
					return _data.objectID;
				else
					return "";
			}
			
			public function get actionName() : String
			{
				return _data.name as String;
			}

			[Bindable]
			public function get data() : Object
			{
				return _data;
			}

			public function set data( value : Object ) : void
			{
				_data = value;

				if ( _data )
					title = _data.name;
				else
					title = null;

				isNeedUpdateParameters = true;
			}

			override protected function updateDisplayList( unscaledWidth : Number, unscaledHeight : Number ) : void
			{
				super.updateDisplayList( unscaledWidth, unscaledHeight );

				if ( parametersContainer && isNeedUpdateParameters )
				{
					isNeedUpdateParameters = false;
					parametersContainer.removeAllElements();

					if ( !_data.hasOwnProperty( "parameters" ) || _data.parameters.length == 0 )
						return;

					var parameter : ActionParameterVO;
					var parameterRenderer : EditableParameterRenderer;

					var parameterRendererFactory : ClassFactory = new ClassFactory( EditableParameterRenderer );
					parameterRendererFactory.properties = { percentWidth: 100 };

					for each ( parameter in _data.parameters )
					{
						parameterRenderer = parameterRendererFactory.newInstance();

						parameterRenderer.data = parameter;

						parametersContainer.addElement( parameterRenderer );
					}
					
					if( objectNameGroup )
					{
						if( _data is ClientActionVO )
							objectNameGroup.visible = true;
						else
							objectNameGroup.visible = false;
					}
				}
			}

			override protected function partAdded( partName : String, instance : Object ) : void
			{
				super.partAdded( partName, instance );

				if ( instance == headerGroup )
					headerGroup.addEventListener( MouseEvent.MOUSE_DOWN, header_mouseDownHandler, false, 0, true );
				else if ( instance == hideButton )
					hideButton.addEventListener( MouseEvent.CLICK, hideButton_clickHandler, false, 0, true );
			}

			override protected function partRemoved( partName : String, instance : Object ) : void
			{
				super.partAdded( partName, instance );

				if ( instance == headerGroup )
					headerGroup.removeEventListener( MouseEvent.MOUSE_DOWN, header_mouseDownHandler );
				else if ( instance == hideButton )
					hideButton.removeEventListener( MouseEvent.CLICK, hideButton_clickHandler );
			}

			private function header_mouseDownHandler( event : MouseEvent ) : void
			{
				stage.addEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandlerExt );

				mouseOffcetX = mouseX;
				mouseOffcetY = mouseY;
			}

			private function hideButton_clickHandler( event : MouseEvent ) : void
			{
				if ( !_data || !_data.hasOwnProperty( "state" ) )
					return;

				if ( skin.currentState == "normal" || skin.currentState == "disabled" )
					_data.state = true;
				else
					_data.state = false;

			}

			private function stage_mouseMoveHandler( event : MouseEvent ) : void
			{
				var newX : int = parent.mouseX - mouseOffcetX;
				var newY : int = parent.mouseY - mouseOffcetY;

				if ( newX < 0 )
					x = 0;
				else
					x = newX;

				if ( newY < 0 )
					y = 0;
				else
					y = newY;
			}

			private function stage_mouseMoveHandlerExt( event : MouseEvent ) : void
			{
				dispatchEvent( new ElementEvent( ElementEvent.MOVED ) );
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandlerExt );
			}

			private function stage_mouseUpHandler( event : MouseEvent ) : void
			{
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler );
				stage.removeEventListener( MouseEvent.MOUSE_UP, stage_mouseUpHandler );
			}
			
			public function showHandler() : void
			{
				showElements = !showElements;
				dispatchEvent( new ElementEvent ( ElementEvent.SHOW_ELEMENT ) );
			}
			
			protected function skinnablecontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				dispatchEvent( new ElementEvent ( ElementEvent.CREATE_ELEMENT ) );
			}
			
		]]>
	</fx:Script>

	<s:layout>

		<s:VerticalLayout gap="1"/>
	</s:layout>

	<s:Group height="20" width="100%" id="objectNameGroup">

		<s:Rect bottom="0" left="0" right="0" top="0">

			<s:fill>

				<s:LinearGradient rotation="90">

					<s:GradientEntry color="0xFFFFFF"/>

					<s:GradientEntry color="0xF8F8F8"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>

		<s:Label text="{ data.objectName }" textAlign="center" verticalCenter="0" left="5" right="5" width="100%" maxDisplayedLines="1"/>
	</s:Group>

	<!--<components:ParameterRenderer width="100%"
								  title="{ title }"/>-->

	<components:ParameterRenderer icon="@Embed('assets/event.png')" width="100%"
								  title="{ title }"/>

	<s:VGroup id="parametersContainer"
			  width="100%"
			  gap="1"/>
</s:SkinnableContainer>
