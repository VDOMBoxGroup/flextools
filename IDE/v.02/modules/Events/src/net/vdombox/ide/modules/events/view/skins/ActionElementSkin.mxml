<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:components="net.vdombox.ide.modules.events.view.components.*"
			 xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:mx="library://ns.adobe.com/flex/halo"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 minWidth="200" creationComplete="sparkskin1_creationCompleteHandler(event)" xmlns:mx1="library://ns.adobe.com/flex/mx" xmlns:view="net.vdombox.view.*">

	<fx:Metadata>
		[HostComponent("net.vdombox.ide.modules.events.view.components.ActionElement")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			
			import net.vdombox.ide.common.vo.ClientActionVO;
			import net.vdombox.ide.common.vo.ServerActionVO;
			import net.vdombox.ide.modules.events.events.ElementEvent;

			private var _data : Object;
			
			private var isDataChanged : Boolean = false;
			private var isStateChanged : Boolean = false;
			
			public function set data( value : Object ) : void
			{
				_data = value;
				
				isDataChanged = true;
				invalidateProperties();
			}
			
			protected function hideButton_clickHandler( event : MouseEvent ) : void
			{
				if ( currentState == "normal" || currentState == "disabled" )
				{
					currentState = currentState + "AndShort";
				}
				else
				{
					currentState = currentState.substr( 0, currentState.length - 8 );
				}

				isStateChanged = true;
				invalidateProperties();
				
				hostComponent.dispatchEvent( new ElementEvent( ElementEvent.STATE_CHANGED ) );
			}
			
			override protected function commitProperties() : void
			{
				super.commitProperties();
				
				if ( isDataChanged )
				{
					isDataChanged = false;
					
					if ( hostComponent.data )
					{
						if ( !hostComponent.data.state && ( currentState == "normal" || currentState == "disabled" ) )
							currentState = currentState + "AndShort";
						else if ( hostComponent.data.state && ( currentState == "normalAndShort" || currentState == "disabledAndShort" ) )
							currentState = currentState.substring( 0, currentState.length - 8 );
					}
				}
				
				if ( isStateChanged )
				{
					isStateChanged = false;
					
					if ( !hostComponent.data )
						return;
					
					if ( currentState == "normal" || currentState == "disabled" )
						hostComponent.data.state = true;
					else
						hostComponent.data.state = false;
				}
			}
			
			override protected function stateChanged( oldState : String, newState : String, recursive : Boolean ) : void
			{
				if ( !hostComponent.data )
				{
					titleLabel.text = "";
					return;
				}

				if ( newState == "normal" || newState == "disabled" )
				{
					if ( hostComponent.data is ClientActionVO )
						titleLabel.text = headerGroup.toolTip = "Client Action";
					else if ( hostComponent.data is ServerActionVO )
						titleLabel.text = headerGroup.toolTip = "Server Action";
				}
				else
				{
					if ( hostComponent.data is ClientActionVO )
						titleLabel.text = headerGroup.toolTip = hostComponent.data.objectName + ":" + hostComponent.data.name;
					else if ( hostComponent.data is ServerActionVO )
						titleLabel.text = headerGroup.toolTip = hostComponent.data.name;
				}
			}

			protected function sparkskin1_creationCompleteHandler(event:FlexEvent):void
			{
				BindingUtils.bindProperty( this, "data", hostComponent, "data", true );
			}

		]]>
	</fx:Script>


	<s:states>

		<s:State name="normal" stateGroups="full"/>
		<s:State name="disabled" stateGroups="full"/>

		<s:State name="normalAndShort" stateGroups="short"/>
		<s:State name="disabledAndShort" stateGroups="short"/>
	</s:states>

	<!--Shadow-->

	<s:RectangularDropShadow id="dropShadow"
							 bottom="0" color="#000000" left="0" right="0"
							 top="0"
							 alpha="0.42" angle="45" blRadius="10" blurX="8"
							 blurY="8" brRadius="10" distance="8" tlRadius="10"
							 trRadius="10"/>
	<!--Mask-->

	<s:Group id="backgroundMask"
			 bottom="0" left="0" right="0" top="0">

		<s:Rect bottom="0" left="0" right="0" top="0"
				radiusX="10" radiusY="10">

			<s:fill>

				<s:SolidColor color="gray"
							  alpha="0"/>
			</s:fill>
		</s:Rect>
	</s:Group>

	<s:Group bottom="0" left="0" right="0" top="0"
			 mask="{backgroundMask}">

		<s:Rect bottom="0" left="0" right="0" top="0">

			<s:fill>

				<s:SolidColor color="0xB7B7B7"/>
			</s:fill>
		</s:Rect>

		<s:VGroup left="0" right="0"
				  gap="1">

			<s:Group id="headerGroup"
					 height="25" width="100%">

				<s:Rect bottom="0" left="0" right="0" top="0">

					<s:fill>

						<s:LinearGradient rotation="90">

							<s:GradientEntry color="0x5E04BE"/>

							<s:GradientEntry color="0x260057"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>

				<s:Label id="titleLabel"
						 text="{ hostComponent.title }"
						 color="#FFFFFF" left="5" right="20" textAlign="center"
						 verticalCenter="0"
						 maxDisplayedLines="1"/>
				
				<view:EyeImage id="eye" 
							   right="4" top="4"
							   closedEyeType="{EyeImage.TYPE_WHITE}"
							   click="hostComponent.eyeClickHandler()"/>
			</s:Group>

			<s:Group id="contentGroup"
					 width="100%"
					 itemCreationPolicy="immediate" includeIn="full"/>

			<s:Group width="100%">

				<s:Rect bottom="0" left="0" right="0" top="0">

					<s:fill>

						<s:SolidColor color="0x518000"/>
					</s:fill>
				</s:Rect>

				<s:HGroup height="17" width="100%"
						  gap="1">

					<components:ElementButton id="hideButton"
											  height="17" icon.full="@Embed('assets/hide.png')" icon.short="@Embed('assets/show.png')"
											  label.full="{ resourceManager.getString( 'Events_General', 'action_element_hide' ) }"
											  label.short="{ resourceManager.getString( 'Events_General', 'action_element_show' ) }"
											  minWidth="10" width="100%"
											  cornerRadius="0" skinClass="net.vdombox.ide.modules.events.view.skins.ElementButtonSkin"
											  click="hideButton_clickHandler( event )"/>

					<!--<components:ElementButton height="17" icon="@Embed('assets/arrow.png')" label="translate" minWidth="10"
						 width="100%"
						 cornerRadius="0" skinClass="net.vdombox.ide.modules.events.view.skins.ElementButtonSkin"
						 click="hostComponent.dispatchEvent( new ElementEvent( ElementEvent.CREATE_LINKAGE ) )"/>-->

					<components:ElementButton height="17" icon="@Embed('assets/delete.png')" label="{ resourceManager.getString( 'Events_General', 'action_element_delete' ) }" minWidth="10"
											  width="100%"
											  cornerRadius="0" skinClass="net.vdombox.ide.modules.events.view.skins.ElementButtonSkin"
											  click="hostComponent.dispatchEvent( new ElementEvent( ElementEvent.DELETE ) )"/>
					
				</s:HGroup>
			</s:Group>
		</s:VGroup>
	</s:Group>
</s:SparkSkin>
