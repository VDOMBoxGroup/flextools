<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 minHeight="10" minWidth="10"
			 alpha.disabled="0.5"
			 >

	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("net.vdombox.ide.common.view.components.button.WorkAreaButton")]
		]]>
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import spark.filters.DropShadowFilter;
			/* Define the skin elements that should not be colorized.
			 For button, the graphics are colorized but the label is not. */
			static private const exclusions : Array = [ "labelDisplay" ];

			/**
			 * @copy spark.skins.SparkSkin#colorizeExclusions
			 */
			override public function get colorizeExclusions() : Array
			{
				return exclusions;
			}

			/**
			 *  @private
			 */
			
			override protected function updateDisplayList( unscaledWidth : Number, unscaledHeight : Number ) : void
			{
				var cr : Number = getStyle( "cornerRadius" );

				if ( cornerRadius != cr )
					cornerRadius = cr;

				super.updateDisplayList( unscaledWidth, unscaledHeight );
			}
			
			override protected function stateChanged(oldState:String, newState:String, recursive:Boolean):void
			{
				if ( newState == "over" )
				{
					this.graphics.lineStyle(1, 0xa3a9a9 );
					this.graphics.moveTo( 2, this.height );
					this.graphics.lineTo( this.width - 2, this.height );
					this.graphics.curveTo( this.width, this.height, this.width, this.height - 2 );
					this.graphics.lineTo( this.width, 2 );
					
					this.graphics.lineStyle(1, 0xFAFAFA, 0.7 );
					this.graphics.curveTo( this.width, 0, this.width - 2, 0 );
					this.graphics.lineTo( 2, 0 );
					this.graphics.curveTo( 0, 0, 0, 2 );
					this.graphics.lineTo( 0, this.height - 2 );
					this.graphics.curveTo( 0, this.height, 2, this.height );
					
				}
				else
					this.graphics.clear();
			}

			[Bindable]
			public var cornerRadius : Number = 2;
		]]>
	</fx:Script>
	<!-- states -->

	<s:states>

		<s:State name="up" stateGroups="noHighlighted"/>
		<s:State name="over" stateGroups="noHighlighted"/>
		<s:State name="down" stateGroups="noHighlighted"/>
		<s:State name="disabled" stateGroups="noHighlighted"/>

		<s:State name="upAndHighlighted" stateGroups="highlighted"/>
		<s:State name="overAndHighlighted" stateGroups="highlighted"/>
		<s:State name="downAndHighlighted" stateGroups="highlighted"/>
		<s:State name="disabledAndHighlighted" stateGroups="highlighted"/>
	</s:states>

	<!-- layer 2: fill -->
	
	<!--<s:Line id="line1" bottom="-1" left="0" right="2" height="1" includeIn="over">
		<s:stroke>
			<s:SolidColorStroke color="0xa3a9a9" weight="1"/>
		</s:stroke>
	</s:Line>
	
	<s:Line id="line2" bottom="2" right="-1" top="0" width="1" includeIn="over">
		<s:stroke>
			<s:SolidColorStroke color="0xa3a9a9" weight="1"/>
		</s:stroke>
	</s:Line> -->

	<s:Rect bottom="0" left="0" right="0" top="0"
			radiusX="2" radiusY="2" 
			filters="{[ new spark.filters.DropShadowFilter(2, 45, 0x929292, 1,4,4,1,1,true,false) ]}">

		<s:fill>
			<s:LinearGradient rotation="90">

				<s:GradientEntry color.disabledAndHighlighted="0x900000" color.down="{hostComponent.backgroundDownColor}" color.downAndHighlighted="{hostComponent.backgroundDownColor}" color.overAndHighlighted="{hostComponent.backgroundDownColor}"
								 color.up="0xEAEAE8" color.upAndHighlighted="{hostComponent.backgroundDownColor}"
								 alpha="0" alpha.over="0" alpha.down="1" alpha.upAndHighlighted="1" alpha.overAndHighlighted="1" alpha.downAndHighlighted="1" alpha.disabledAndHighlighted="1"/>

				<s:GradientEntry color.disabledAndHighlighted="0xD20000" color.down="{hostComponent.backgroundDownColor}" color.downAndHighlighted="{hostComponent.backgroundDownColor}" color.overAndHighlighted="{hostComponent.backgroundDownColor}"
								 color.up="0xCCCCCC" color.upAndHighlighted="{hostComponent.backgroundDownColor}"
								 alpha="0" alpha.over="0" alpha.down="1" alpha.upAndHighlighted="1" alpha.overAndHighlighted="1" alpha.downAndHighlighted="1" alpha.disabledAndHighlighted="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<s:HGroup gap="5" width="100%"
			  paddingLeft="5" paddingRight="5" verticalAlign="middle" verticalCenter="0">

		<mx:Image id="buttonIcon"
				  includeInLayout="{ hostComponent.icon ? true : false }" 
				  source="{ hostComponent.icon }" 
				  source.highlighted="{ hostComponent.iconDown ? hostComponent.iconDown : hostComponent.icon }"
				  visible="{ hostComponent.icon ? true : false }"
				  smoothBitmapContent="true"/>

		<s:Label id="labelDisplay" width="100%"
				 color="#000000" 
				 color.highlighted="{ hostComponent.textDownColor }"
				 textAlign="left" verticalAlign="middle"
				 maxDisplayedLines="1"/>
	</s:HGroup>
</s:SparkSkin>
