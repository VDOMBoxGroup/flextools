<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="skin1_creationCompleteHandler(event)"
		>
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("net.vdombox.ide.common.view.components.windows.ScriptStructureWindow")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			
			import net.vdombox.editors.parsers.base.Field;
			import net.vdombox.ide.common.view.components.VDOMImage;
			import net.vdombox.utils.XMLUtils;
			
			import ro.victordramba.util.HashMap;
			
			import spark.events.TextOperationEvent;
			
			[Bindable]
			private var structureXMLList : XMLList = null;
			
			private var saveXMLList : XMLList;
			
			protected function skin1_creationCompleteHandler(event:FlexEvent):void
			{
				hostComponent.addHandlers();
				find.setFocus();
				
				var tempXMLList : XMLList = new XMLList();
			    var xml : XML;
				var structureArray : Array = hostComponent.structure.toArray();
				structureArray.sortOn( "pos", Array.NUMERIC );
				
			    for each ( var field : Field in structureArray )
			    {
					
					xml = <item name={ field.name } pos={ field.pos } len={field.name.length} iconType={ field.fieldType }/>;
					tempXMLList += xml;
					 
					switch(field.fieldType)
					{
						 case "class":
						 {     
						      xml = tempXMLList.( @name == field.name )[ 0 ];
						      var xml2 : XML = <item name={ field.name } pos={ field.pos } len={field.name.length} iconType={ field.fieldType }/>;
						       
						      xml2 = createXMLStructure( xml2, field.members );
						       
						      xml.appendChild( xml2.* );
						       
						      break;
						 }
							  
						 case "def":
						 {     
						 	  xml = tempXMLList.( @name == field.name )[ 0 ];
						 	  var defName : String = xml.@name + "(";
							   
							  var flag : Boolean = false;
							  
							  for each( var param : Field in field.params.toArray() )
							  {
							  	  defName += param.name + ", ";
							  	  flag = true;
							  }
							  
							  if ( flag )
							     defName = defName.substr(0, defName.length - 2);
							  
							  defName += ")";
							  xml.@name = defName;
							  
							  break;
						 }
						   
						 default:
						 {
						 	 break;
						 }
					}
			    }
				
				var sortField : SortField = new SortField( "@pos" );
				sortField.numeric = true;
				
				structureXMLList = XMLUtils.sortElementsInXMLList( tempXMLList, [ sortField ] );
			    saveXMLList = structureXMLList.copy();
			}
			
			private function createXMLStructure( xml : XML, members : HashMap ) : XML
			{
				for each ( var field : Field in members.toArray() )
				{			
					var xml3 : XML = <item name={ field.name } pos={ field.pos } len={field.name.length} iconType={ field.fieldType }/>;
					xml.appendChild( xml3 );
					
					switch(field.fieldType)
					{
						case "class":
						{							
							var xml2 : XML = <item name={ field.name } pos={ field.pos } len={field.name.length} iconType={ field.fieldType }/>;
							
							xml2 = createXMLStructure( xml2, field.members );
							
							xml3.appendChild( xml2.* );
							
							break;
						}
							
						case "def":
						{     
							var defName : String = xml3.@name + "(";
							
							var flag : Boolean = false;
							
							for each( var param : Field in field.params.toArray() )
							{
								defName += param.name + ", ";
								flag = true;
							}
							
							if ( flag )
								defName = defName.substr(0, defName.length - 2);
							
							defName += ")";
							xml3.@name = defName;
							
							break;
						}
							
						default:
						{
							break;
						}
					}
				}
				
				return xml;
			}
			
			protected function find_changeHandler(event:TextOperationEvent):void
			{
				var tempXMLList : XMLList = saveXMLList.copy();
				
				var findString : String = find.text.toLowerCase();
				for ( var i : int = 0; i < tempXMLList.length(); i++ )
				{
					var items : XMLList = tempXMLList[i]..item;
					for ( var j : int = 0; j < items.length(); j++ )
					{
						if ( items[j].@name.toString().toLowerCase().indexOf( findString ) == -1 )
							delete items[j--];
					}
					
					if ( tempXMLList[i].children().length() == 0 && tempXMLList[i].@name.toString().toLowerCase().indexOf( findString ) == -1 )
						delete tempXMLList[i--];
					
				}
				
				structureXMLList = tempXMLList;
			}
			
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="disabledAndInactive" />
		<s:State name="normalAndInactive" />
		<s:State name="disabled" />
		<s:State name="normal" />
	</s:states>
	
	<s:Group width="100%" height="100%">
		
		<s:Rect width="100%" height="100%" radiusX="10" radiusY="10">
			<s:fill>
				<s:SolidColor color="#555555"/>
			</s:fill>
		</s:Rect>
		
		<s:VGroup width="100%" height="100%" top="9" left="9" right="9" bottom="9" gap="0">
			<s:TextInput id="find" width="100%"
						 contentBackgroundAlpha="0" borderAlpha="0"
						 change="find_changeHandler(event)"/>
			
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#000000" weight="0.3"/>
				</s:stroke>
			</s:Line>
		
			<mx:Tree id="structureTree" 
					 width="100%" height="100%"
					 disclosureClosedIcon="{ VDOMImage.Closed_Tree_Icon }"
					 disclosureOpenIcon="{ VDOMImage.Opened_Tree_Icon }"
					 dataProvider="{ structureXMLList }"
					 labelField="@name"
					 itemRenderer="net.vdombox.ide.common.view.components.itemrenderers.ScriptStructureTreeItemRenderer"
					 contentBackgroundAlpha="0"
					 borderAlpha="0">
				
			</mx:Tree>
			
		</s:VGroup>
	
	</s:Group>
	
</s:Skin>
