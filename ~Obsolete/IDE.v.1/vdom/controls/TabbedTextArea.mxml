<?xml version="1.0" encoding="utf-8"?>
<!-- TextAreaTabAllowed -->
<mx:TextArea 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="creationCompleteHandler();">
	<mx:Script>
		<![CDATA[
			import mx.core.UITextField;
			import mx.core.UITextFormat;
			import mx.events.FlexEvent;
			
			import mx.core.mx_internal;
			use namespace mx_internal;
			
			private var _allowTabKey : Boolean = false;

			[ Bindable ]
			public function set allowTabKey( value : Boolean ) : void
			{

				if ( value )
				{

					addEventListener( FocusEvent.KEY_FOCUS_CHANGE, catchTabKey );
				}
				else
				{

					removeEventListener( FocusEvent.KEY_FOCUS_CHANGE, catchTabKey );
				}

				_allowTabKey = value;
			}

			public function get allowTabKey() : Boolean
			{

				return _allowTabKey;
			}

			private function creationCompleteHandler() : void
			{
				var tf : TextFormat = new UITextFormat( this.systemManager );
				tf.tabStops = createTabs( 40, 30 );
				textField.defaultTextFormat = tf;
			}
			
			private function createTabs( count : uint, step : uint ) : Array
			{
				var tabsArray : Array = [];
			
				for ( var i : uint = 1; i <= count; i++ )
				{
					tabsArray.push( i * step );
				}
			
				return tabsArray;
			}
			
			private function catchTabKey( event : FocusEvent = null ) : void
			{
				if ( event )
				{
					var before : String = text.substring( 0, this.selectionBeginIndex );
					var after : String = text.substring( this.selectionEndIndex,
															  this.text.length );
					var newCaretPos : int = selectionBeginIndex + 1;
					textField.text = before + "\t" + after;
					textField.setSelection( newCaretPos, newCaretPos );
					textField.dispatchEvent( new Event( Event.CHANGE ) )
					event.preventDefault();
					setFocus();
				}
			}
		]]>
	</mx:Script>
</mx:TextArea>
