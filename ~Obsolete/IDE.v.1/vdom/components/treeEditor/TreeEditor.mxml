<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
 xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="creationCompleteHandler()" hide="hideHendler()" 
			show="showHnadler()" label="add Element" xmlns:ns1="vdom.components.treeEditor.colormenu.*" 
			xmlns:colorMenu02="vdom.components.treeEditor.colorMenu02.*" xmlns:treeEditor="vdom.components.treeEditor.*" xmlns:containers="vdom.containers.*"
			backgroundColor="#3d3d3d">
	
<mx:Metadata>
		[ResourceBundle("Tree")]
</mx:Metadata>	

<mx:Script>
	<![CDATA[
		import mx.controls.Button;
		import mx.charts.BubbleChart;
		import mx.effects.easing.Elastic;
		import vdom.containers.ApplicationPanel;
		import mx.core.Application;
		import vdom.events.TreeEditorEvent;
		import vdom.events.DataManagerEvent;
		import vdom.events.AddTreeElementEvent;
		import mx.managers.PopUpManager;
		import mx.controls.Alert;
		import vdom.managers.FileManager;
		import vdom.managers.DataManager;
		import mx.events.CloseEvent;
		
		include "TreeEditorScript.as";
		
		
 	private var massTreeElements:Array = new Array();
	private var massLines:Array = new Array();
	private var masIndex:Array = new Array();
	private var masMaxOfIndex:Array = new Array();
//	private var _curTree:Properties = new Properties();
	private var canLine:Canvas = new Canvas();
	private var pnFrom:Point = new Point();
	private var blDrawLine:Boolean = false;
	private var vctTest:Vector2 = new Vector2();
	private var curLine:Object = new Object();
	private var dataManager:DataManager  = DataManager.getInstance();
	private var xmlApplicationStructure:XML;
	private var btLine:DeleteLineButton = new DeleteLineButton();
	private var dublMain:Canvas = new Canvas();

/******* 
 * 			to Do
 * 	
 * 		* добавлять новый елемент в самый низ 
 * 		* у трее елемента сменить по умолчанию картинку
 * 		* у трии елемента картинка в соответстви с его типом.
 * 		??? массив элементов строить из другого места(массив "сортируемегого дерева" строить так же)
 * 		* делетеБТ должен исчезать когда нажимается другой елемент
 * 		* при создании нового елемента блокировать кнопку "ок"
 * 		* выделить новосозданный елемент
 * 
 * 		- бордеры убрать 
 * 		- 50% всегда, при наведении 100%
 * 		- Хайд темный фон белые буквы
 * 		- тайтл всередину
 * 		- штмл контенер темный фон , белые буквы
 * 		- кнопку делейт подвинуть
 * 		- кнопка старт по центру
 * 		- надписи по центру
 * 		- нею педж стиль сделать как файлМанаджера
 * 		- Сглаживание
 * */
	
	private var fileManager:FileManager = FileManager.getInstance();
	
	private function creationCompleteHandler():void
	{
		 fileManager = FileManager.getInstance();
	}
	
	private function showHnadler():void
	{
		
		if(!main) 
			main = new Canvas();
			
//		if(!dublMain)
//			dublMain = new Canvas();
			
//		dublMain.percentWidth = 100;
//		dublMain.percentHeight = 100;
		dublMain.setStyle(	"backgroundColor", "#ffffff");
//		dublMain.visible = false;
		
		dublMain.buttonMode = true;
		
		hide();
	/*
		if(!btLine)
			btLine = new DeleteLineButton();
		*/
		addTreeEditorListeners();
			
		dataManager.getApplicationStructure();
	}
	
	private function hideHendler():void
	{
		removeTreeEditorListeners();
		
		if(btSave.selected)
		{
			Alert.show("Do You Want to save changed structure in tree?", "Tree:", 3, this, alertClickSaveStructure);
		} else
		{
			hide();
		}
	}
	
	private function alertClickSaveStructure(event:CloseEvent):void
	{
		if (event.detail==Alert.YES)
        {
        	saveToServer();
        }else
        {
        	hide();
        }
	}
	
	private function hide():void
	{
		removeAllLines();
		removeMassTreeElements();
		
		
//		if(curTree)
//			dataManager.changeCurrentPage(curTree.ID);

		if (main.contains(btLine))
		{
			main.removeChild(btLine);
			curLine.mark = false;
		}
			
		masIndex = [];
		masMaxOfIndex = [];
		massLines = [];
	}
	
	
	private var needToSave:Boolean;
	private function  getApplicationStructure(dtManEvt:DataManagerEvent):void
	{
//		dataManager.removeEventListener(DataManagerEvent.GET_APPLICATION_STRUCTURE_COMPLETE, getApplicationStructure);
		
		unMarkButton();
		
		xmlApplicationStructure = dtManEvt.result;
		createTreeArr(xmlApplicationStructure);
		drawLines(xmlApplicationStructure);
/*
		if (needCreatTree == true)
		{
			needToSave = true;
			hideLenes();
			adjustmentTree(xmlApplicationStructure);
		
			
			
			var delayTimer:Timer = new Timer(1500, 1);
			delayTimer.addEventListener(TimerEvent.TIMER, timerHandler);//		removeMassTreeElements();
			delayTimer.start();
			markButton();
			return;
		}
	*/	
		_curTree.target = massTreeElements[dataManager.currentPageId];
		startPage = dataManager.currentApplicationInformation.Index;
		
		
		setStartPage();
		
		
//		if(_curTree.target != null)
//			_curTree.target.current = true;
	}
	
	private var dX:Number;
	private var dY:Number;
	private var mainWidth:Canvas = new Canvas();
	
	private function startReDrawLineHandler(trEvt:TreeEditorEvent):void
	{
		// object to Top
		main.removeChild(massTreeElements[trEvt.ID]);
		main.addChild(massTreeElements[trEvt.ID]);
		
		dX = main.mouseX - massTreeElements[trEvt.ID].x;
		dY = main.mouseY - massTreeElements[trEvt.ID].y;
		
		main.addChild(mainWidth);
		
		mainWidth.x = main.width  - 20;
		mainWidth.y = main.height - 20;
		
		if(main.horizontalScrollPosition)
			mainWidth.x = mainWidth.x + main.horizontalScrollPosition;
			
		if(main.verticalScrollPosition)
			mainWidth.y = mainWidth.y + main.verticalScrollPosition;
		
		Application.application.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
		Application.application.addEventListener(MouseEvent.MOUSE_UP, 	mouseUpHandler);
	}
	
	private function stopReDrawLineHandler(trEvt:TreeEditorEvent):void
	{
		main.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
		
		var curID:String = _curTree.target.ID;
		redrawLines(curID);
	}
	
	
	
	private function hideTreeElement(trEvt:Object):void
	{
		massTreeElements[_curTree.target.ID].resize = true;
	}
	

	private function lineClikHandler(msEvt:MouseEvent):void
	{
		removeLine();
	}
		
	
	private function markLines(muEvt:MouseEvent):void
	{
		curLine.mark = false;
		curLine = muEvt.currentTarget;
		curLine.mark = true;
		btLine.x = main.horizontalScrollPosition + mouseX - btLine.width / 2;
		btLine.y = main.verticalScrollPosition + mouseY  - btLine.height / 2;
		btLine.visible = true;
		
		if (!main.contains(btLine))
		{
			main.addChild(btLine);
		}
		muEvt.stopImmediatePropagation();
	}
	
	private function treeElementLinesReDrawHandler(trEvt:TreeEditorEvent):void
	{
		if(trEvt.currentTarget.ID != null)
			redrawLines(trEvt.currentTarget.ID); 
	} 
	
	/** 
	*
	*		Кликнули по обьекту, 
	*		- выделяем его
	*		- если надо проводим к нему линию связи с 
	*		с от другого обьекта
	*/
	
	private function mouseDownHandler(evt:MouseEvent):void
	{
		// проводим линию
		if(blDrawLine)
		{
			pnFrom.x = evt.currentTarget.x; 
			pnFrom.y =evt.currentTarget.y;
			
			drawLine(evt.currentTarget);
		}		
		
		_curTree.target = TreeElement(evt.currentTarget);		
		
	}
	
	
	
	private function mouseUpHandler(msEvt:MouseEvent):void
	{	
		Application.application.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
		Application.application.removeEventListener(MouseEvent.MOUSE_UP, 	mouseUpHandler);
		main.removeChild(mainWidth);
//		saveToServer();
//		markButton();
	}
	
	private var treeElemenUnderMouse:Object;
	private function treeElementMouseOutHandler(msEvt:MouseEvent):void
	{
		treeElemenUnderMouse = null;
		msEvt.currentTarget.availabled = true;
		
	}
	
	private function treeElementMouseOverHandler(msEvt:MouseEvent):void
	{
		if(blDrawLine)
		{
			msEvt.currentTarget.availabled = false;
		}
		treeElemenUnderMouse = msEvt.currentTarget;
	}
	
	
	private function mouseMoveHandler(msEvt:MouseEvent):void
	{
		var curID:String = _curTree.target.ID;
		
		if(!massTreeElements[curID])
			return;
//		main.width = mainWidth;
//		main.validateNow();	
		
		if (main.mouseX < dX)
			 	massTreeElements[curID].x = 0;
			else
				massTreeElements[curID].x = main.mouseX   - dX;
		
		if ((main.mouseY -dY ) < 10)
			 	massTreeElements[curID].y = 10;
			else
				massTreeElements[curID].y = main.mouseY - dY;
	
		redrawLines(curID);
	}
	/**
	*
	*		удаляем обьект и все его связи
	*
	*/
	private var massDeletedElemens:Array = new Array(); // of String
	private function deleteTreeElement(trEvt:TreeEditorEvent):void
	{
		_curTree.target = massTreeElements[trEvt.ID];
//		dataManager.changeCurrentPage(_curTree.target.ID);
		Alert.show(resourceManager.getString('Tree','do_you_want_to_delete_element'), resourceManager.getString('Tree','delete_element'), 3, this, alertClickDeleteTreeElement);
	}
	 
    private function alertClickDeleteTreeElement(event:CloseEvent):void 
    {
        if (event.detail==Alert.YES)
        {
        	dataManager.addEventListener(DataManagerEvent.DELETE_OBJECT_COMPLETE, deleteObjectHandler)
        	dataManager.deleteObject(_curTree.target.ID);
        }
    }
    
    private function deleteObjectHandler(dmEvt:DataManagerEvent):void
    {
    	dataManager.removeEventListener(DataManagerEvent.DELETE_OBJECT_COMPLETE, deleteObjectHandler)
    	deleteObject(_curTree.target.ID);
           	
		_curTree.target = massTreeElements[randomTreeElement];
		
		
		setStartPage();
		saveToServer();
    }
	
	/**
	*
	*		запускаем прорисовку линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function startDrawLine(trEvt:TreeEditorEvent):void
	{
		if(!colmen2.openedEyeOfSelectedLevel)
			return;
			
		vctTest = new Vector2();
		main.addChild(vctTest);//--для рисования связывающей линии
		addEventListener(MouseEvent.MOUSE_MOVE, drLine);
		
		blDrawLine = true; //говорим что рисуем линию
		addEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		drLine(new MouseEvent(MouseEvent.MOUSE_OVER));
		vctTest.graphics.clear();
	}
	
	private function saveToServerHandler(trEvt:TreeEditorEvent):void
	{
		saveToServer();
//		markButton();
	}
	
	
	/**
	* ресурсы
	*		перестаем рисовать линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function stopDrawLine(msEvt:MouseEvent):void
	{
		removeEventListener(MouseEvent.MOUSE_MOVE, drLine);
		removeEventListener(MouseEvent.MOUSE_DOWN, stopDrawLine);
		
		vctTest.clear();
		main.removeChild(vctTest); ///-------------***********
		blDrawLine = false;  //говорим что НЕ рисуем линию
	}
	
	/**
	*
	*		рисуем линию от елемента дерева
	*		до курсора мыши
	*
	*/
	private function drLine (mEvt:MouseEvent):void
	{
//		trace(main.measuredWidth);
		if(mouseX > main.width - 100 &&  (main.horizontalScrollPosition + main.width - main.measuredWidth) < 9)
			main.horizontalScrollPosition = main.horizontalScrollPosition + 10;	
		else if(mouseX < main.x + 100 && main.horizontalScrollPosition > 9)
			main.horizontalScrollPosition = main.horizontalScrollPosition - 10;	
		else if(mouseY > main.height - 100 && (main.verticalScrollPosition + main.height - main.measuredHeight) < 9)
			main.verticalScrollPosition = main.verticalScrollPosition + 10;	
		else if(mouseY < main.y + 100 &&  main.verticalScrollPosition > 9)
			main.verticalScrollPosition = main.verticalScrollPosition - 10;	
			
		vctTest.graphics.clear();
		
		if(treeElemenUnderMouse)
		{
			vctTest.createVector(_curTree.target, treeElemenUnderMouse, colmen2.selectedItem.level, .5);	
		}else
		{
			var pnTo:Object = calculatePointTo(mouseX + main.horizontalScrollPosition, mouseY + main.verticalScrollPosition , _curTree.target);
		
			vctTest.createVector(_curTree.target, pnTo, colmen2.selectedItem.level, .5);	
		}
	}
	
		
		
	private function dataManagerListenner(dmnEvt:DataManagerEvent):void
	{
		dataManager.removeEventListener(DataManagerEvent.SET_APPLICATION_STRUCTURE_COMPLETE, dataManagerListenner)
	}
	
	
	private function hideLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
			{
				massLines[level][frsTrElem][sknTrElem].visible = false;
				masIndex[level][frsTrElem][sknTrElem].visible  = false;
			}
	}
	
	private function showLines(treEvt:TreeEditorEvent):void
	{
		var level:String = treEvt.ID;
		for (var frsTrElem:String in massLines[level])
			for (var sknTrElem:String in massLines[level][frsTrElem])
			{
				massLines[level][frsTrElem][sknTrElem].visible = true;
				masIndex[level][frsTrElem][sknTrElem].visible  = true && shSingnature;
			}
	}

	private function chengeSelectedLevelHandler(trEvt:TreeEditorEvent):void
	{
		var level:String = trEvt.ID;
		if(!massLines[level])
			return;
		
		for(var fromObj:String in massLines[level])
			for(var toObj:String in massLines[level][fromObj])
			{
				main.removeChild(massLines[level][fromObj][toObj]);
				main.addChild(massLines[level][fromObj][toObj]);
				
				main.removeChild(masIndex[level][fromObj][toObj]);		
				main.addChild(masIndex[level][fromObj][toObj]);
			}
			
		for (var ID:String in massTreeElements)
		{
				main.removeChild(massTreeElements[ID]);
				main.addChild(massTreeElements[ID]);
		}
		
	}

	private function mouseClickHandler(msEvt:MouseEvent):void
	{
		
//		for (var ID:String in massTreeElements)
//				if(massTreeElements[ID].select) 
//					massTreeElements[ID].unSelect();

		if (main.contains(btLine))
		{
			main.removeChild(btLine);
			curLine.mark = false;
		}
	
	}
	
	private var startPage:String;
	private function changeStartPageHandler(treEvt:TreeEditorEvent):void
	{
		if(massTreeElements[startPage])
			massTreeElements[startPage].selected = false;
			
		startPage = treEvt.ID
		
		var data:XML = new XML( 
		'<Information>' + 
			'<Index>' + startPage +	'</Index>' + 
		'</Information>');

		dataManager.addEventListener(DataManagerEvent.SET_APPLICATION_INFO_COMPLETE, applicationInfoChangeHAndler); 
		dataManager.setApplicationInformation( dataManager.currentApplicationId, data);
	}
	
	private function applicationInfoChangeHAndler(dmEvt:DataManagerEvent):void
	{
		dataManager.removeEventListener(DataManagerEvent.SET_APPLICATION_INFO_COMPLETE, applicationInfoChangeHAndler);
		
		setStartPage();
	}
	
	
	private var treeElement:TreeElement = new TreeElement();
	
	private function addTreeElementLauncher():void 
	{
			var rbWnd:AddTreeElementWindow = AddTreeElementWindow(PopUpManager.createPopUp(this, AddTreeElementWindow, true));
			rbWnd.addEventListener(AddTreeElementEvent.TREE_ELEMENT_ADDED, addTreeElementHandler);
	}

	private function addTreeElementHandler(adTrEvt:AddTreeElementEvent):void 
	{
		var ID:String = adTrEvt.treeElementID

		/*
		trEl.name =  adTrEvt.title;
		trEl.type =  adTrEvt.trElementType;
		trEl.resourceID  =  adTrEvt.resourceID;
		trEl.description =  adTrEvt.description;
		trEl.state = chExpandAll.selected.toString();
		
		
		fileManager.loadResource(dataManager.currentApplicationId,  trEl.resourceID, massTreeElements[ID]);
		
		
		
		*/
	}
	
	private function autoSpacing():void
	{
		hideLenes();
		adjustmentTree(xmlApplicationStructure);
		
		var delayTimer:Timer = new Timer(1500, 1);
		delayTimer.addEventListener(TimerEvent.TIMER, timerHandler);//		removeMassTreeElements();
		delayTimer.start();
		markButton();
//		createTreeArr(xmlApplicationStructure);
		
	}
	private function timerHandler(tmEvt:TimerEvent):void
	{
		showLenes();
		
		_curTree.target = massTreeElements[dataManager.currentPageId];
		
//		if(_curTree.target != null)	_curTree.target.current = true;
		
		setStartPage();
		
		if(needToSave) 
			saveToServer();
		
		needToSave = false;
	}
	
	
	private var expand:Boolean = false;
	private function expandAll():void
	{
//		expand = chExpandAll.selected;
		expand = !expand;
		for (var tID:String in massTreeElements)
		{
			massTreeElements[tID].state = expand.toString();
		}
		
	} 
	
	private var shSingnature:Boolean;
	private function showSignature():void
	{
		shSingnature = !shSingnature;
		for(var level:String in massLines)
		{
			if(colmen2.showLevel(level) == true)
			{
				for(var ind1:String in massLines[level])
				{
					for(var ind2:String in massLines[level][ind1])
					{
						masIndex[level][ind1][ind2].visible = shSingnature;
					}
				}
			}
		}
	}
	/*
	private function hideSignature():void
	{
		shSingnature = false;
		for(var level:String in massLines)
		{
			if(colmen2.showLevel(level) == true)
			{
				for(var ind1:String in massLines[level])
				{
					for(var ind2:String in massLines[level][ind1])
					{
						masIndex[level][ind1][ind2].visible = shSingnature;
					}
				}
			}
		}
	}
	*/
	]]>
</mx:Script>
<mx:HBox width="100%" height="100%" >

<mx:Canvas id="main"   width="100%" height="100%" backgroundColor="#5C5C5C"	 >

<!--
	<mx:ComboBox x="28" y="46" >
	 <mx:ArrayCollection>
         <mx:String>1</mx:String>
         <mx:String>2</mx:String>
         <mx:String>3</mx:String>
      </mx:ArrayCollection>
	</mx:ComboBox>
-->
	</mx:Canvas>
<mx:Canvas  height="100%" 
		verticalScrollPolicy="auto"  horizontalScrollPolicy="off"   >	
<mx:VBox verticalGap="10"  top="10" paddingLeft="3" paddingRight="10" width="210">


	<containers:ClosablePanel width="100%" title="{resourceManager.getString('Tree','menu')}" paddingLeft="0" paddingRight="0" 
		paddingTop="0" paddingBottom="0">
		<mx:VBox width="100%" 	verticalGap="1"  verticalAlign="0" backgroundColor="0x999999">
			
			<treeEditor:TreeButton  labelBt="{resourceManager.getString('Tree','new_page')}"  click="addTreeElementLauncher()"
				iconBt="@Embed(source='/assets/treeEditor/new_page.png')"/>
			
			<treeEditor:TreeButton labelBt="{resourceManager.getString('Tree','auto_Spacing')}"  click="autoSpacing()"
				iconBt="@Embed(source='/assets/treeEditor/auto_spacing.png')" />
				
			<treeEditor:TreeButton labelBt="{resourceManager.getString('Tree','expand_all')}" click="expandAll()" 
				iconBt="@Embed(source='/assets/treeEditor/expand_all.png')"/>
			
			<treeEditor:TreeButton labelBt="{resourceManager.getString('Tree','show_signature')}"  click="showSignature()"
				iconBt="@Embed(source='/assets/treeEditor/show_signature.png')"/>
			
			<treeEditor:TreeButton labelBt="{resourceManager.getString('Tree','undo')}" click="{revert()}"
				iconBt="@Embed(source='/assets/treeEditor/revert.png')"/>
				
			<treeEditor:TreeButton id="btSave" labelBt="{resourceManager.getString('Tree','save')}" click="{saveToServer()}" 
				iconBt="@Embed(source='/assets/treeEditor/save.png')"/>
				
		<!--	<mx:CheckBox id="chExpandAll" label= "{resourceManager.getString('Tree','expand_all')}"  /> -->
		</mx:VBox>		
	</containers:ClosablePanel>	
	<treeEditor:Properties id="_curTree" width="100%" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0"/>
	<containers:ClosablePanel title="{resourceManager.getString('Tree','levels')}" width="100%" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0">
		<colorMenu02:ColorMenu2 id="colmen2" text="11111111" />
	</containers:ClosablePanel>	
</mx:VBox>
</mx:Canvas>
</mx:HBox>

</mx:Canvas>