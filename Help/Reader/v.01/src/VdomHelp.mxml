<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="frstLoadXML()">
	<mx:Script>
	<![CDATA[
		import mx.utils.StringUtil;
		import mx.events.TreeEvent;
		import mx.utils.Base64Decoder;
		
		private var install:XML = new XML();
		private var XML_URL:String = "StartXML.xml";
		private var myXMLURL:URLRequest;
		private var myLoader:URLLoader;
//		private var cacheFolder:File;
		private var fileStream:FileStream = new FileStream();
		
		
		// start loading 1-st XML 
		private function frstLoadXML():void
		{
			myXMLURL = new URLRequest(XML_URL)
			myLoader = new URLLoader(myXMLURL);
			myLoader.addEventListener(Event.COMPLETE, startXMLLoaded);
			myLoader.addEventListener(IOErrorEvent.IO_ERROR, startXMLLoaded);
		}
		
		// 
		private function startXMLLoaded(event:Event):void
		{
			myLoader.removeEventListener(Event.COMPLETE, startXMLLoaded);
			if(event.type == IOErrorEvent.IO_ERROR)
			{
				trace("!!!!!!!!!!!!!! Start XML not Finded !!!!!!!!!")	
			} 
			else if(event.type == Event.COMPLETE)
			{
//			    trace("Start loaded.");
				 
				install = XML(myLoader.data);
				for each(var product:XML in install.children())
				{
//					trace(product.@url);
					var xmlURL:URLRequest = new URLRequest(product.@url)
					var loader:URLLoader = new URLLoader(xmlURL);
					loader.addEventListener(Event.COMPLETE, xmlLoaded);
					loader.addEventListener(IOErrorEvent.IO_ERROR, xmlLoaded);
				} 
			}
		}
		
		private function xmlLoaded(event:Event):void
		{
			if(event.type == IOErrorEvent.IO_ERROR)
			{
				trace("!!!! XML not Finded  !!!!")	
			} 
			else if(event.type == Event.COMPLETE)
			{
//			    trace("Data loaded.");
			    parsingData(XML(event.target.data))
//			    trace(myLoader.data.toString());
			}
		}
		
		private function parsingData(product:XML):void
		{
			if(product == null || product.name() != "product")
			{
				trace("!!!!!!!!!!!! not Correct data from server !!!!!!!!!!!!!");
				return;
			}
			
//			trace(product.name());
			// save loaded data to local diskDrive 
			saveLoadedData(product);
			
			// выбрать ресурсы и сохранить их на диск
			saveResources(product);
			
			// выбрать странички сохранить их на диск
			savePages(product);
			// сгенерить дерево
			creatTree(product);
		}
		
		private function saveLoadedData(product:XML):void
		{
			var byteArray:ByteArray = new ByteArray();
				byteArray.writeMultiByte(product.toXMLString()+"\n", "UTF-8");
				
				var fileName:String =  product.name.toString()+ ".xml";
			cacheFile( fileName, byteArray);
		}
		
		private function saveResources(product:XML):void
		{
			for each(var page:XML in product.pages.children())
			{
				for each(var resource:XML in page.resources.children())
				{
					var base64:Base64Decoder = new Base64Decoder();
						base64.decode(resource.toString());
					var byteArray:ByteArray = base64.toByteArray();
					var fileName:String = "resources/"+ resource.@id + "." + resource.@type;
					
					cacheFile(fileName , byteArray);
				}
			}
		}
		
		private var arrayOfPages:Array = new Array();
		
		private function savePages(product:XML):void
		{
			for each(var page:XML in product.pages.children())
			{
					var byteArray:ByteArray = new ByteArray();
						byteArray.writeMultiByte(page.content.toString()+"\n", "UTF-8");
					var fileName:String = page.name.toString() + ".html";
					
					cacheFile(fileName , byteArray);
					
					arrayOfPages[page.name.toString()] = true;
			}
		}
		
		public function cacheFile(contentName:String, content:ByteArray):void 
		{
			var newFileName:String = contentName;
			var newFile:File = File.applicationStorageDirectory.resolvePath(newFileName);
//			trace(newFile.toString())
			try {
				
				fileStream.open(newFile, FileMode.WRITE);
				fileStream.writeBytes(content);
				fileStream.close();
				
			} catch(error:IOError) {
//				var er:* =  error;
				trace("!!!!!!!!!!!!!!!! Error Write !!!!!!!!!!!!!!! \n" + error.message +"\n"+newFileName);
				return;
			}
		}
			
		private function creatTree(product:XML):void
		{
			var toc:XML =  new XML();
				toc = product.toc[0];
			tree.dataProvider = toc;
			tree.selectedIndex = 0;
			tree.validateNow();
			
			var pageName:String = tree.selectedItem.@name;
			showSelectedPage(pageName);
		}
			
		private function treeChangeHandler(object:Object):void
		{
			showSelectedPage(tree.selectedItem.@name);
			
		}
		
		private function showSelectedPage(pageName:String):void
		{
			var fileName:String = pageName +".html";
			var newFile:File = File.applicationStorageDirectory.resolvePath(fileName);
			var fullPath : String = newFile.nativePath;
			html.location = fullPath; 
			fileStream.close();
			
		}
		
		private function pageChangedHandler(event:Event):void
		{
			var fullPath:String = html.location;
			var index:Number = Math.max(fullPath.lastIndexOf( "/" ),fullPath.lastIndexOf( "\\") );
			var fileName : String = fullPath.substr( index + 1 ); 
			fileName = fileName.substring( 0, fileName.lastIndexOf( "." )  );
			trace(fullPath);
			var selectedItem:String = tree.selectedItem.@name;
			
			if(selectedItem == fileName)
				return;
			
			if(arrayOfPages[fileName])
			{
				selectNecessaryItem(fileName);
			}else
			{
				navigateToURL(new URLRequest(fullPath));
				showSelectedPage(selectedItem);
			}	
		}
		
		private function selectNecessaryItem(fileName:String):void
		{
			var currentElement:XML = tree.dataProvider.source..page.(@name == fileName)[0];
			
			openTree(currentElement);
			
			tree.selectedItem = currentElement;
			
			var index:int =  tree.getItemIndex(tree.selectedItem);
			tree.scrollToIndex(index);
		}
		
		private function openTree(item:Object):void
		{
			var parentItem:Object = XML(item).parent();
			if (parentItem)
			{
				openTree(parentItem);
				tree.expandItem(parentItem, true, false);
				tree.validateNow();
			}
		}
		
		private function test(event:Event):void
		{
			var  sqlConnection:SQLConnection = new SQLConnection();
			var newFile:File = File.applicationStorageDirectory.resolvePath("HelpDB.db");
			
			// Database has a table "employee" with columns
			// employeeID, firstName, lastName, birthday
//			conn.open();
			
			try {
				
				sqlConnection.open(newFile, SQLMode.CREATE );
				
//				fileStream.open(newFile, FileMode.WRITE);
//				fileStream.writeBytes(content);
//				fileStream.close();
				
			} catch(error:IOError) {
//				var er:* =  error;
				trace("!!!!!!!!!!!!!!!! Error Creating 'HelpDB.db'  !!!!!!!!!!!!!!! \n" + error.message );
				return;
			}
			
			try {
				var selectStatement:SQLStatement = new SQLStatement();
				selectStatement.sqlConnection = sqlConnection;
				selectStatement.text = "CREATE TABLE page (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL,  data TEXT, resources TEXT, id_help INTEGER NOT NULL);";
				selectStatement.execute();
				
				selectStatement.text = "CREATE TABLE help (id INTEGER PRIMARY KEY AUTOINCREMENT, toc XML, id_product INTEGER NOT NULL, id_locale INTEGER NOT NULL);";
				selectStatement.execute();
				
				
				selectStatement.text = "CREATE TABLE product (id INTEGER PRIMARY KEY AUTOINCREMENT, name CHAR NOT NULL, version CHAR NOT NULL);";
				selectStatement.execute();
				
				selectStatement.text = "CREATE TABLE locale (id INTEGER PRIMARY KEY AUTOINCREMENT, name CHAR NOT NULL);";
				selectStatement.execute();
				
				sqlConnection.close();
				
			} catch (err:SQLError) {
				// since there is no column "name", an error will be thrown
				localizeError(err);
			}
			function localizeError(e:SQLError):void 
			{
				var argsLength:int = e.detailArguments.length;
				switch (e.detailID) 
				{
					case 2030:
					// default details string: "trigger '%s' already exists"
					// do stuff
						break;
					// ... other cases ...
					case 2036:
					// default details string: "no such column: '%s[.%s[.%s]]'"
						var colPath:String = "";
						if (argsLength == 1) 
						{
							colPath = e.detailArguments[0];
						} else if (argsLength == 2) 
						{
							colPath = e.detailArguments[0]+"."+e.detailArguments[1];
						} else if (argsLength == 3) 
						{
							colPath = e.detailArguments[0]+"."+e.detailArguments[1]+"."+e.detailArguments[2];
						}
			// or use the locale information to generate a localized string
						displayLocalizedDetail("Column '" + colPath + "' does not exist.");
						break;
				default:
					displayLocalizedDetail(e.details);
			}
			}
			function displayLocalizedDetail(str:String):void 
			{
				trace(str)
			// display error detail
			}
//			------------------
		/*	var newFile:File = File.applicationStorageDirectory.resolvePath("db");
			var  sqlConnection:SQLConnection = new SQLConnection();
			
			try {
				
				sqlConnection.open(newFile, SQLMode.CREATE );
				sqlConnection.close();
//				fileStream.open(newFile, FileMode.WRITE);
//				fileStream.writeBytes(content);
//				fileStream.close();
				
			} catch(error:IOError) {
//				var er:* =  error;
				trace("!!!!!!!!!!!!!!!! Error Write !!!!!!!!!!!!!!! \n" + error.message );
				return;
			}
//				sqlConnection.
	*/	}
	]]>
</mx:Script>
	<mx:Tree id="tree" x="81" y="70" width="145" height="249"
		labelField="@title" showRoot="false" change="{treeChangeHandler(event)}" />
	<mx:HTML id="html" x="267" y="72" width="362" height="247"
		locationChange="{pageChangedHandler(event)}"/>
	<mx:Button x="267" y="42" label="back" click="{html.historyBack()}"/>
	<mx:Button x="328" y="42" label="forvatd" click="{html.historyForward()}"/>
	<mx:Button x="258" y="327" label="Test" click="{test(event)}"/>
	
</mx:WindowedApplication>
