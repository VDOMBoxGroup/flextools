<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:vdomTitleBar="vdom.core.vdomTitleBar.*"
						xmlns:mx="http://www.adobe.com/2006/mxml"
						xmlns:local="*"
						width="700" height="600" minWidth="650" minHeight="300"
						backgroundColor="0x373739" creationComplete="{creatComleatHandler()}"
						layout="absolute" showGripper="false" showStatusBar="false"
						showTitleBar="false" title="VDOM Help Aplication"
						titleBarColors="[ 0x666666, 0x222222 ]"
						titleIcon="@Embed('icons/16_vdom_icon.png')" titleTextStyleName="tbStyle">
	<mx:Style>
		.tbStyle {
			color : #FFFFFF;
		}
	</mx:Style>
	<mx:Script>
	<![CDATA[
		import mx.collections.XMLListCollection;
		import mx.controls.Label;
		import mx.controls.List;
		import mx.events.CloseEvent;
		import mx.events.ListEvent;
		import mx.events.TreeEvent;
		import mx.managers.PopUpManager;
		import mx.messaging.AbstractConsumer;
		import mx.printing.FlexPrintJob;
		import mx.printing.FlexPrintJobScaleType;
		import mx.utils.Base64Decoder;
		import mx.utils.StringUtil;
		
		
		/**
		 * сделать хелпы 2шт.
		 * поиск подсвечивался
		 * кнопки при наведении выделялись
		 * 
		 * 
		 * 
		 */
		
//		private var cacheFolder:File;
		
		private var sqlProxy:SQLProxy = new SQLProxy();
		private var pageList : List = new List();
		private var markList : List = new List();
		
		private var stylesManager : CSSStyleManager = new CSSStyleManager();
		
		[Embed(source='../assets/bookmarks.png')]
		[Bindable]
		public var python:Class;
		/***
		 * 
		 * 	Иконки для дерева (лист и книжка)
		 * 	Квадратик на верх
		 * 	? стрелочки лево право
		 * 
		 * */
		
		private function creatComleatHandler():void
		{
			sqlProxy.creatDB();
			
			updateToc();
			
			stylesManager.addEventListener(CSSStyleManager.STYLE_SETTED, onStylesLoaded);
			stylesManager.setStyle();
			
		}
		
		private function onStylesLoaded(evt : Event):void
		{
			stylesManager.removeEventListener(CSSStyleManager.STYLE_SETTED, onStylesLoaded);
			
			pageList.percentWidth = 100; 
			pageList.percentHeight = 100; 
			pageList.labelField = "title";
			pageList.addEventListener(ListEvent.CHANGE, listChangeHandler); 
			pageList.setStyle("color", "#000000");
			searchResult.addChild(pageList);
			
			markList.percentWidth = 100; 
			markList.percentHeight = 100; 
			markList.labelField = "title";
			markList.addEventListener(ListEvent.CHANGE, markListChangeHandler); 
			markList.setStyle("color", "#000000");
			bookMarks.addChild(markList);
			
		}
		
		private function updateToc():void
		{
			var result:Object = sqlProxy.getToc();
			var tocOfProducts : XMLListCollection = new XMLListCollection();
			
			if(result)
			{
				for (var i:String in result)
				{
					var tempXML : XML = result[i]["toc"];
					for each(var child:XML in tempXML.children())
						tocOfProducts.addItem(child);
				}
			}
			
			
			tree.dataProvider  = tocOfProducts;
			tree.validateNow();
			tree.selectedIndex = 0;
			
			if(tree.selectedItem)
			{
				var pageName:String = tree.selectedItem.@name;
				showSelectedPage(pageName);
			}
						
			var pages : Object = sqlProxy.getPages();
			if(pages)
			{
				for (i in pages)
				{
					var name :String = pages[i]["name"];
					arrayOfPages[name] = true;
				}
			}
		}
		
		private var arrayOfPages:Array = new Array();
		

		
		private function treeChangeHandler(object:Object):void
		{
			showSelectedPage(tree.selectedItem.@name);
			
		}
		
		private function markListChangeHandler(evt:ListEvent):void
		{
			showSelectedPage(markList.selectedItem.name);
		}
		
		private function listChangeHandler(object:ListEvent):void
		{
//			showSelectedPage(pageList.selectedItem.name);
			var fileName:String = pageList.selectedItem.name;
			var newFile:File = File.applicationStorageDirectory.resolvePath(fileName);
			var fullPath : String = newFile.url;
			
//			var phraseRE1:RegExp = new RegExp(">[^<]*?("+"and" +").*?<","gimsx");
//			 fullPath.replace(phraseRE1, "<b>and</b>");
			html.addEventListener(Event.COMPLETE, zzz );
			html.location = fullPath; 
//			html.
//			fileStream.close();
		}
		
		
		private function showSelectedPage(pageName:String):void
		{
			findDistanition(pageName);
			
			var fileName:String = pageName	;
			var newFile:File = File.applicationStorageDirectory.resolvePath(fileName);
			var fullPath : String = unescape(newFile.url);
			var f : File = File.applicationStorageDirectory; 
			html.location = fullPath; 
			
			
//			fileStream.close();
			
		}
		
		private function zzz( event : Event ) : void
		{
			html.removeEventListener(Event.COMPLETE, zzz );
			
			var searhWord : String = searchWord.text;
			
			var phraseRE:RegExp = /\s+/gim;

			searhWord = searhWord.replace(phraseRE, "+"); 
			
			if(html.htmlLoader.window.localSearchHighlight)
				html.htmlLoader.window.localSearchHighlight(searhWord);
		}
		
		private function pageChangedHandler(event:Event):void
		{
			var fullPath:String = unescape(html.location);
			var fileName : String = fullPath.substr( 13 ); 
			var phraseRE:RegExp = /\\/gim;
			fileName = fileName.replace(phraseRE,"/"); 

			
			
			if(!tree.selectedItem)
				return;
			var selectedItem:String = tree.selectedItem.@name;
			
			if(selectedItem == fileName)
				return;
			
			if(arrayOfPages[fileName])
			{
				selectNecessaryItem(fileName);
			}else
			{
				navigateToURL(new URLRequest(fullPath));
				showSelectedPage(selectedItem);
			}
		}
		
		private function selectNecessaryItem(fileName:String):void
		{
			var currentElement:XML = tree.dataProvider.source..page.(@name == fileName)[0];
			
			openTree(currentElement);
			
			tree.selectedItem = currentElement;
			
			var index:int =  tree.getItemIndex(tree.selectedItem);
			tree.scrollToIndex(index);
			
			findDistanition(fileName);
		}
		
		private function openTree(item:Object):void
		{
			var parentItem:Object = XML(item).parent();
			if (parentItem)
			{
//				distan.text = item.@title +' \\ '+  distan.text;
				openTree(parentItem);
				tree.expandItem(parentItem, true, false);
				tree.validateNow();
			}
		}
		
		private function findDistanition(fileName:String):void
		{
			location.removeAllChildren();
//			distan.text = "";
			var currentElement:XML = tree.dataProvider.source..page.(@name == fileName)[0];
			
			find(currentElement);

//			distan.text = "\\" + distan.text;
			
			function find(item:XML):void
			{
				var parentItem:Object = XML(item).parent();
				if (parentItem)
				{
					var loc : Location = new Location(item);
					loc.addEventListener(MouseEvent.CLICK, locationClickHandler);

					find(parentItem);
					
					if(location.numChildren  == 0)
//						distan.text = item.@title;
						location.addChild(loc);
					else	
					{
						var lb : Label = new Label();
							lb.text = "->";
							lb.setStyle("color", "#333333");
							location.addChild(lb);
							
						location.addChild(loc);	
					}
//						distan.text = item.@title +' -> '+  distan.text;
					
				}
			}
		}
		
		
		private function locationClickHandler(msEvt:MouseEvent):void
		{
			var addreess : String = Location(msEvt.currentTarget).addreess;
			
			showSelectedPage(addreess);
//			selectNecessaryItem(addreess);
			
		}
		
		private function search():void
		{
			accordion.selectedIndex = 1;
			accordion.validateNow();
				
			pageList.dataProvider  = null;
			pageList.dataProvider = sqlProxy.search(searchWord.text);
			pageList.selectedItem = null;
		}
		
		private function print():void
		{
			
				var zzz : HTML = new  HTML();
				zzz.htmlText = html.htmlText;
				
			 // Create an instance of the FlexPrintJob class.
                var printJob:FlexPrintJob = new FlexPrintJob();

                // Start the print job.
                if (printJob.start() != true) return;

                // Add the object to print. Do not scale it.
                printJob.addObject(html, FlexPrintJobScaleType.MATCH_WIDTH);
                

                // Send the job to the printer.
                printJob.send();

		}
		
		private function markPage():void
		{
			var fullPath:String = unescape(html.location);
			var fileName : String = fullPath.substr( 13 ); 
			var phraseRE:RegExp = /\\/gim;
			fileName = fileName.replace(phraseRE,"/"); 
			sqlProxy.mark(fileName);
		
		/*	if(accordion.selectedIndex == 0 && tree.selectedItem)
			{
				trace("Tree: " + tree.selectedItem.@name);
				sqlProxy.mark(tree.selectedItem.@name);
			}else 
			if(accordion.selectedIndex == 1 && pageList.selectedItem)
			{ 	
				trace("PageList: " + pageList.selectedItem.name);
				sqlProxy.mark(pageList.selectedItem.name);
			}
		*/	
			getMarkedPage();
		}
		
		private function getMarkedPage():void
		{
			 markList.dataProvider  = sqlProxy.getMarkedPage();
			 trace("=========");
		}
		
		private function runSettings():void 
		{
				var rbWnd:Settings = Settings(PopUpManager.createPopUp(this, Settings, true));
				rbWnd.addEventListener(CloseEvent.CLOSE, closeSettingsHandler);
		}
	
		private function closeSettingsHandler(clEvt:CloseEvent):void 
		{
			updateToc();
//			var ID:String = adTrEvt.treeElementID
	
		}
		
	
		private function minMaximize():void
		{
			if (stage.nativeWindow.displayState == NativeWindowDisplayState.MAXIMIZED)
				restore();
			else
				maximize();
		
		}
		
		private function getIcon(value:Object):Class 
		{
//			var xmlData:XML = XML(value);
		
//			if (xmlData.@Language.toXMLString() =='python')
				return python;
		}
	
	]]>
</mx:Script>
	
<mx:VBox width="100%" height="100%"   x="0">
	<mx:Canvas width="100%" >
		<mx:Image source="@Embed('../assets/header.png')" width="100%" maintainAspectRatio="false" scaleContent="true" 
			mouseDown="{nativeWindow.startMove();}" doubleClick="{minMaximize()}" doubleClickEnabled="true"/>
		<mx:HBox paddingLeft="5" paddingTop="5" paddingRight="5" 
				color="#FFFFFF" width="100%">
			<mx:Image source="@Embed('icons/16_vdom_icon.png')" />
			<mx:Label text="VDOM Help Aplication" />
			<mx:HBox width="100%"  horizontalAlign="right" paddingTop="2">
				<mx:Image source="@Embed('../assets/minimize.png')" right="0" click="{minimize()}"/>
				<mx:Image source="@Embed('../assets/restore.png')" right="0" click="{minMaximize()}"/>
				<mx:Image source="@Embed('../assets/close.png')" right="0" click="{close()}"/>
			</mx:HBox>
		</mx:HBox>
	</mx:Canvas>
	
	<mx:HRule width="100%" strokeColor="0x1a1a1a" shadowColor="0x737373"/>
	<mx:HBox paddingTop="5" paddingLeft="5" width="100%">
		<local:LeftArrow click="{html.historyBack()}"  htmlPage="{html}"/>
		<local:RightArrow click="{html.historyForward()}"  htmlPage="{html}"/>
		<mx:Image source="@Embed('../assets/gear_i.png')" click="{runSettings();}" />
		
		<mx:TextInput id="searchWord" x="185" y="14" width="141"  enter="{search();}" />
		<mx:Button  label="Search" click="{search();}" icon="@Embed('../assets/search.png')" color="#FFFFFF" 
			fillColors="#333333"  textSelectedColor="#FFFFFF" cornerRadius="1" borderColor="#262626" themeColor="#656565" textRollOverColor="#FFFFFF"/>
	</mx:HBox>
	<mx:HRule width="100%" strokeColor="0x1a1a1a" shadowColor="0x4b4c4c"/>
	<mx:HDividedBox y="60" width="100%" height="100%" horizontalGap="1">
		<mx:Accordion id="accordion" width="155" height="100%" addedEffect="false" backgroundColor="#000000" color="#FFFFFF" >
			<mx:Canvas label="Content" width="100%" height="100%" icon="@Embed('../assets/contents.png')">
				<mx:Tree id="tree" width="100%" height="100%" color="#000000"   	
					labelField="@title" showRoot="true" change="{treeChangeHandler(event)}"  
					folderOpenIcon="@Embed('../assets/open_folder.png')" folderClosedIcon="@Embed('../assets/close_folder.png')" 
					defaultLeafIcon="@Embed('../assets/page.png')" /> 
			</mx:Canvas>
			<mx:Canvas id="searchResult" label="Search Result" width="100%" height="100%" icon="@Embed('../assets/search.png')" show="{pageList.selectedIndex = -1}"/>
			<mx:Canvas  id="bookMarks" label="Bookmarks" width="100%" height="100%" icon="@Embed('../assets/bookmarks.png')" show="{getMarkedPage()}" creationComplete="{getMarkedPage()}"/>
		</mx:Accordion>
		<mx:VBox width="100%" height="100%" verticalGap="0" verticalAlign="0">
			<mx:Canvas color="#FCFBFB"  width="100%" backgroundColor="#E4E4E4" >
				<mx:HBox id="location" paddingRight="10" paddingTop="5" paddingLeft="5" paddingBottom="5" width="100%">
					
				</mx:HBox>
				<mx:HBox right="0" paddingRight="10" paddingTop="5" paddingLeft="5" paddingBottom="5">
					<mx:Image source="@Embed('../assets/printer.png')" click="{print()}"/>
					<mx:Image source="@Embed('../assets/bookmark__plus.png')" click="{markPage()}"/>
				</mx:HBox>
			</mx:Canvas>
			<mx:HTML id="html"  width="100%" height="100%" 
				locationChange="{pageChangedHandler(event)}"/>
		</mx:VBox>
	</mx:HDividedBox>
	<mx:HBox horizontalAlign="right" width="100%">
		<mx:VBox verticalGap="1" verticalAlign="0">
			<mx:Label text="VDOM Help Application" color="0xFFFFFF" textAlign="right" width="100%"/>
			<mx:Label text="Copyright© 2009 - V.D.O.M. Box Internationl - All rights reserved "  color="0xFFFFFF"/>
		</mx:VBox>
		<mx:Image source="@Embed('../assets/label.png')"/>
	</mx:HBox>
</mx:VBox>		
</mx:WindowedApplication>
