<?xml version="1.0" encoding="utf-8"?>
<!--
	Resource Browser component for VDOM Box IDE
	Developed by Vadim A. Usoltsev, Tomsk, Russia, 2008
-->
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" width="600" height="450"
	title="Settings"
	creationComplete="creationComplete()"
	showCloseButton="true"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" 
	borderAlpha="0.98" cornerRadius="1" 
	visible="true" shadowDirection="right"
	borderColor="#373739" titleStyleName="resourceBrowserTitle"
	borderThicknessLeft="1" borderThicknessRight="1"
>
	<mx:Style>
		.resourceBrowserTitle {
			color:#FFFFFF;
			fontWeight:bold;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.CheckBox;
			import mx.managers.PopUpManager;
			import mx.events.CloseEvent;
			
			private var sqlProxy:SQLProxy = new SQLProxy();
			private var checkBoxArray:Array = []; 
			
			private function creationComplete():void 
			{
				addEventListener(CloseEvent.CLOSE, closeHandler); 
				PopUpManager.centerPopUp(this);
				
				getAllProducts();
				
			}
			
			private function getAllProducts():void
			{
				applications.removeAllChildren();
				
				var result:Object = sqlProxy.getAllProducts();
				for(var i:String in result)
				{
					var chBox:CheckBox = new CheckBox();
					chBox.label = result[i]["title"];
					chBox.selected = result[i]["visible"] == "true" ;
					applications.addChild(chBox);
					checkBoxArray[result[i]["name"]] = chBox;
				}
			}
			
			private function closeHandler(cEvent:CloseEvent):void 
			{
				PopUpManager.removePopUp(this);
			}
			
			private function cancelPressed():void 
			{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			private function okHandler():void 
			{
				for(var name:String in checkBoxArray)
				{
					sqlProxy.changeStatusForProduct(name, checkBoxArray[name]["selected"]);
				}
				
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			private var update:Update = new Update();
			private function checkApdate():void
			{
				newProducts.removeAllChildren();
				newProductArray.removeAll();
				
				update.addEventListener(HelpEvent.INSTALL_FILE_LOADED, installFileLoadedHandler); 
				update.addEventListener(HelpEvent.INSTALL_FILE_LOADED_ERROR, installFileLoadedHandler); 
				update.frstLoadXML();
			}
			
			private function installFileLoadedHandler(hlEvt:HelpEvent):void
			{
				update.removeEventListener(HelpEvent.INSTALL_FILE_LOADED, installFileLoadedHandler); 
				update.removeEventListener(HelpEvent.INSTALL_FILE_LOADED_ERROR, installFileLoadedHandler); 
				
				if(hlEvt.type == HelpEvent.INSTALL_FILE_LOADED)
				{
					showNewProducts(hlEvt.dataEvent);
				} else if(hlEvt.type == HelpEvent.INSTALL_FILE_LOADED)
				{
					statu.text = "Check Error";
					
				}
			}
			
			private var newProductArray:ArrayCollection = new ArrayCollection();
			private function showNewProducts(object:Object):void
			{
				
				var install:XML = XML(object);
				update.addEventListener(HelpEvent.UPDATE_DISPLAY_LIST, updateDisplayListHandler);
				for each(var product:XML in install.children())
				{
					var curProductVersion:String = sqlProxy.getVersionOfProduct(product.@name, product.@language);
					if(curProductVersion == '' || Number(curProductVersion)< Number(product.@version))
					{
						var chBox:CheckBox = new CheckBox();
							chBox.label = product.@title + " ("+ product.@size + ")" ;
							chBox.selected = true;
						newProducts.addChild(chBox);
						
						var stLabel:Label = new Label();
						
						
						newProducts.addChild(stLabel);
						
						newProductArray.addItem({chBox:chBox, url:product.@url, productName:product.@name, stLabel:stLabel });
					} 
				}
			}
			
			private function updateDisplayListHandler(hlEvt:HelpEvent):void
			{
				newProducts.validateNow();
			}
			
			private function load():void
			{
				for(var name:String in newProductArray)
				{
					if(newProductArray[name]["chBox"]["selected"])
					{
						newProductArray[name]["stLabel"]["text"] = "Loading...";
//						update.load(newProductArray[name]["url"], newProductArray[name]["stLabel"]);
					}

					newProducts.validateNow();
					if(newProductArray[name]["chBox"]["selected"])
						callLater(update.load, [newProductArray[name]["url"], newProductArray[name]["stLabel"]] );
				}
			}
		]]>
		
	
		
	</mx:Script>
	<mx:TabNavigator width="100%" height="100%">
		<mx:VBox label="Products" width="100%" height="100%" show="{getAllProducts()}" 
				paddingBottom="10" paddingLeft="10" paddingRight="10">
			<mx:Label text="Select Necessary Products: " width="100%" textAlign="center" fontSize="20"/>
			<mx:VBox id="applications" paddingLeft="5"   borderStyle="solid" width="100%" height="100%" />
		</mx:VBox>
		<mx:VBox   label="Update" width="100%" height="100%" creationComplete="checkApdate()" >
			<mx:Label id="statu" />
			<mx:VBox id="newProducts" />
			<mx:Button label="Load" click="{load()}"/>
			
		</mx:VBox>
	</mx:TabNavigator>
	<mx:ControlBar horizontalAlign="right" 
			height="35" paddingTop="2" paddingBottom="2" paddingLeft="10" paddingRight="10" color="#FFFFFF" >
    		<mx:Button  label="OK" click="{okHandler()}"  color="#FFFFFF" 
			fillColors="#333333"  textSelectedColor="#FFFFFF" cornerRadius="1" borderColor="#262626" themeColor="#656565" textRollOverColor="#FFFFFF"/>
			<mx:Button  label="Cancel" click="{cancelPressed()}" color="#FFFFFF" 
			fillColors="#333333"  textSelectedColor="#FFFFFF" cornerRadius="1" borderColor="#262626" themeColor="#656565" textRollOverColor="#FFFFFF"/>
	</mx:ControlBar>
</mx:TitleWindow>
