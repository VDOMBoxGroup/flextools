<?xml version="1.0" encoding="utf-8"?>
<!--
	Resource Browser component for VDOM Box IDE
	Developed by Vadim A. Usoltsev, Tomsk, Russia, 2008
-->
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" width="600" height="450"
	title="Settings"
	creationComplete="creationComplete()"
	showCloseButton="true"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" 
	borderAlpha="0.98" cornerRadius="1" 
	visible="true" shadowDirection="right"
	borderColor="#373739" titleStyleName="resourceBrowserTitle"
	borderThicknessLeft="1" borderThicknessRight="1"
>
	<mx:Style>
		.resourceBrowserTitle {
			color:#FFFFFF;
			fontWeight:bold;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import net.vdombox.helpreader.events.ProductsUpdatorEvent;
			import net.vdombox.helpreader.controller.ProductsUpdator;
			import net.vdombox.helpreader.model.AlertMessages;
			import net.vdombox.helpreader.controller.ProductXMLLoader;
			import net.vdombox.helpreader.model.SQLProxy;
			import net.vdombox.helpreader.utils.Utils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			private var xmlLoader				: ProductXMLLoader = new ProductXMLLoader();
			
			private var productsUpdator			: ProductsUpdator = new ProductsUpdator();
			
			private var newProductArray			: ArrayCollection = new ArrayCollection();
			
			private var checkBoxArray			: Array = [];
			
			private var sqlProxy				: SQLProxy = new SQLProxy();
			
			private function creationComplete():void 
			{
				addEventListener(CloseEvent.CLOSE, closeHandler); 
				PopUpManager.centerPopUp(this);
				
				getAllProducts();
				
			}
			
			private function getAllProducts():void
			{
				applications.removeAllChildren();
				
				var chBox : CheckBox;
				var result:Object = sqlProxy.getAllProducts();
				
				for(var i:String in result)
				{
					chBox = new CheckBox();
					
					chBox.label = result[i]["title"];
					chBox.selected = result[i]["visible"] == "true" ;
					
					applications.addChild(chBox);
					
					checkBoxArray[result[i]["name"]] = chBox;
				}
			}
			
			private function closeHandler(cEvent:CloseEvent):void 
			{
				PopUpManager.removePopUp(this);
			}
			
			private function cancelPressed():void 
			{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			private function okHandler():void 
			{
				for(var name:String in checkBoxArray)
				{
					sqlProxy.changeStatusForProduct(name, checkBoxArray[name]["selected"]);
				}
				
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			private function checkUpdate():void
			{
				newProductArray.removeAll();
				
				//loadLocalHelp();
			}
			
			private function loadLocalHelp():void
			{
				var startXMLContent	: String = "";
				
				var fileStream		: FileStream = new FileStream();
				var startXmlFile : File = new File(File.documentsDirectory.url +"/VDOMHelp/StartXML.xml");	
				
				try
				{
					if (startXmlFile.exists)
					{
				  		fileStream.open( startXmlFile, FileMode.READ);
				  		startXMLContent = fileStream.readMultiByte(startXmlFile.size, File.systemCharset);
						fileStream.close();
					}
					
					if(startXMLContent != "")
						showNewProducts(startXMLContent);
			 	}
			 	catch (error:Error)
				{
					Alert.show( error.message, AlertMessages.MSG_TYPE_ERROR);
				}
			}
			
			private function showNewProducts(products:Object):void
			{
				var install : XML = XML(products);
				
				if	(install == null || install.name() != "install")
					return;
				
				for each(var product:XML in install.children())
				{
					showProduct(product.@title, product.@name, Number(product.@version), product.@size, product.@url);
				}
			}
			
			private function showProduct(title:String, name:String, version:Number, size:String, url:String, productXMLContent:XML = null):void
			{
				var productFromUpdateList : Object = getProductByNameFromUpdateList(name); 
				if ( productFromUpdateList && productXMLContent)
				{
					var alertMsg : String = AlertMessages.MSG_PRODUCT_EXISTS_IN_UPDATE_LIST;
					
					alertMsg = alertMsg.replace(AlertMessages.TEMPLATE_EXISTING_PRODUCT_VERSION, productFromUpdateList["productVersion"]);
					alertMsg = alertMsg.replace(AlertMessages.TEMPLATE_NEW_PRODUCT_VERSION, version);
					
					Alert.show( alertMsg, AlertMessages.MSG_TYPE_WARNING, Alert.YES|Alert.NO, this, onAlertClickHandler, null, Alert.YES);
					return;
				}
				
				addProductToUpdateList();
				
				function onAlertClickHandler(evt:CloseEvent) : void
				{
					if (evt.detail == Alert.YES)
					{
						var productIndex : int = newProductArray.getItemIndex(productFromUpdateList); 
						
						newProductArray.removeItemAt(productIndex);
						newProducts.removeChildAt(productIndex);
						
						addProductToUpdateList();
					}
				}
				
				function addProductToUpdateList () : void 
				{
					var chBox : CheckBox = new CheckBox();
					
					chBox.label = title + " (" + size + ")" + " (" + unescape(url) + ")";
					chBox.selected = true;
					
					newProducts.addChild(chBox);
					
					newProductArray.addItem({chBox:chBox, url:url, productName:name, productTitle:title, productVersion:version, xmlContent:productXMLContent});
				}
				
			}
			
			private function loadSelectedProducts():void
			{
				productsUpdator.addEventListener(ProductsUpdatorEvent.UPDATE_COMPLETE, productsUpdateHandler);
				productsUpdator.addEventListener(ProductsUpdatorEvent.UPDATE_ERROR, productsUpdateHandler);
				productsUpdator.addEventListener(ProductsUpdatorEvent.UPDATE_PRODUCTS_SELECTION_ERROR, productsUpdateHandler);
				
				productsUpdator.updateProducts(newProductArray);
			}
			
			private function productsUpdateHandler(evt:ProductsUpdatorEvent):void
			{
				productsUpdator.removeEventListener(ProductsUpdatorEvent.UPDATE_COMPLETE, productsUpdateHandler);
				productsUpdator.removeEventListener(ProductsUpdatorEvent.UPDATE_ERROR, productsUpdateHandler);
				
				switch (evt.type)
				{
					case ProductsUpdatorEvent.UPDATE_COMPLETE :
						break;
					
					case ProductsUpdatorEvent.UPDATE_PRODUCTS_SELECTION_ERROR :
						Alert.show(AlertMessages.MSG_PRODUCTS_UPDATE_SELECTED_ERROR, AlertMessages.MSG_TYPE_ERROR);
						break;
					
					case ProductsUpdatorEvent.UPDATE_ERROR :
						Alert.show(AlertMessages.MSG_PRODUCTS_UPDATE_ERROR, AlertMessages.MSG_TYPE_ERROR);
						break;
				}
			}
			
			private function selectProduct():void
			{
				xmlLoader.addEventListener(ProductXMLLoader.XML_FILE_LOADING_STARTED,	 onProductXMLLoadingStarted);
				xmlLoader.addEventListener(ProductXMLLoader.XML_FILE_LOADED,			 onProductXMLLoaded);
				xmlLoader.addEventListener(ProductXMLLoader.USER_CANCELED,				 onProductXMLLoadingCanceled);
				xmlLoader.addEventListener(ProductXMLLoader.XML_FILE_LOADING_ERROR,		 onProductXMLLoadingError);
				
				xmlLoader.selectAndLoadXMLFile();
			}
			
			private function onProductXMLLoadingStarted(aEvent:Event):void
			{
				xmlLoader.removeEventListener(ProductXMLLoader.XML_FILE_LOADING_STARTED,	 onProductXMLLoadingStarted);
			}
			
			private function onProductXMLLoaded(aEvent:Event):void
			{
				xmlLoader.removeEventListener(ProductXMLLoader.XML_FILE_LOADING_STARTED,	 onProductXMLLoadingStarted);
				xmlLoader.removeEventListener(ProductXMLLoader.XML_FILE_LOADED,				 onProductXMLLoaded);
				xmlLoader.removeEventListener(ProductXMLLoader.USER_CANCELED,				 onProductXMLLoadingCanceled);
				xmlLoader.removeEventListener(ProductXMLLoader.XML_FILE_LOADING_ERROR,		 onProductXMLLoadingError);
				
				var productXMLFile		: File = xmlLoader.xmlFile;
				var productXMLContent	: XML = new XML(productXMLFile.data);
				
				if ( productXMLContent == null || productXMLContent.name() != "product" )
				{
					Alert.show( AlertMessages.MSG_INCORRECT_XML_FORMAT, AlertMessages.MSG_TYPE_ERROR);
					return;
				}

				showProduct ( productXMLContent.title.toString(), 
								productXMLContent.name.toString(), 
								productXMLContent.version, 
								Utils.formatFileSize(productXMLFile.size), 
								productXMLFile.url, 
								new XML(productXMLFile.data) );

			}
			
			private function getProductByNameFromUpdateList(productName:String) : Object
			{
				for(var name:String in newProductArray)
				{
					if(newProductArray[name]["productName"] == productName)
						return newProductArray[name];
						
				}
				return null;
			}
			
			private function onProductXMLLoadingError(aEvent:Event):void
			{
				xmlLoader.removeEventListener(ProductXMLLoader.XML_FILE_LOADING_STARTED,	 onProductXMLLoadingStarted);
				xmlLoader.removeEventListener(ProductXMLLoader.XML_FILE_LOADED,				 onProductXMLLoaded);
				xmlLoader.removeEventListener(ProductXMLLoader.USER_CANCELED,				 onProductXMLLoadingCanceled);
				xmlLoader.removeEventListener(ProductXMLLoader.XML_FILE_LOADING_ERROR,		 onProductXMLLoadingError);
				
				Alert.show( AlertMessages.MSG_ERROR_ON_LOAD_XML, AlertMessages.MSG_TYPE_ERROR);
			}
			
			private function onProductXMLLoadingCanceled(aEvent:Event):void
			{
				xmlLoader.removeEventListener(ProductXMLLoader.XML_FILE_LOADING_STARTED, onProductXMLLoadingStarted);
				xmlLoader.removeEventListener(ProductXMLLoader.XML_FILE_LOADED,			 onProductXMLLoaded);
				xmlLoader.removeEventListener(ProductXMLLoader.USER_CANCELED,			 onProductXMLLoadingCanceled);
			}
						
		]]>
		
	
		
	</mx:Script>
	<mx:TabNavigator width="100%" height="100%">
		<mx:VBox label="Products" width="100%" height="100%" show="{getAllProducts()}" 
				paddingBottom="10" paddingLeft="10" paddingRight="10">
			
			<mx:Label text="Select Necessary Products: " width="100%" textAlign="center" fontSize="20"/>
			<mx:VBox id="applications" paddingLeft="5"   borderStyle="solid" width="100%" height="100%" />
		</mx:VBox>
		<mx:VBox   label="Update" 
				   height="100%"
				   verticalGap="2"
				   paddingLeft="5" paddingRight="5" paddingBottom="10"
				   creationComplete="checkUpdate()">
			<mx:HBox height="35"
					   horizontalGap="3" 
					   verticalAlign="middle"
					   borderStyle="none">
				
				<mx:Button label="Add product"
						   click="{selectProduct()}"
						   borderColor="#DDDDDD"
						   cornerRadius="1" 
						   themeColor="#181818"/>
				
				<mx:Button label="Load selected products"
						   click="{loadSelectedProducts()}"
						   borderColor="#DDDDDD"  
						   cornerRadius="1"
						   themeColor="#181818"/>
				
			</mx:HBox>
			
			<mx:VBox id="newProducts" 
					 borderStyle="solid"
					 width="100%" height="100%"
					 paddingLeft="3" paddingRight="3"/>
			
		</mx:VBox>
	</mx:TabNavigator>
	<mx:ControlBar horizontalAlign="right" 
					height="35" color="#FFFFFF"
					paddingTop="2" paddingBottom="2" paddingLeft="10" paddingRight="10">
		
			<mx:Button  label="OK" click="{okHandler()}"  color="#FFFFFF" 
					fillColors="#333333"  textSelectedColor="#FFFFFF" cornerRadius="1" borderColor="#262626" themeColor="#656565" textRollOverColor="#FFFFFF"/>
		
			<mx:Button  label="Cancel" click="{cancelPressed()}" color="#FFFFFF" 
						fillColors="#333333"  textSelectedColor="#FFFFFF" cornerRadius="1" borderColor="#262626" themeColor="#656565" textRollOverColor="#FFFFFF"/>
	</mx:ControlBar>
</mx:TitleWindow>
