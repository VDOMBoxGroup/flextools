<?xml version="1.0" encoding="utf-8"?>
<mx:HTML xmlns:mx="http://www.adobe.com/2006/mxml" 
	location="libs/ckeditor/_samples/fullpage.html"
	creationComplete="init()" width="100%" height="100%"
	htmlDOMInitialize="html1_htmlDOMInitializeHandler(event)">
	<mx:Script>
		<![CDATA[
			import com.adobe.images.PNGEncoder;
			
			import mx.utils.Base64Encoder;
			private var instancesInitialized 	: Boolean;
			
			public static const MAX_IMAGE_WIDTH : Number = 500;
			
			public static const WIDTH_TYPE		: Number = 0;
			public static const HEIGHT_TYPE		: Number = 1;

			private var imgCounter : Number = 0;
			private var resourcesList : XMLList;
			private var xmlContent : XML;
			
			private var imageWidthInTag		: Number = 0;
			private var imageHeightInTag	: Number = 0;
			
			public static const EVENT_WYSIWYG_SAVE_COMBINATION_CLICKED	: String = "EVENT_WYSIWYG_SAVE_COMBINATION_CLICKED"; 
			public static const EVENT_WYSIWYG_HTTP_IMAGE_LOADED			: String = "EVENT_WYSIWYG_HTTP_IMAGE_LOADED";
			public static const EVENT_WYSIWYG_IMAGES_WIDTH_SETTED		: String = "EVENT_WYSIWYG_IMAGES_WIDTH_SETTED";
			
			private function init():void
			{
				this.addEventListener(KeyboardEvent.KEY_UP,		onKeyboardKeyUp);
				this.addEventListener(KeyboardEvent.KEY_DOWN,	onKeyboardKeyDown);
			}
			
			private function onKeyboardKeyDown(keyEvent:KeyboardEvent):void
			{
				if (keyEvent.ctrlKey && !(keyEvent.keyCode == Keyboard.C || keyEvent.keyCode == Keyboard.V) ) {
					keyEvent.preventDefault();
				}
			}
			
			private function onKeyboardKeyUp(keyEvent:KeyboardEvent):void
			{
				switch(keyEvent.keyCode)
				{
					case (Keyboard.S):
					{
						if (keyEvent.ctrlKey) {
							this.dispatchEvent(new Event(EVENT_WYSIWYG_SAVE_COMBINATION_CLICKED));
						}
						break;
					}
					default:
					{
						break;
					}
				}
			
			}
			
			public function setHTML( value : String ) : void
			{
				if (!instancesInitialized) {
					return;
				}
				domWindow.CKEDITOR.instances.editor1.setData(value);
			}
			
			public function getHTML(showPageToc:Boolean = false) : String
			{
				var editorData	: String;
				var patternHead	: RegExp;
				var htmlTxt		: String;
				
				patternHead = /<[ ]*head[ ]*(>|\/[ ]*>)/i;
				
				editorData = instancesInitialized ? domWindow.CKEDITOR.instances.editor1.getData() : "";
				htmlTxt = editorData;
				
				if (editorData.search(patternHead) == -1) 
				{
					htmlTxt = getHtmlSourceTxt(editorData, showPageToc);
						
				}
				
				return htmlTxt;
			}
			
			private function getHTML_toSave():void
			{
				// TODO: перенести из VdomHelpEditor:
				// resetImagesPath();
			}
			
			private static function getHtmlSourceTxt(bodyContent : String, showPageToc:Boolean = false) : String
			{
				var metaTeg		: String;
				var cssTeg		: String;
				var scriptTeg	: String;
				var titleTeg	: String;
				var htmlTxt		: String = "";
				
				metaTeg = "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />";
				cssTeg = "<link rel='stylesheet' href='app-storage:/main.css' type='text/css'></link>";
				scriptTeg = "<script src='app-storage:/searchhi_slim.js'></script>";
				titleTeg = "<title></title>";
				
				htmlTxt = "<html>" + "\n" + 
								"<head>" + "\n" +
									metaTeg + "\n" +
									cssTeg + "\n" +
									scriptTeg + "\n" +
								"</head>" + "\n" +
								"<body>" + "\n" +
									bodyContent + "\n" +
								"</body>" + "\n" +
							"</html>";
				
				if (showPageToc) {
					return htmlTxt;
				}
				return getHTMLWithoutPageToc(htmlTxt);
				
			}
			
			private static function getHTMLWithoutPageToc(value:String) : String 
			{
				var xml			:XML = new XML(value);
				var ulClass		: String = "";
				var divClass	: String = "";
				var linkClass	: String = "";
				
				// delete old variant of toc ...
				for each (var xmlDiv:XML in xml.body.div) {
					
					divClass = String(xmlDiv.@["class"]);
					
					if (divClass.indexOf(PageToc.TOC_BY_HEADERS_CLASS) >= 0 || 
						divClass.indexOf(PageToc.TOC_BY_PAGES_CLASS) >= 0 ) {
						
						delete xmlDiv.parent().children()[xmlDiv.childIndex()];
					}
					
				}
				// ... delete old variant of toc
				
				for each (var xmlUl:XML in xml.body.ul) {
					
					ulClass = String(xmlUl.@["class"]);
					
					if (ulClass.indexOf(PageToc.TOC_BY_HEADERS_CLASS) >= 0 || 
						ulClass.indexOf(PageToc.TOC_BY_PAGES_CLASS) >= 0 ) {
						
						delete xmlUl.parent().children()[xmlUl.childIndex()];
						break;
					}
					
				}
				
				for each (var xmlLink:XML in xml.body..a) {
					
					linkClass = String(xmlLink.@["class"]);
					
					if (linkClass.indexOf(PageToc.ANCOR_CLASS) >= 0) {
						
						delete xmlLink.parent().children()[xmlLink.childIndex()];
					}
					
				}
				
				return xml.toXMLString();
			}
			
			protected function html1_htmlDOMInitializeHandler(event:Event):void
			{
				instancesInitialized = true;
			}
			
			public static function getNewPageContent(aPageTitle:String) : String
			{
				
				return getHtmlSourceTxt("<h1>"+aPageTitle+"</h1>");
			}
			
			public function generateLinkToPage(aPageName:String, aPageTitle:String) : void
			{
				var strHref:String = "<a href=\""+ aPageName +"\">"+ aPageTitle +"</a>";
				
				Clipboard.generalClipboard.setData(ClipboardFormats.HTML_FORMAT, strHref);
			}
			
			public function resetImagesPath() : void
			{
				var xmlContent : XML = XML(getHTML());
				var resourcesList	: XMLList	= xmlContent..img;
				
				for each (var xmlImg:XML in resourcesList)
				{
					var newPath : String;
					var imgSrc : String = String(xmlImg.@src);
					
					if ( !imgSrc || imgSrc.indexOf("app-storage:/resources") >= 0 || imgSrc.indexOf("app-storage:\resources") >= 0 ) // resource exists
						continue;
					
					if ( imgSrc.indexOf("http://") >= 0 || imgSrc.indexOf("https://") >= 0 ) // image from http
					{
						newPath = loadHttpImg(imgSrc);
					} else 
					{
						newPath = copyImg(removeWhiteSpacingAfterFileName(imgSrc)); // image from file system
					}
					
					if (!newPath)
						delete xmlImg.parent().children()[xmlImg.childIndex()];
					else
						xmlImg.@src = newPath;
					
					setHTML(xmlContent.toString());
				}
			}
			
			private function removeWhiteSpacingAfterFileName(path:String) : String
			{
				path = path.substring(0 , path.lastIndexOf(".")) +
					path.substring(path.lastIndexOf("."), path.length).replace(" ", "");
				
				return path;
			}
			
			private function copyImg(aImageOldSrc_str:String) : String
			{
				var targetPath : String;
				var imgFile : File;
				var newImgFile : File;
				
				imgFile = new File(aImageOldSrc_str);
				
				if (!imgFile.exists)
					return null;
				
				targetPath = "resources/" + VdomHelpEditor.generateFileName(aImageOldSrc_str, imgFile);
				newImgFile = File.applicationStorageDirectory.resolvePath(targetPath);
				
				
				if ( !newImgFile.exists )
					imgFile.copyTo(newImgFile);
				
				return newImgFile.url;
			}
			
			private function loadHttpImg(aImageOldSrc_str:String) : String
			{
				var targetPath : String;
				var urlRequest : URLRequest;
				var urlLoader : URLLoader;
				var file : File;
				
				
				targetPath = "resources/" + VdomHelpEditor.generateFileName(aImageOldSrc_str);
				urlRequest = new URLRequest(aImageOldSrc_str);
				urlLoader = new URLLoader();
				
				urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
				urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, urlLoader_error);
				urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, urlLoader_error);
				urlLoader.load(urlRequest);
				
				file = File.applicationStorageDirectory.resolvePath(targetPath);
				
				function urlLoader_complete(evt:Event) : void {
					var fileStream : FileStream;
					
					fileStream = new FileStream();
					try {
						fileStream.open(file, FileMode.WRITE);
						fileStream.writeBytes(urlLoader.data);
						fileStream.close();
						
						this.dispatchEvent(new Event(EVENT_WYSIWYG_HTTP_IMAGE_LOADED));
						
					} catch ( error : IOError ) {
						trace("!!! Error Write !!! \n" + error.message +"\n");
						return;
					}
				}
				
				function urlLoader_error(evt:Event) : void {
					trace("!!! Error Loading file !!! \n");
				}
				
				return file.url;
			}
			
			public function resetImagesWidth():void
			{				
				 xmlContent = XML(getHTML());
				resourcesList = xmlContent..img;
				
				imgCounter = 0;
				
				if (!resourcesList || resourcesList.length() <= 0)
				{
					onLastImageWidthSetted();
					return;
				}
				
				resetNextImageWidth();
			}
			
			private function resetNextImageWidth():void
			{
				if (imgCounter >= resourcesList.length())
				{
					imgCounter = 0;
					onLastImageWidthSetted(); 
					return;
				}
				
				imageWidthInTag = 0;
				imageHeightInTag = 0;
				
				var ratioX		: Number = 1;
				
				var xmlImg:XML = resourcesList[imgCounter];
				
				if ( String(xmlImg.@width) != "" && !isNaN(Number(xmlImg.@width)) )
					imageWidthInTag = Number(xmlImg.@width);
				
				if ( String(xmlImg.@height) != "" && !isNaN(Number(xmlImg.@height)) )
					imageHeightInTag = Number(xmlImg.@height);
				
				if (String(xmlImg.@style) != "")
				{
					imageWidthInTag = getSizeFromStyle(String(xmlImg.@style).toLowerCase(), WIDTH_TYPE); 
					imageHeightInTag = getSizeFromStyle(String(xmlImg.@style).toLowerCase(), HEIGHT_TYPE);
				}
				
				if (imageWidthInTag > 0) // width is defined in <img>
				{
					if (imageWidthInTag <= MAX_IMAGE_WIDTH) // width is good
					{
						onImageWidthSetted();
						return;
					}
				}
				
				if (imageWidthInTag > 0 && imageHeightInTag > 0)
				{
					// set width = MAX_IMAGE_WIDTH and scale height
					
					ratioX =  MAX_IMAGE_WIDTH / imageWidthInTag;
					imageWidthInTag = MAX_IMAGE_WIDTH;
					imageHeightInTag = Math.floor(imageHeightInTag * ratioX);
					
					onImageWidthSetted();
					return;
				}
				
				var imagePath : String = String(xmlImg.@src);
				var file : File = new File(imagePath);
				
				if (!imagePath || !file.exists)
				{
					onImageWidthSetted();
					return;
				}
					
				var fileStream : FileStream = new FileStream();
				var originalByteArray : ByteArray    = new ByteArray();
				var base64 : Base64Encoder = new Base64Encoder();
				
				fileStream.open( file, FileMode.READ);
				fileStream.readBytes(originalByteArray);
				fileStream.close();
				
				base64.encodeBytes(originalByteArray);
				
				var loader : Loader = new Loader();
				loader.loadBytes( originalByteArray );
				
				loader.contentLoaderInfo.addEventListener( Event.COMPLETE, contentLoaderInfoCompleteHandler );
				loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, contentLoaderInfoErrorHandler );
				loader.contentLoaderInfo.addEventListener( SecurityErrorEvent.SECURITY_ERROR, contentLoaderInfoErrorHandler );
				
				function contentLoaderInfoCompleteHandler (evt:Event) : void 
				{
					var loaderInfo : LoaderInfo = evt.target as LoaderInfo;
					
					imageWidthInTag = (imageWidthInTag > 0) ? imageWidthInTag : loaderInfo.width;
					imageHeightInTag = (imageHeightInTag > 0) ? imageHeightInTag : loaderInfo.height;
					
					if (imageWidthInTag > MAX_IMAGE_WIDTH)
					{
						ratioX =  MAX_IMAGE_WIDTH / imageWidthInTag;
						imageWidthInTag = MAX_IMAGE_WIDTH;
						imageHeightInTag = Math.floor(imageHeightInTag * ratioX);
						
						onImageWidthSetted();
						return;
					}
				}
				
				function contentLoaderInfoErrorHandler (evt:Event) : void 
				{
					onImageWidthSetted();
					return;
				}
			}
			
			private function onImageWidthSetted():void
			{
				resourcesList[imgCounter].@width = imageWidthInTag;
				resourcesList[imgCounter].@height = imageHeightInTag;
				
				try {
					delete resourcesList[imgCounter].@style;
				} catch (e:Error) {
				}
				
				if (!resourcesList || resourcesList.length() <= 0) {
					onLastImageWidthSetted();
					return;			
				}
				
				imgCounter ++;
				resetNextImageWidth();
			}
			
			private function onLastImageWidthSetted():void
			{
				imgCounter = 0;
				
				setHTML(xmlContent.toString());
				this.dispatchEvent(new Event(EVENT_WYSIWYG_IMAGES_WIDTH_SETTED));
			}
			
			public static function getSizeFromStyle(strStyle:String, type:Number) : Number
			{
				var strWidth : String = "width";
				var strHeight : String = "height";
				var regExpDigitVal	: RegExp = /[\d]+/i;
				
				var firstInd : int;
				var sizeStr : String;
				var sizeNumber : Number = -1;
				
				var str : String = type == HTML_WYSIWYG.WIDTH_TYPE ? strWidth : strHeight;
				
				firstInd = strStyle.search(str);
				
				if (firstInd != -1) 
					sizeStr = strStyle.substring(firstInd);
				
				try {
					sizeNumber = Number(sizeStr.match(regExpDigitVal)[0]);
				} catch (e:Error)
				{
					sizeNumber = -1;
				}
				
				return sizeNumber;
			}
		]]>
	</mx:Script>
</mx:HTML>
