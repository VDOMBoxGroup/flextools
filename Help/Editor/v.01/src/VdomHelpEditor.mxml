<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication showStatusBar="false" showGripper="false" showTitleBar="false"
						xmlns:vdomTitleBar="vdom.core.vdomTitleBar.*"
						xmlns:mx="http://www.adobe.com/2006/mxml"
						minWidth="800" minHeight="600" width="800" height="600"
						layout="absolute"
						creationComplete="{creationCompleteHandler()}"
						backgroundColor="0x373739"
						titleBarColors="[ 0x666666, 0x222222 ]" title="VDOM Help Editor Application"
						titleTextStyleName="tbStyle"
						titleIcon="@Embed('icons/16_vdom_icon_editor.png')"
						xmlns:local="*">
	<mx:Style>
		.tbStyle {
			color : #FFFFFF;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import com.adobe.crypto.MD5Stream;
			
			import flash.text.engine.EastAsianJustifier;
			import flash.utils.getDefinitionByName;
			import flash.utils.setTimeout;
			
			import mx.collections.XMLListCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.utils.Base64Decoder;
			import mx.utils.Base64Encoder;
			import mx.utils.UIDUtil;
			import mx.validators.StringValidator;
			
			import spinnerFolder.SpinnerPopUpManager;

			private var sqlProxy : SQLProxy = new SQLProxy();

			private var spinnerManager		: SpinnerPopUpManager = SpinnerPopUpManager.getInstance();
			
			private var stylesManager : CSSStyleManager = new CSSStyleManager();
			
			private var pageVersion : Number;
			
			private var treePagesBuffer : Array;
			
			private var productXMLFile : File;
			
			/***
			 *
			 * + сохранить экспортируемую хмл
			 * - прогресс бар
			 * + вывести на экран сообщение о том куда и покаким именем сохранен файл
			 *
			 * + выбрать картинку
			 * + скопировать ее в кэшь
			 * + вставить в текст кода странички
			 *
			 * = экспортировать картинки в хмл
			 * 	+ по странично выбрать  список ресурсов странички
			 *  + вставить ресурс в хмл
			 *
			 * -------------------
			 * + создать загрузочную хмл
			 * + изменение свойств страницы
			 * + дисаблить кнопку создания продукта
			 * + удалять все страницы, когда удаляем продукт
			 * + сделать ссылку на страницу
			 * - автоматически поправлять ссылки  при изменении имени и названия страницы
			 *
			 */



			private function creationCompleteHandler() : void
			{
				sqlProxy.creatDB();
				
				stylesManager.addEventListener(CSSStyleManager.STYLE_SETTED, onStylesLoaded);
				stylesManager.setStyle();
			}
			
			private function onStylesLoaded(evt : Event):void
			{
				stylesManager.removeEventListener(CSSStyleManager.STYLE_SETTED, onStylesLoaded);
				showAllProducts();
			}
			
			private function onWysiwygSaveCombinationClicked(event:Event):void
			{
				this.savePage();
			}
			
			private function treeChangeHandler(lstEvt:ListEvent) : void
			{	
				var tocString : String = tree.dataProvider.toXMLString();

				try
				{
					// some code that could throw an error
					XML(tocString);
				}
				catch ( err : Error )
				{
					// code to react to the error
					getTocFromDataBase();
					Alert.show(AlertMessages.MSG_IMPOSSIBLE_OPERATION, AlertMessages.MSG_TYPE_ERROR);
					return;
				}

				sqlProxy.setToc(tocString, cmboxProduct.selectedItem.name);

				if ( !tree.selectedItem )
				{
					tree.selectedItem = XML(lstEvt.itemRenderer.data.toXMLString());
					tree.validateNow();
				}

				html_wysiwyg.preventRefresh();
				
				getCurrentPage();
				htmlShowHandler();
			}

			private function getCurrentPage(aEvent : Event = null) : void
			{
//			tree.selectedItem = XML(lstEvt.itemRenderer.data);
//			trace(": "+lstEvt.itemRenderer.data.@name +" : "+ tree.selectedItem.@name);

				if ( !tree.selectedItem )
					return;

				var resoult : Object = sqlProxy.getPage(cmboxProduct.selectedItem.name, "en_US", tree.selectedItem.@name);

				if ( resoult )
				{
					pageVersion = resoult[ 0 ][ "version" ];

					if ( html_wysiwyg ) {
						var htmlContent : String = resoult[0]["content"];
						htmlContent = getPageContentWithToc(htmlContent, 
															Boolean(resoult[0]["useToc"]), 
															tree.selectedItem.children(),
															false);
						
						html_wysiwyg.setHTML(htmlContent);
					}
					pageInformation.text = /*resoult[ 0 ][ "title" ] + */" (v." + pageVersion + ")  " + resoult[ 0 ][ "name" ];
					pageInformation.toolTip = resoult[ 0 ][ "description" ];

					topTitle.htmlText = "VDOM Help Editor Application - <b>" + resoult[ 0 ][ "title" ] + "</b>";
				}
			}
			
			public static function getPageContentWithToc(pageContent:String, useToc:Boolean, pageChildren:XMLList, useAnchors:Boolean = true) : String
			{
				var xmlContent		: XML;
				var xmlPageToc		: PageToc;
				
				var divClass		: String = "";
				var ulClass			: String = "";
				var linkClass		: String = "";
				
				if (!useToc) return pageContent;
				
				if (!pageContent || pageContent.toLowerCase().indexOf("<html>") == -1) {
					pageContent = HTML_WYSIWYG.getNewPageContent("");
				}
				
				xmlContent = new XML (pageContent);
				
				// remove toc ...
					// remove old variant of toc ...
				for each (var xmlDiv:XML in xmlContent.body.div) {
					
					divClass = String(xmlDiv.@["class"]);
					
					if (divClass.indexOf(PageToc.TOC_BY_HEADERS_CLASS) >= 0 || 
						divClass.indexOf(PageToc.TOC_BY_PAGES_CLASS) >= 0 ) {
						
						delete xmlDiv.parent().children()[xmlDiv.childIndex()];
					}
				}
					// ... remove old variant of toc
				
				for each (var xmlUl:XML in xmlContent.body.ul) {
					
					ulClass = String(xmlUl.@["class"]);
					
					if (ulClass.indexOf(PageToc.TOC_BY_HEADERS_CLASS) >= 0 || 
						ulClass.indexOf(PageToc.TOC_BY_PAGES_CLASS) >= 0 ) {
						xmlPageToc = new PageToc(xmlUl);
						xmlPageToc.tocType = xmlUl.@["class"];
						
						delete xmlUl.parent().children()[xmlUl.childIndex()];
						break;
					}
				}
				// ... remove toc
				
				// remove anchors ...
				for each (var xmlP:XML in xmlContent.body..p) {
					
					linkClass = String(xmlP.@["class"]);
					
					if (linkClass.indexOf(PageToc.ANCOR_CLASS) >= 0 || linkClass.indexOf(PageToc.TOC_BY_HEADERS_CLASS) >= 0) {
						
						delete xmlP.parent().children()[xmlP.childIndex()];
					}
					
				}
				
				for each (var xmlA:XML in xmlContent.body..a) {
					
					linkClass = String(xmlA.@["class"]);
					
					if (linkClass.indexOf(PageToc.ANCOR_CLASS) >= 0 || linkClass.indexOf(PageToc.TOC_BY_HEADERS_CLASS) >= 0) {
						
						delete xmlA.parent().children()[xmlA.childIndex()];
					}
					
				}
				// ... remove anchors
				
				if (xmlPageToc) { // is toc
					xmlPageToc.clearTocContent();
				} else { // no toc
					xmlPageToc = new PageToc();
				}
				
				xmlPageToc.tocType = (pageChildren && pageChildren.length() > 0) ? PageToc.TOC_BY_PAGES_CLASS : PageToc.TOC_BY_HEADERS_CLASS;
				
				xmlPageToc.generateTocContent(new XML(pageContent), pageChildren, useAnchors);
				if (xmlContent.body.length() > 0 && xmlPageToc.tocXML && xmlPageToc.tocHasContent) {
					
					xmlContent.body.insertChildAfter(xmlContent.body.h1[0], xmlPageToc.tocXML);
				}
				
				if (xmlPageToc.tocType == PageToc.TOC_BY_HEADERS_CLASS && xmlPageToc.anchors) {
					for (var ind:String in xmlPageToc.anchors) 
					{
						if (xmlContent.body.length() > 0 && useAnchors) 
						{
							//xmlContent.body.insertChildBefore(xmlContent.body.h2[Number(ind)], xmlPageToc.anchors[ind]);
							XML(xmlContent.body.h2[Number(ind)]).appendChild(xmlPageToc.anchors[ind]);
						}					
					}
				}
				
				var str:String = xmlContent.toString();
				
				return str;
			}
			
			private function showAllProducts() : void
			{
				cmboxProduct.dataProvider = sqlProxy.getAllProducts();
				
				changeProduct();
			}

			private function selectNecessaryItem(fileName:String) : void
			{
				var currentElement : XML = tree.dataProvider.source..page.( @name == fileName )[ 0 ]; // tree.dataProvider.source..page.(@name == fileName)[0];

				if ( currentElement )
				{
					openTree(currentElement);
					tree.selectedItem = currentElement;
					tree.validateNow();
				}
			}

			private function openTree(item:Object) : void
			{
				var parentItem : Object = XML(item).parent();

				if ( parentItem )
				{
					openTree(parentItem);
					tree.expandItem(parentItem, true, false);
					tree.validateNow();
				}
			}

			private function minMaximize() : void
			{
				if ( stage.nativeWindow.displayState == NativeWindowDisplayState.MAXIMIZED )
					restore();
				else
					maximize();
			}


			private var toc : XML           = new XML();

			private var count : int         = 0;

			private function addItem(aCopiedItem:Object = null) : void
			{
				var selectedPage	: String = "";
				var pageTitle		: String = "";
				var pageName		: String = "";

				if ( tree.selectedItem )
					selectedPage = tree.selectedItem.@name;
				else
					trace("NO SELECTED PAGE");

				toc = tree.dataProvider[ 0 ];

				pageName = generatePageName();

				if (aCopiedItem) {
					pageTitle = aCopiedItem[0]["title"];
					pageName = aCopiedItem[0]["name"];
					sqlProxy.addPage(cmboxProduct.selectedItem.name, "en_US", pageName, 0, 
						pageTitle, aCopiedItem[0]["description"], aCopiedItem[0]["content"]);
				} else {
					pageTitle = "Page " + count;
					sqlProxy.addPage(cmboxProduct.selectedItem.name, "en_US", pageName, 0, 
									 pageTitle, "", HTML_WYSIWYG.getNewPageContent(""));
				}

				if (!aCopiedItem || 
					!aCopiedItem[0]["parentPageName"] || 
					(aCopiedItem[0]["parentPageName"] == cmboxProduct.selectedItem.name) ||
					!sqlProxy.getPage(cmboxProduct.selectedItem.name, "en_US", aCopiedItem[0]["parentPageName"]) ||
					(toc..page.(@name == aCopiedItem[0]["parentPageName"]).length() == 0)) {
					
					toc.appendChild(XML("<page title = '" + pageTitle+ "' name = '" + pageName+ "' isBranch='true' />"));
				} else {
					toc..page.(@name == aCopiedItem[0]["parentPageName"]).appendChild(XML("<page title = '" + pageTitle+ "' name = '" + pageName+ "' isBranch='true' />"));
				}
				tree.dataProvider = null;

				tree.validateNow();
				tree.dataProvider = toc;

				tree.validateNow();
//			if(selectedPage != "")
				selectNecessaryItem(selectedPage);


				sqlProxy.setToc(tree.dataProvider.toXMLString(), cmboxProduct.selectedItem.name);

				// if not selected index select top item
				if ( tree.selectedIndex == -1 )
				{
					tree.expandItem(toc, true);
					tree.selectedIndex = 0;
				}

			}

			private function generatePageName():String
			{
				var pageName : String = UIDUtil.createUID();
			
				//			search vacant name in dataBase
				while ( sqlProxy.checkPageName(pageName) )
				{
					pageName = UIDUtil.createUID();
				}
				
				return pageName;
			}
			
			private function removeItemClickHandler():void
			{
				if (tree.selectedItem && tree.selectedIndex > 0)
					Alert.show(AlertMessages.MSG_ASK_DELETE_PAGE, AlertMessages.MSG_TYPE_DELETE, Alert.YES|Alert.NO, this, alertDeletPageClickHandler);
			}
			
			private function alertDeletPageClickHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
				{
					removeItem();
				}
			}
			
			private function removeItem() : void
			{
				var selectedIndex : Number = tree.selectedIndex;

				if ( selectedIndex > 0 )
				{
					sqlProxy.deletePage(sqlProxy.getProductId(cmboxProduct.selectedItem.name, "en_US"), tree.selectedItem.@name);
					
					removeChildPage(toc..page.( @name == tree.selectedItem.@name )[0]);
					
					function removeChildPage(xml:XML):void
					{
						for each ( var page:XML in xml.children() )
						{
							sqlProxy.deletePage(sqlProxy.getProductId(cmboxProduct.selectedItem.name, "en_US"), page.@name);
							removeChildPage(page);
						}
					}
					
					
					delete toc..page.( @name == tree.selectedItem.@name )[ 0 ];
//				toc = XML(tree.dataProvider);
					
					tree.dataProvider = null;
					tree.validateNow();
					tree.dataProvider = toc;

					sqlProxy.setToc(tree.dataProvider.toXMLString(), cmboxProduct.selectedItem.name);
					
					tree.validateNow();
					tree.expandItem(toc, true);

					tree.selectedIndex = selectedIndex;

					if ( !tree.selectedIndex )
						tree.selectedIndex = selectedIndex - 1;

				}
				getCurrentPage();
			}

			private function productEdit() : void
			{
				var rbWnd : Products = Products(PopUpManager.createPopUp(this, Products, true));
				rbWnd.addEventListener(CloseEvent.CLOSE, closeProductsHandler);
			}

			private function closeProductsHandler(evt:CloseEvent) : void
			{
				showAllProducts();
			}

			private function changeProduct() : void
			{
				if ( !cmboxProduct.selectedItem )
				{
					tree.dataProvider = null;
					html_wysiwyg.setHTML("");
					return;
				}

				getTocFromDataBase();
			}

			private function getTocFromDataBase() : void
			{
				var resoult : Object = sqlProxy.getToc(cmboxProduct.selectedItem.name);
				tree.dataProvider = resoult as XML;

				toc = tree.dataProvider[ 0 ];

				tree.validateNow();
				tree.expandItem(toc, true);
				tree.selectedIndex = 0;
				tree.validateNow();

				tree.dispatchEvent(new ListEvent(ListEvent.CHANGE));
			}

			private function savePage() : void
			{
				trace("[VdomHelpEditor] savePage");
				
				if (!tree.selectedItem) return;

				html_wysiwyg.addEventListener(HTML_WYSIWYG.EVENT_WYSIWYG_IMAGES_WIDTH_SETTED, onWysiwygImagesWidthSetted);
				
				html_wysiwyg.resetImagesPath();
				html_wysiwyg.resetImagesWidth();
			}
			
			private function onWysiwygImagesWidthSetted(evt:Event):void
			{
				html_wysiwyg.removeEventListener(HTML_WYSIWYG.EVENT_WYSIWYG_IMAGES_WIDTH_SETTED, onWysiwygImagesWidthSetted);
				
				sqlProxy.setPageContent(cmboxProduct.selectedItem.name, "en_US", tree.selectedItem.@name, html_wysiwyg.getHTML(), pageVersion);
				getCurrentPage();
			}

			public static function generateFileName(path:String, file:File = null) : String
			{
				var fileType : String;
				var fileName : String;
				var hash : MD5Stream;
				var fileStream : FileStream;
				var byteArray : ByteArray;
				var uid : String;

				fileType = path.substring(path.lastIndexOf("."), path.length);

				if ( !file || !file.exists)
				{
					fileName = UIDUtil.createUID() + fileType;

					return fileName;
				}


				hash = new MD5Stream();
				fileStream = new FileStream();
				byteArray = new ByteArray();

				fileStream.open(file, FileMode.READ);
				fileStream.readBytes(byteArray);
				fileStream.close();

				uid = hash.complete(byteArray);
				fileName = convertToUIDFormat(uid) + fileType;

				return fileName;
			}

			public static function convertToUIDFormat(strToFormat:String) : String
			{
				var strInUIDFormat : String = "";
				var strDelim : String       = "-";
				var arrParts : Array        = new Array();

				if ( strToFormat.length != 32 )
					throw Error("Incorrect type of input string");
				else
				{
					arrParts[ 0 ] = strToFormat.substr(0, 8);
					arrParts[ 1 ] = strToFormat.substr(8, 4);
					arrParts[ 2 ] = strToFormat.substr(12, 4);
					arrParts[ 3 ] = strToFormat.substr(16, 4);
					arrParts[ 4 ] = strToFormat.substr(20, 12);

					for ( var i : uint = 0; i < 5; i++ )
					{
						if ( i > 0 )
							strInUIDFormat += strDelim;

						strInUIDFormat += arrParts[ i ];
					}
				}

				return strInUIDFormat;
			}

			private function selectXMLFile():void
			{
				productXMLFile = new File();
				
				productXMLFile.addEventListener(Event.SELECT, onProductXMLFileSelected); 
				productXMLFile.addEventListener(Event.CANCEL, onCancelSelectProductXML); 
				productXMLFile.addEventListener(IOErrorEvent.IO_ERROR, onProductXMLError); 
				productXMLFile.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onProductXMLError);
				productXMLFile.browseForSave("Save product as .XML");
				
			}
			
			private function onProductXMLError(aEvent:Event):void
			{
				Alert.show(AlertMessages.MSG_XML_CREATING_ERROR, AlertMessages.MSG_TYPE_ERROR);				
			}
			
			private function onProductXMLFileSelected(aEvent:Event):void
			{
				productXMLFile = aEvent.target as File; 
				
				if (!isCorrectFileFormat(productXMLFile.type)) {
					Alert.show(AlertMessages.MSG_INCORRECT_XML_FILE_FORMAT, AlertMessages.MSG_TYPE_ERROR);
					return;
				}
				creatProductXML();
			}
			
			private function isCorrectFileFormat(fileFormat:String) : Boolean
			{
				if (!fileFormat) {
					return false;
				}
				
				if (fileFormat.toLowerCase() == ".xml") {
					return true;
				}
				
				return false;
			}
			
			private function onCancelSelectProductXML(aEvent:Event):void
			{
			}
			
			private function onProductXMLCreationComplete(aEvent:Event):void
			{
				ProductXMLCreator(aEvent.target).removeEventListener(ProductXMLCreator.EVENT_ON_XML_CREATION_COMPLETE, onProductXMLCreationComplete);
				
				var product		: XML = ProductXMLCreator(aEvent.target).productXML;
				
				var fileStream	: FileStream	= new FileStream();
				var fileName	: String		= cmboxProduct.selectedItem.title;
				var docsDir		: File          = File.documentsDirectory;
				
				try
				{
					fileStream. open( productXMLFile, FileMode.WRITE);
					fileStream.writeUTFBytes("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "\n" + product.toXMLString());
					fileStream.close();
					
					Alert.show( productXMLFile.nativePath, AlertMessages.MSG_TYPE_SAVED_TO);
				}
				catch ( error : Error )
				{
					Alert.show( error.message, AlertMessages.MSG_TYPE_ERROR);
				}
				
				var location : File = new File(docsDir.url +"/VDOMHelp/StartXML.xml");
				
				try
				{
					fileStream.open( location, FileMode.UPDATE);
					var str : String     = fileStream.readMultiByte(location.size, File.systemCharset);
					var installXML : XML = new XML();
					
					if ( str == "" )
						installXML = XML("<install/>");
					else
						installXML = XML(str);
					
					var productItem : XML = new XML("<product/>");
					productItem.@name = product.name;
					productItem.@version = product.version;
					productItem.@title = product.title;
					productItem.@description = product.description;
					productItem.@language = product.language;
					productItem.@size = Utils.formatFileSize(productXMLFile.size);
					productItem.@url = productXMLFile.url;
					
					delete installXML.product.( @name == product.name )[ 0 ];
					
					installXML.appendChild(productItem);
					fileStream.close();
					
					fileStream.open( location, FileMode.WRITE);
					fileStream.writeUTFBytes(installXML.toXMLString());
					fileStream.close();
					
				}
				catch ( error : Error )
				{
					Alert.show( error.message, AlertMessages.MSG_TYPE_ERROR);
				}		
			}
			
			private function creatProductXML() : void
			{
				if (!productXMLFile) {
					return;
				}
				
				var productCreator : ProductXMLCreator = new ProductXMLCreator();
				
				productCreator.addEventListener(ProductXMLCreator.EVENT_ON_XML_CREATION_COMPLETE, onProductXMLCreationComplete);
				productCreator.generateProductXML(cmboxProduct.selectedItem.name, 
													cmboxProduct.selectedItem.title, 
													tree.dataProvider, 
													html_wysiwyg);
			}
			
			// save file to folder
			public function saveFile(contentName:String, content:ByteArray) : void
			{
				var newFileName : String    = contentName;
				var newFile : File          = File.applicationStorageDirectory.resolvePath(newFileName);
				var fileStream : FileStream = new FileStream();

				try
				{
					fileStream.open(newFile, FileMode.WRITE);
					fileStream.writeBytes(content);
					fileStream.close();

				}
				catch ( error : IOError )
				{
//				var er:* =  error;
					trace("!!!!!!!!!!!!!!!! Error Write !!!!!!!!!!!!!!! \n" + error.message +"\n"+newFileName);
					return;
				}
			}

			private function htmlShowHandler() : void
			{
				var fileName : String   = "temp.html";
				var content : ByteArray = new ByteArray();

				var sourseTxt : String;

				sourseTxt = "";

				if ( html_wysiwyg )
					sourseTxt = html_wysiwyg.getHTML(true);
				
				content.writeMultiByte(sourseTxt, "utf-8");

				saveFile(fileName, content);

				var newFile : File    = File.applicationStorageDirectory.resolvePath(fileName);

				var fullPath : String = newFile.url;
				var f : File          = File.applicationStorageDirectory;

				if ( html )
				{
					html.location = fullPath;
					html.validateDisplayList();
				}
			}


			private function dragDropHandler(event:Event) : void
			{
				trace ("[VdomHelpEditor] dragDropHandler");
			}

			private function editPage() : void
			{
				var editPage : EditPage = EditPage(PopUpManager.createPopUp(this, EditPage, true));
				editPage.addEventListener(CloseEvent.CLOSE, editPageHandler);

				editPage.pageLn = "en_US"
				editPage.curPage = tree.selectedItem;
				editPage.productName = cmboxProduct.selectedItem.name;

				function editPageHandler(evt:CloseEvent) : void
				{
					// сохранить дерево
					sqlProxy.setToc( tree.dataProvider.toXMLString(), cmboxProduct.selectedItem.name);
					// обновить данные вверху и внизу
					getCurrentPage();
				}
			}
			
			protected function html_wysiwyg_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this.html_wysiwyg.addEventListener(HTML_WYSIWYG.EVENT_WYSIWYG_SAVE_COMBINATION_CLICKED, onWysiwygSaveCombinationClicked);
				this.html_wysiwyg.addEventListener(HTML_WYSIWYG.EVENT_WYSIWYG_HTTP_IMAGE_LOADED, getCurrentPage);
			}
			
			private function onTreeKeyboardKeyUp(aKeyboardEvent:KeyboardEvent) : void
			{
				switch(aKeyboardEvent.keyCode)
				{
					case Keyboard.C:
					{
						if (aKeyboardEvent.ctrlKey) {
							if (!tree.selectedItem) {
								return;
							}
							copyTreePages(XML(tree.selectedItem), !aKeyboardEvent.shiftKey);
						}
						break;
					}
					case Keyboard.V:
					{
						if (aKeyboardEvent.ctrlKey) {
							pasteTreePages();
						}
						break;
					}
					default:
					{					
						break;
					}
				}
			}
			
			protected function tree_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				tree.addEventListener(KeyboardEvent.KEY_UP, onTreeKeyboardKeyUp);
			}
			
			private function copyTreePages(pagesXml : XML, copyTree : Boolean = true):void
			{
				var resoult	: Object;
				
				clearTreePagesBuffer();
				
				treePagesBuffer = [];
				
				resoult = sqlProxy.getPage(cmboxProduct.selectedItem.name, "en_US", pagesXml.@name);
				if (resoult)
				{
					html_wysiwyg.generateLinkToPage(resoult[0]["name"], resoult[0]["title"]);
					
					resoult[0]["parentPageName"] = tree.selectedItem.@name;
					resoult[0]["name"] = generatePageName();
					treePagesBuffer.push(resoult);
				}
				
				if (!copyTree) return;
				
				addCopiedPage(pagesXml, treePagesBuffer.length-1);
				
				function addCopiedPage(xml:XML, aParentPageId : Number):void
				{
					for each(var page:XML in xml.children())
					{
						resoult = sqlProxy.getPage(cmboxProduct.selectedItem.name, "en_US", page.@name);
						if (resoult)
						{
							resoult[0]["parentPageName"] = treePagesBuffer[aParentPageId][0]["name"];
							resoult[0]["name"] = generatePageName();
							treePagesBuffer.push(resoult);
							if (page.children().length() > 0) {
								addCopiedPage(page, treePagesBuffer.length-1);
							} else {
								addCopiedPage(page, aParentPageId);
							}
						}
					}
				}
				
			}
			
			private function pasteTreePages() : void
			{
				if (!treePagesBuffer) return;
				if (!tree.selectedItem) return;
				
				// TODO
				var i:uint=0;
				for each (var treePage:Object in treePagesBuffer) 
				{
					if (i == 0) {
						treePage[0]["parentPageName"] = tree.selectedItem.@name;
					}
					addItem(treePage);
					i++;
				}
				
				clearTreePagesBuffer();
			}
			
			private function clearTreePagesBuffer():void
			{
				treePagesBuffer = null;
			}
			
			protected function html_test_showHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</mx:Script>

	<mx:VBox width="100%" height="100%" x="0">
		<mx:Canvas width="100%">
			<mx:Image source="@Embed('../assets/header.png')"
					  width="100%"
					  maintainAspectRatio="false"
					  scaleContent="true"
					  mouseDown="{nativeWindow.startMove();}"
					  doubleClick="{minMaximize()}"
					  doubleClickEnabled="true" />
			<mx:HBox paddingLeft="5"
					 paddingTop="5"
					 paddingRight="5"
					 color="#FFFFFF"
					 width="100%">
				<mx:Image source="@Embed('icons/16_vdom_icon_editor.png')" />
				<mx:Label id="topTitle" text="VDOM Help Editor" />
				<mx:HBox width="100%" horizontalAlign="right" paddingTop="2">
					<mx:Image source="@Embed('../assets/minimize.png')" right="0" click="{minimize()}" />
					<mx:Image source="@Embed('../assets/restore.png')" right="0" click="{minMaximize()}" />
					<mx:Image source="@Embed('../assets/close.png')" right="0" click="{close()}" />
				</mx:HBox>
			</mx:HBox>
		</mx:Canvas>

		<mx:HRule width="100%" strokeColor="0x1a1a1a" shadowColor="0x737373" />
		<mx:HBox paddingLeft="4">
			<mx:Button id="editProduct"
					   label="Edit Products List"
					   click="{productEdit()}"
					   color="#FFFFFF"
					   fillColors="#333333"
					   textSelectedColor="#FFFFFF"
					   cornerRadius="1"
					   borderColor="#999999"
					   themeColor="#656565"
					   textRollOverColor="#FFFFFF" />

			<mx:Button label="Create products XML"
					   click="{selectXMLFile()}"
					   color="#FFFFFF"
					   fillColors="#333333"
					   textSelectedColor="#FFFFFF"
					   cornerRadius="1"
					   borderColor="#999999"
					   themeColor="#656565"
					   textRollOverColor="#FFFFFF"
					   enabled="{Boolean(cmboxProduct.selectedItem)}" />

			<!--
		   <mx:ProgressBar id="progressBar" labelPlacement="top" themeColor="#F20D7A"
			   minimum="0" visible="true" maximum="100" label="CurrentProgress 0%"
			   direction="right" mode="manual" width="100%"/>
			 -->
		</mx:HBox>
		<mx:HRule width="100%" strokeColor="0x1a1a1a" shadowColor="0x4b4c4c" />
		<mx:HDividedBox y="60" width="100%" height="100%" horizontalGap="1">
			<mx:VBox height="100%" minWidth="220" width="220" horizontalScrollPolicy="off">
				<mx:HBox paddingLeft="3" paddingRight="3" color="#FFFFFF" width="100%">
					<mx:ComboBox id="cmboxProduct"
								 width="100%"
								 labelField="title"
								 dataProvider="{{label:'VDOM Editor'}}"
								 fillColors="#333333"
								 iconColor="0xCCCCCC"
								 change="{changeProduct()}"
								 textSelectedColor="#FFFFFF"
								 cornerRadius="1"
								 borderColor="#999999"
								 themeColor="#656565"
								 textRollOverColor="#000000"
								 selectionColor="#0000FF"/>

				</mx:HBox>
				<mx:Tree id="tree" width="100%" height="100%" color="#000000" showRoot="true" labelField="@title"
						 dragEnabled="true" dragMoveEnabled="true" dropEnabled="true"
						 folderOpenIcon="@Embed('../assets/open_folder.png')"
						 folderClosedIcon="@Embed('../assets/close_folder.png')"
						 openDuration="0"
						 defaultLeafIcon="@Embed('../assets/page.png')" 
						 dragDrop="dragDropHandler(event);"
						 change="{treeChangeHandler(event)}"
						 creationComplete="tree_creationCompleteHandler(event)"/>

				<mx:HBox paddingLeft="3">
					<mx:Button label="Add Page"
							   click="{addItem();}"
							   color="#FFFFFF"
							   fillColors="#333333"
							   textSelectedColor="#FFFFFF"
							   cornerRadius="1"
							   borderColor="#999999"
							   themeColor="#656565"
							   textRollOverColor="#FFFFFF"
							   enabled="{Boolean(cmboxProduct.selectedItem)}" />
					<mx:Button label="Remove Page"
							   click="{removeItemClickHandler()}"
							   color="#FFFFFF"
							   fillColors="#333333"
							   textSelectedColor="#FFFFFF"
							   cornerRadius="1"
							   borderColor="#999999"
							   themeColor="#656565"
							   textRollOverColor="#FFFFFF" />
				</mx:HBox>
			</mx:VBox>
			<mx:TabNavigator width="100%" height="100%" backgroundColor="#E4E4E4" paddingTop="0">
				<mx:Canvas width="100%" height="100%" label="WYSIWYG" show="getCurrentPage()">
					<mx:VBox width="100%" height="100%" verticalGap="0" verticalAlign="0">
						<!--mx:HBox width="100%" color="#000000" backgroundColor="#E4E4E4"  >
						</mx:HBox-->

						<local:HTML_WYSIWYG id="html_wysiwyg" width="100%" height="100%" initialize="html_wysiwyg_initializeHandler(event)"/>
						<mx:HBox width="100%" backgroundColor="0x373739" paddingBottom="3">
							<mx:Canvas height="100%">
								<mx:Label id="pageInformation"
										  text="Title: title"
										  color="#FFFFFF"
										  fontSize="12"
										  top="5"
										  left="5" />
							</mx:Canvas>
							<mx:HBox width="100%" horizontalAlign="right" paddingTop="3" paddingRight="3">

								<mx:Button label="Save"
										   click="{savePage()}"
										   toolTip="Save page"
										   color="#FFFFFF"
										   fillColors="#333333"
										   textSelectedColor="#FFFFFF"
										   cornerRadius="1"
										   borderColor="#999999"
										   themeColor="#656565"
										   textRollOverColor="#FFFFFF" />

								<mx:Button label="Page Settings"
										   click="{editPage()}"
										   color="#FFFFFF"
										   fillColors="#333333"
										   textSelectedColor="#FFFFFF"
										   cornerRadius="1"
										   borderColor="#999999"
										   themeColor="#656565"
										   textRollOverColor="#FFFFFF" />
							</mx:HBox>
						</mx:HBox>
					</mx:VBox>
				</mx:Canvas>
				<mx:Canvas width="100%" height="100%" label="Preview" show="{htmlShowHandler()}">
					<mx:HTML id="html" width="100%" height="100%" />
				</mx:Canvas>
				<!--mx:Canvas width="100%" height="100%" label="Sourse" color="#00FF00" >
					<mx:TextArea id="htmlSource" width="100%" height="100%"  focusAlpha="0" />
				</mx:Canvas-->
			</mx:TabNavigator>
		</mx:HDividedBox>
		<mx:HBox horizontalAlign="right" width="100%">
			<mx:VBox verticalGap="1" verticalAlign="0">
				<mx:Label text="VDOM Help Application" color="0xFFFFFF" textAlign="right" width="100%" />
				<mx:Label text="Copyright© 2009 - V.D.O.M. Box Internationl - All rights reserved " color="0xFFFFFF" />
			</mx:VBox>
			<mx:Image source="@Embed('../assets/label.png')" />
		</mx:HBox>
	</mx:VBox>
</mx:WindowedApplication>
