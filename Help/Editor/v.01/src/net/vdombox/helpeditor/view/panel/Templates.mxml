<?xml version="1.0" encoding="utf-8"?>
<components:ResizableTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
								 xmlns:components="net.vdombox.helpeditor.view.components.*"
								layout="absolute" 
								minWidth="600" minHeight="500"
								title="Templates"
								showCloseButton="true"
								verticalScrollPolicy="off" horizontalScrollPolicy="off" 
								borderAlpha="0.98" cornerRadius="1" 
								visible="true" shadowDirection="right"
								backgroundColor="#373739"
								borderColor="#373739" titleStyleName="resourceBrowserTitle"
								borderThicknessLeft="1" borderThicknessRight="1"
								resizable="true"
								shareId="TemplatesTitleWindow">
	
	<mx:Metadata>
	</mx:Metadata>
	
	<mx:Style>
		.resourceBrowserTitle 
		{
			color:#FFFFFF;
			fontWeight:bold;
		}
	</mx:Style>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.core.UITextField;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ListEventReason;
			import mx.managers.PopUpManager;
			import mx.utils.UIDUtil;
			
			import net.vdombox.helpeditor.model.AlertMessages;
			import net.vdombox.helpeditor.model.vo.TemplateVO;
			import net.vdombox.helpeditor.view.components.TemplateContentEditor;
			
			public static const EVENT_INSERT_TEMPLATE_CLICK : String = "insertClick";
			[Bindable]
			public var allowInsert : Boolean = false;
			
			override protected function creationCompleteHandler(event:FlexEvent):void
			{
				super.creationCompleteHandler(event);
				
				PopUpManager.centerPopUp(this);
			}
				
			override protected function keyHandler(event:KeyboardEvent) : void 
			{
				if (event.target is UITextField)
					return;
				
				if (event.charCode == Keyboard.ESCAPE)
					close();
			}
			
			protected function btnApply_clickHandler(event:MouseEvent):void
			{
				if (!templatesGroup.selectedTemplate)
					return;
				
				templatesGroup.saveTemplate(templatesGroup.selectedTemplate);
				
				if (!templatesGroup.selectedTemplate.validXMLFormat)
					showInvalidTemplates([templatesGroup.selectedTemplate]);
			}
			
			protected function btnOK_clickHandler(event:MouseEvent):void
			{
				templatesGroup.saveTemplates();
				
				var invalidTemplates : Array = [];
				
				for each (var tplVO : TemplateVO in templatesGroup.allTemplates)
				{
					if (!tplVO.validXMLFormat)
						invalidTemplates.push(tplVO);
				}
				
				if (invalidTemplates && invalidTemplates.length > 0)
				{
					showInvalidTemplates(invalidTemplates, invalidTemplatesCloseHandler);
					return;
				}
				
				function invalidTemplatesCloseHandler (closeType : String) : void
				{
					if (closeType == TemplatesErrorDescriptionPanel.CLOSE_TYPE_IGNORE)
						close();
				}
				
				close();
			}
			
			
			protected function btnInsert_clickHandler(event:MouseEvent):void
			{
				if (!templatesGroup.selectedTemplate)
				{
					close();
					return;
				}
					
				templatesGroup.saveTemplate(templatesGroup.selectedTemplate);
				
				if (!templatesGroup.selectedTemplate.validXMLFormat)
				{
					showInvalidTemplates([templatesGroup.selectedTemplate], invalidTemplateCloseHandler);
					return;
				}
				
				function invalidTemplateCloseHandler (closeType : String) : void
				{
					if (closeType == TemplatesErrorDescriptionPanel.CLOSE_TYPE_IGNORE)
					{
						dispatchEvent(new Event(EVENT_INSERT_TEMPLATE_CLICK));
						
						close();
					}
				}
				
				dispatchEvent(new Event(EVENT_INSERT_TEMPLATE_CLICK));
				
				close();
			}
			
			public function get selectedTemplateName () : String
			{
				if (!templatesGroup.selectedTemplate)
					return "";
				
				return templatesGroup.selectedTemplate.name;
			}
			
			private function showInvalidTemplates (templates:Array, closeHandler:Function = null) : void
			{
				var invalidTemplatesPopup : TemplatesErrorDescriptionPanel = new TemplatesErrorDescriptionPanel();
				
				invalidTemplatesPopup.templates = templates;
				invalidTemplatesPopup.closeHandler = closeHandler;
				
				PopUpManager.addPopUp(invalidTemplatesPopup, this, true);
			}
			
		]]>
	</mx:Script>
	
	<mx:HBox width="100%" height="100%"
			 left="10" right="10" top="10" bottom="10" >
		
		<components:TemplatesGroup  id="templatesGroup"
									width="100%" height="100%"/>
		
	</mx:HBox>
	
	<mx:ControlBar horizontalAlign="right">
		
		<components:BlackButton id="btnInsert"
				   label="Insert"
				   click="btnInsert_clickHandler(event)"
				   visible="{allowInsert}"/>
		
		<components:BlackButton id="btnApply"
				   label="Apply"
				   click="btnApply_clickHandler(event)"/>
		
		<components:BlackButton id="btnOK"
				   label="OK"
				   click="btnOK_clickHandler(event)"/>
		
		<components:BlackButton id="btnCancel"
				   label="Cancel"
				   click="close()"/>
		
	</mx:ControlBar>
	
</components:ResizableTitleWindow>
