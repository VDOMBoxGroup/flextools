<?xml version="1.0" encoding="utf-8"?>
<mx:HTML xmlns:mx="http://www.adobe.com/2006/mxml" 
	location="libs/ckeditor/_samples/fullpage.html"
	creationComplete="init()" width="100%" height="100%"
	uncaughtScriptException="onJavaScriptException(event)"
	complete="htmlCompleteHandler(event)">
	
	<mx:Metadata>
		[Event(name="saveContent", type="flash.events.Event")]
		[Event(name="imagesWidthSetted", type="flash.events.Event")]
		[Event(name="httpImageLoaded", type="flash.events.Event")]
		[Event(name="requestTemplate", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.adobe.images.PNGEncoder;
			import com.adobe.utils.StringUtil;
			
			import mx.controls.Alert;
			import mx.utils.Base64Encoder;
			
			import net.vdombox.helpeditor.controller.ClipboardManager;
			import net.vdombox.helpeditor.controller.PageToc;
			import net.vdombox.helpeditor.model.HtmlPageProperties;
			import net.vdombox.helpeditor.model.WysiwygImage;
			import net.vdombox.helpeditor.utils.ResourceUtils;
			import net.vdombox.helpeditor.utils.Utils;
			
			private var clipboardManager : ClipboardManager = ClipboardManager.getInstance();
			private var resourceImageUtils : ResourceUtils = ResourceUtils.getInstance(); 
			
			private var instancesInitialized 	: Boolean;
			private var pageContentToRefresh	: String;
			private var refreshPageAfterInit	: Boolean;
			
			public static const MAX_IMAGE_WIDTH : Number = 500;
			
			private var imgCounter : Number = 0;
			private var resourcesList : XMLList;
			private var _pageContent : XML;
			
			private var imageWidthInTag		: Number = 0;
			private var imageHeightInTag	: Number = 0;
			
			private var rewritePageContent	: Boolean;
			
			public static const EVENT_WYSIWYG_SAVE_COMBINATION_CLICKED	: String = "saveContent"; 
			public static const EVENT_WYSIWYG_IMAGES_WIDTH_SETTED		: String = "imagesWidthSetted";
			
			public function get pageContentXML():XML
			{
				return _pageContent;
			}
			
			public function get pageContent() : String
			{
				return Utils.restoreSpaces(_pageContent.toXMLString());
			}
			
			public function set pageContent(strContent : String) : void
			{
				if (!strContent)
				{
					_pageContent = null;
					return;
				}
				
				_pageContent = new XML(Utils.convertSpaces(strContent));
			}

			private function init():void
			{
				this.addEventListener(KeyboardEvent.KEY_UP,		onKeyboardKeyUp);
				this.addEventListener(KeyboardEvent.KEY_DOWN,	onKeyboardKeyDown);
			}
			
			private function onKeyboardKeyDown(keyEvent:KeyboardEvent):void
			{
				if (keyEvent.ctrlKey && !(keyEvent.keyCode == Keyboard.C || keyEvent.keyCode == Keyboard.V) ) {
					keyEvent.preventDefault();
				}
				if (keyEvent.ctrlKey && keyEvent.shiftKey && keyEvent.keyCode == Keyboard.V)
					pasteImageFromClipboard();
			}
			
			private function onKeyboardKeyUp(keyEvent:KeyboardEvent):void
			{
				switch(keyEvent.keyCode)
				{
					case (Keyboard.S):
					{
						if (keyEvent.ctrlKey) {
							this.dispatchEvent(new Event(EVENT_WYSIWYG_SAVE_COMBINATION_CLICKED));
						}
						break;
					}
					default:
					{
						break;
					}
				}
			
			}
			
			public function get editor():*
			{
				return domWindow.CKEDITOR.instances.editor1;
			}
			
			public function setHTML( value : String ) : void
			{
				if (!instancesInitialized) {
					refreshPageAfterInit = true;
					pageContentToRefresh = value;
					return;
				}
				
				var pageContentWithoutHighlightAllScript : String = value.replace(HtmlPageProperties.highlightAllTemplate, ""); 
				
				editor.setData(pageContentWithoutHighlightAllScript);
			}
			
			private function setElement(element : String):void
			{
				editor.insertHtml(element);
			}
			
			public function insertTemplate (templateName : String) : void
			{
				if (!templateName)
					return;
				
				var template : String = "#Template(" + templateName + ")";
				
				setElement(template);
			}
			
			public function getHTML(showPageToc:Boolean = false) : String
			{
				var editorData	: String;
				var patternHead	: RegExp;
				var htmlTxt		: String;
				
				patternHead = /<[ ]*head[ ]*(>|\/[ ]*>)/i;
				
				editorData = instancesInitialized ? editor.getData() : "";
				
				htmlTxt = editorData;
				
				if (editorData.search(patternHead) == -1) 
				{
					htmlTxt = getHtmlSourceTxt(editorData, showPageToc);
						
				} else {
					if (showPageToc)
						htmlTxt = appendHighlightScriptToPageContent (htmlTxt);
						
				}
				
				return htmlTxt;
			}
			
			private function appendHighlightScriptToPageContent(pageContent : String) : String
			{
				if (!pageContent)
					return "";
				
				if (pageContent.indexOf(HtmlPageProperties.highlightAllTemplate) >= 0)
					pageContent = pageContent.replace(HtmlPageProperties.highlightAllTemplate, "");
				
				if (pageContent.indexOf(HtmlPageProperties.jsCoreFileName) == -1)
					return pageContent; 
				
				var pageBodyEndWithHighkightAllScript : String = HtmlPageProperties.highlightAllTemplate.concat("\n</body>");
				
				
				return pageContent.replace("</body>",pageBodyEndWithHighkightAllScript);
			}
			
			private static function getHtmlSourceTxt(bodyContent : String, showPageToc:Boolean = false) : String
			{
				var htmlTxt		: String = "";
				
				bodyContent = bodyContent.replace(HtmlPageProperties.highlightAllTemplate, "");
				
				var highlightAllScript : String = showPageToc ? HtmlPageProperties.highlightAllTemplate : "";
				
				htmlTxt = "<html>" + "\n" + 
								HtmlPageProperties.headTemplate +
								"<body>" + "\n" +
									bodyContent + "\n" +
									highlightAllScript + "\n" +
								"</body>" + "\n" +
							"</html>";
				
				
				if (showPageToc) {
					return htmlTxt;
				}
				
				return getHTMLWithoutPageToc(htmlTxt);
				
			}
			
			
			private static function getHTMLWithoutPageToc(value:String) : String 
			{
				value = Utils.convertEntities(value);
				value = Utils.convertSpaces(value);
				
				var xml			: XML = new XML(value);
				
				var ulClass		: String = "";
				var divClass	: String = "";
				var linkClass	: String = "";
				
				// delete old variant of toc ...
				for each (var xmlDiv:XML in xml.body.div) {
					
					divClass = String(xmlDiv.@["class"]);
					
					if (divClass.indexOf(PageToc.TOC_BY_HEADERS_CLASS) >= 0 || 
						divClass.indexOf(PageToc.TOC_BY_PAGES_CLASS) >= 0 ) {
						
						delete xmlDiv.parent().children()[xmlDiv.childIndex()];
					}
					
				}
				// ... delete old variant of toc
				
				for each (var xmlUl:XML in xml.body.ul) {
					
					ulClass = String(xmlUl.@["class"]);
					
					if (ulClass.indexOf(PageToc.TOC_BY_HEADERS_CLASS) >= 0 || 
						ulClass.indexOf(PageToc.TOC_BY_PAGES_CLASS) >= 0 ) {
						
						delete xmlUl.parent().children()[xmlUl.childIndex()];
						break;
					}
					
				}
				
				for each (var xmlLink:XML in xml.body..a) {
					
					linkClass = String(xmlLink.@["class"]);
					
					if ( linkClass.indexOf(PageToc.ANCOR_CLASS) >= 0 || linkClass.indexOf(PageToc.TOC_BY_HEADERS_CLASS) >= 0 ) {
						
						delete xmlLink.parent().children()[xmlLink.childIndex()];
					}
					
				}
				
				xml.normalize();
				
				return Utils.restoreSpaces(xml.toXMLString());
			}
			
			public static function getNewPageContent(aPageTitle:String) : String
			{
				
				return getHtmlSourceTxt("<h1>"+aPageTitle+"</h1>");
			}
			
			public function generateLinkToPage(aPageName:String, aPageTitle:String) : void
			{
				var strHref:String = "<a href=\""+ aPageName +"\">"+ aPageTitle +"</a>";
				
				Clipboard.generalClipboard.setData(ClipboardFormats.HTML_FORMAT, strHref);
			}
			
			public function resetImagesPath() : void
			{
				pageContent = getHTML();

				var resourcesList	: XMLList	= pageContentXML..img;
				
				for each (var xmlImg:XML in resourcesList)
				{
					var newPath : String;
					var imgSrc : String = StringUtil.trim(xmlImg.@src);
					
					if ( !imgSrc || imgSrc.indexOf("app-storage:/resources") >= 0 || imgSrc.indexOf("app-storage:\resources") >= 0 ) // resource exists
						continue;
					
					if ( imgSrc.indexOf("http://") >= 0 || imgSrc.indexOf("https://") >= 0 ) // image from http
					{
						resourceImageUtils.addEventListener(ResourceUtils.HTTP_IMAGE_LOADED, this.dispatchEvent);
						newPath = resourceImageUtils.loadHttpImg(imgSrc);
					} 
					else 
					{
						newPath = resourceImageUtils.copyImg(imgSrc); // image from file system
					}
					
					if (!newPath)
						delete xmlImg.parent().children()[xmlImg.childIndex()];
					else
						xmlImg.@src = newPath;
					
					setHTML(pageContent);
				}
			}
			
			public function resetImagesWidth(content : String = null):void
			{				
				rewritePageContent = true;
				pageContent = null;
				
				if (content != null)
				{
					pageContent = content;
					rewritePageContent = false;
				} else 
				{
					pageContent = getHTML();
				}
				
				resourcesList = pageContentXML..img;
				
				imgCounter = 0;
				
				if (!resourcesList || resourcesList.length() <= 0)
				{
					onLastImageWidthSetted();
					return;
				}
				
				resetNextImageWidth();
			}
			
			private function resetNextImageWidth():void
			{
				if (imgCounter >= resourcesList.length())
				{
					imgCounter = 0;
					onLastImageWidthSetted(); 
					return;
				}
				
				imageWidthInTag = 0;
				imageHeightInTag = 0;
				
				var ratioX		: Number = 1;
				
				var xmlImg:XML = resourcesList[imgCounter];
				
				if ( String(xmlImg.@width) != "" && !isNaN(Number(xmlImg.@width)) )
					imageWidthInTag = Number(xmlImg.@width);
				
				if ( String(xmlImg.@height) != "" && !isNaN(Number(xmlImg.@height)) )
					imageHeightInTag = Number(xmlImg.@height);
				
				if (String(xmlImg.@style) != "")
				{
					imageWidthInTag = Utils.getSizeFromStyle(String(xmlImg.@style).toLowerCase(), Utils.TYPE_WIDTH); 
					imageHeightInTag = Utils.getSizeFromStyle(String(xmlImg.@style).toLowerCase(), Utils.TYPE_HEIGHT);
				}
				
				if (imageWidthInTag > 0) // width is defined in <img>
				{
					if (imageWidthInTag <= MAX_IMAGE_WIDTH) // width is good
					{
						onImageWidthSetted();
						return;
					}
				}
				
				if (imageWidthInTag > 0 && imageHeightInTag > 0)
				{
					// set width = MAX_IMAGE_WIDTH and scale height
					
					ratioX =  MAX_IMAGE_WIDTH / imageWidthInTag;
					imageWidthInTag = MAX_IMAGE_WIDTH;
					imageHeightInTag = Math.floor(imageHeightInTag * ratioX);
					
					onImageWidthSetted();
					return;
				}
				
				var imagePath : String = StringUtil.trim(xmlImg.@src);
				var file : File = new File(imagePath);
				
				if (!imagePath || !file.exists)
				{
					onImageWidthSetted();
					return;
				}
					
				var fileStream : FileStream = new FileStream();
				var originalByteArray : ByteArray    = new ByteArray();
				var base64 : Base64Encoder = new Base64Encoder();
				
				fileStream.open( file, FileMode.READ);
				fileStream.readBytes(originalByteArray);
				fileStream.close();
				
				base64.encodeBytes(originalByteArray);
				
				var loader : Loader = new Loader();
				loader.loadBytes( originalByteArray );
				
				loader.contentLoaderInfo.addEventListener( Event.COMPLETE, contentLoaderInfoCompleteHandler );
				loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, contentLoaderInfoErrorHandler );
				loader.contentLoaderInfo.addEventListener( SecurityErrorEvent.SECURITY_ERROR, contentLoaderInfoErrorHandler );
				
				function contentLoaderInfoCompleteHandler (evt:Event) : void 
				{
					var loaderInfo : LoaderInfo = evt.target as LoaderInfo;
					
					imageWidthInTag = (imageWidthInTag > 0) ? imageWidthInTag : loaderInfo.width;
					imageHeightInTag = (imageHeightInTag > 0) ? imageHeightInTag : loaderInfo.height;
					
					if (imageWidthInTag > MAX_IMAGE_WIDTH)
					{
						ratioX =  MAX_IMAGE_WIDTH / imageWidthInTag;
						imageWidthInTag = MAX_IMAGE_WIDTH;
						imageHeightInTag = Math.floor(imageHeightInTag * ratioX);
					}
					
					onImageWidthSetted();
				}
				
				function contentLoaderInfoErrorHandler (evt:Event) : void 
				{
					onImageWidthSetted();
					return;
				}
			}
			
			private function onImageWidthSetted():void
			{
				resourcesList[imgCounter].@width = imageWidthInTag;
				resourcesList[imgCounter].@height = imageHeightInTag;
				
				try {
					delete resourcesList[imgCounter].@style;
				} catch (e:Error) {
				}
				
				if (!resourcesList || resourcesList.length() <= 0) {
					onLastImageWidthSetted();
					return;			
				}
				
				imgCounter ++;
				resetNextImageWidth();
			}
			
			private function onLastImageWidthSetted():void
			{
				imgCounter = 0;
				
				if (rewritePageContent)
					setHTML(pageContent);
				
				this.dispatchEvent(new Event(EVENT_WYSIWYG_IMAGES_WIDTH_SETTED));
			}
			
			protected function onJavaScriptException(event:HTMLUncaughtScriptExceptionEvent):void
			{
				trace ("JavaScriptException");
			}
			
			protected function htmlCompleteHandler(event:Event):void
			{
				instancesInitialized = true;
				
				domWindow.pasteImageFromClipboard	= pasteImageFromClipboard;
				domWindow.pasteTemplate				= pasteTemplate;
				
				if (refreshPageAfterInit) {
					setHTML(pageContentToRefresh);
					
					preventRefresh();
				}
			}
			
			public function preventRefresh():void
			{
				refreshPageAfterInit = false;
				pageContentToRefresh = null;
			}
			
			public function pasteImageFromClipboard():void
			{
				var wysiwygImage : WysiwygImage = clipboardManager.getImageFromClipboard();
				var imageTeg : XML = getImageTag(wysiwygImage);
				
				if (!imageTeg)
					return;
				
				setElement(imageTeg.toXMLString());
			}
			
			public function pasteTemplate () : void
			{
				dispatchEvent(new Event("requestTemplate"));
			}
			
			private function getImageTag(wysiwygImage : WysiwygImage) : XML
			{
				if (!wysiwygImage || !wysiwygImage.src)
					return null;
					
				var imageTag : XML = new XML("<img/>");
				
				imageTag.@src = wysiwygImage.src;
				
				if (wysiwygImage.width)
					imageTag.@width = wysiwygImage.width;
				
				if (wysiwygImage.height)
					imageTag.@height = wysiwygImage.height;
				
				return imageTag;
			}
			
		]]>
	</mx:Script>
</mx:HTML>
