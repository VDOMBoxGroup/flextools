<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" 
	width="600" height="500"
	title="Pages Settings"
	creationComplete="creationCompleteHandler(event)"
	showCloseButton="true"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" 
	borderAlpha="0.98" cornerRadius="1" 
	visible="true" shadowDirection="right"
	backgroundColor="#373739"
	borderColor="#373739" titleStyleName="resourceBrowserTitle"
	borderThicknessLeft="1" borderThicknessRight="1" xmlns:panel="net.vdombox.helpeditor.view.panel.*"
	keyDown="window_keyDownHandler(event)">
	
	<mx:Style>
		.resourceBrowserTitle 
		{
			color:#FFFFFF;
			fontWeight:bold;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import net.vdombox.helpeditor.view.components.SyncPagesSelector;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.controls.TextInput;
			import mx.core.IUITextField;
			import mx.core.UITextField;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ListEventReason;
			import mx.managers.PopUpManager;
			import mx.utils.UIDUtil;
			
			import net.vdombox.helpeditor.controller.events.PagesSyncronizationEvent;
			import net.vdombox.helpeditor.model.AlertMessages;
			import net.vdombox.helpeditor.model.SQLProxy;
			import net.vdombox.helpeditor.view.itemrenderers.TreeItemRenderer;
			
			private var sqlProxy : SQLProxy = new SQLProxy();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				addEventListener(CloseEvent.CLOSE, closeHandler);
				
				PopUpManager.centerPopUp(this);
			}
			
			private function closeHandler(cEvent:CloseEvent):void 
			{
				PopUpManager.removePopUp(this);
			}
			
			private function addNewGroup () : void
			{
				var newGroup : Object = {};
				newGroup.group_name = UIDUtil.createUID();
				newGroup.group_title = "New group";
				newGroup.pages = [];
				
				sqlProxy.addSyncGroup(newGroup.group_name, newGroup.group_title, newGroup.pages);
				
				var groups : Array = syncGroupsList.dataProvider.source;
				if (!groups)
					groups = [newGroup];
				else
					groups.push(newGroup);
				
				syncGroupsList.dataProvider = groups;
				
				syncGroupsList.validateNow();
				
				syncGroupsList.selectedIndex = syncGroupsList.dataProvider.length - 1;
				
				addNewPagesSelector(newGroup.group_name);
				
				updateSelectorView();
				
				syncGroupsList_itemEditBegin();
			}
			
			private function askToRemoveGroup () : void
			{
				if (syncGroupsList.selectedIndex >= 0)
					Alert.show(AlertMessages.MSG_ASK_DELETE_GROUP, AlertMessages.MSG_TYPE_DELETE, Alert.YES|Alert.NO, this, alertRemoveGroupCloseHandler);
			}
			
			private function alertRemoveGroupCloseHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
					removeGroup();
			}
			
			private function removeGroup () : void
			{
				if (!syncGroupsList.dataProvider ||
					!syncGroupsList.dataProvider.source ||
					syncGroupsList.dataProvider.source.length == 0 || 
					!syncGroupsList.selectedItem)
					return;
				
				sqlProxy.removeSyncGroup(syncGroupsList.selectedItem.group_name);
				
				vsGroupPages.removeChildAt(syncGroupsList.selectedIndex);
				
				var groupsCollection : Array = syncGroupsList.dataProvider.source as Array;
				groupsCollection.splice(syncGroupsList.selectedIndex, 1);
				
				syncGroupsList.dataProvider = groupsCollection;
				
				syncGroupsList.validateNow();
				
				syncGroupsList.selectedIndex = syncGroupsList.numChildren > 0 ? 0 : -1;
				
				updateSelectorView();
			}
			
			private function createGroupsList() : void
			{
				var allGroups : Array = sqlProxy.getAllSyncGroups() as Array;
				
				syncGroupsList.dataProvider = allGroups;
				
				syncGroupsList.validateNow();
				
				if (!vsGroupPages)
					return;
					
				if (!allGroups || allGroups.length == 0)
					return;
				
				for each (var syncGroup : Object in allGroups)
				{
					addNewPagesSelector(syncGroup.group_name);
				}
				
				syncGroupsList.selectedIndex = 0;
				
				updateSelectorView();
			}
			
			private function addNewPagesSelector(syncGroupName : String) : void
			{
				var pagesSelector : SyncPagesSelector;
				
				pagesSelector = new SyncPagesSelector();
				pagesSelector.syncGroupName = syncGroupName;
				
				pagesSelector.addEventListener(PagesSyncronizationEvent.SELECTION_CHANGED, groupPagesChangeHandler, true);
				
				vsGroupPages.addChild(pagesSelector);
			}
			
			private function groupPagesChangeHandler (event : PagesSyncronizationEvent) : void
			{
				var pageItemRenderer : TreeItemRenderer = event.target as TreeItemRenderer;
				
				if (!currentPagesSelector)
					return;
				
				if (pageItemRenderer.pageSyncSelected)
					sqlProxy.addPageToSyncGroup(pageItemRenderer.pageName, currentPagesSelector.syncGroupName);
				else
					sqlProxy.removePageFromSyncGroup(pageItemRenderer.pageName, currentPagesSelector.syncGroupName);
			}
		
			private function updateSelectorView () : void
			{
				vsGroupPages.selectedIndex = syncGroupsList.selectedIndex;
				
				if (vsGroupPages.numChildren > 0 && currentPagesSelector)
				{
					currentPagesSelector.updatePages();
										
					currentPagesSelector.setFocus();
				}
			}
			
			private function get currentPagesSelector () : SyncPagesSelector
			{
				try
				{
					return vsGroupPages && vsGroupPages.selectedChild ? vsGroupPages.selectedChild as SyncPagesSelector : null;
				}
				catch (e:Error)
				{}
				
				return null;
			}
			
			protected function window_keyDownHandler(event:KeyboardEvent):void
			{
				if (event.target is UITextField)
					return;
				
				if (event.charCode == Keyboard.ESCAPE)
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function syncGroupsList_doubleClickHandler(event:ListEvent):void
			{
				syncGroupsList_itemEditBegin();
			}
			
			private function syncGroupsList_itemEditBegin () : void
			{
				syncGroupsList.editable = true;
				syncGroupsList.editedItemPosition = {rowIndex : syncGroupsList.selectedIndex, columnIndex : 0};
			}
			
			protected function syncGroupsList_itemEditEndHandler(event:ListEvent):void
			{
				event.preventDefault();
				
				if ( event.reason == ListEventReason.CANCELLED )
				{
					destroyItemEditor();
					return;
				}
				
				if (!isCorrectGroupName)
				{
					event.stopImmediatePropagation();
					
					listItemEditorInstance.errorString = "Error: empty group name";
					return;
				}
				
				applyGroupLabel();
				
				destroyItemEditor();
			}
			
			private function applyGroupLabel () : void
			{
				var editedItemData : Object = syncGroupsList.editedItemRenderer.data;
				
				editedItemData.group_title = listItemEditorInstance.text;
				
				syncGroupsList.selectedItem = editedItemData;
				
				sqlProxy.updateSyncGroupTitle(editedItemData.group_name, editedItemData.group_title);
			}
			
			private function get isCorrectGroupName () : Boolean
			{
				var groupNameText : String = listItemEditorInstance.text;
				
				if (!groupNameText)
					return false;
				
				return true;
			}
			
			private function get listItemEditorInstance () : TextInput
			{
				return syncGroupsList.itemEditorInstance as TextInput;
			}
			
			private function destroyItemEditor() : void
			{
				syncGroupsList.destroyItemEditor();
				syncGroupsList.editable = false;
			}
		]]>
	</mx:Script>
	
	<mx:HBox width="100%" height="100%"
			 paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"
			 horizontalGap="5">
		<mx:VBox width="50%" height="100%">
			<mx:Label text="Groups: "
					  paddingLeft="5"
					  color="white"/>
			
			<mx:HBox>
				<mx:Button id="btnNewGroup" 
						   label="New" toolTip="New group"
						   click="{addNewGroup()}"/>
				
				<mx:Button id="btnRemoveGroup" 
						   label="Remove" toolTip="Remove group"
						   enabled="{syncGroupsList.dataProvider.length>0}"
						   click="{askToRemoveGroup()}"/>
			</mx:HBox>
			
			<mx:List width="100%" height="100%"
					 id="syncGroupsList"
					 labelField="group_title"
					 change="{updateSelectorView()}"
					 selectedIndex="-1"
					 creationComplete="createGroupsList()"
					 doubleClickEnabled="true"
					 itemDoubleClick="syncGroupsList_doubleClickHandler(event)"
					 itemEditEnd="syncGroupsList_itemEditEndHandler(event)"
					 itemEditor="net.vdombox.helpeditor.view.itemrenderers.ItemEditor"/>
			
		</mx:VBox>
		
		<mx:VBox width="100%" height="100%">
			<mx:Label text="Pages: "
					  paddingLeft="5"
					  color="white"/>
			
			<mx:ViewStack id="vsGroupPages" 
						  width="100%" height="100%"
						  backgroundColor="white"/>
			
		</mx:VBox>
	</mx:HBox>
	
</mx:TitleWindow>
