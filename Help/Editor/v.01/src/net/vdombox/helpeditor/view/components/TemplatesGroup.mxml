<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="net.vdombox.helpeditor.view.components.*">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			
			import net.vdombox.helpeditor.controller.events.TemplateContentEditorEvent;
			import net.vdombox.helpeditor.controller.events.TemplateRenameEvent;
			import net.vdombox.helpeditor.controller.events.TemplatesAccordionEvent;
			import net.vdombox.helpeditor.model.AlertMessages;
			import net.vdombox.helpeditor.model.proxy.SQLProxy;
			import net.vdombox.helpeditor.model.vo.TemplateVO;
			import net.vdombox.helpeditor.utils.PageUtils;
			
			public static const EVENT_TEMPLATE_NAME_CHANGED : String = "templateNameChanged";
			
			private const FILTER_DEF_TEXT	: String = "filter";
			
			private var sqlProxy : SQLProxy = new SQLProxy();
			
			public function get selectedTemplate () : TemplateVO
			{
				if (!selectedFolder)
					return null;
					
				return selectedFolder.selectedTemplate;
			}
			
			public function set selectedTemplate (template : TemplateVO) : void
			{
				for each ( var folder : TemplatesAccordionChild in templatesAccordion.getChildren() )
				{
					if (!folder.templates)
						continue;
					
					if (folder.templates.contains(template))
					{
						templatesAccordion.selectedChild = folder;
						folder.selectedTemplate = template;
						break;
					}
				}
			}
			
			public function get selectedFolder () : TemplatesAccordionChild
			{
				if (!accordionsViewStack.selectedChild)
					return null;
				
				var currentAccordion : Accordion = accordionsViewStack.selectedChild == normalTemplatesBox ? templatesAccordion: templatesFilteredAccordion;
				
				if (!currentAccordion)
					return null;
				
				if (!currentAccordion.selectedChild)
					return null;
				
				return currentAccordion.selectedChild as TemplatesAccordionChild;
			}
			
			public function get allTemplates () : Array
			{
				var allTemplatesArray : Array = [];
				
				for each ( var folder : TemplatesAccordionChild in templatesAccordion.getChildren() )
				{
					allTemplatesArray = allTemplatesArray.concat(folder.templates.source);
				}
				
				return allTemplatesArray;
			}
			
			protected function templatesAccordion_creationCompleteHandler(event:FlexEvent):void
			{
				var foldersFromBD : Array = sqlProxy.getAllFolders() as Array;
				
				if (!foldersFromBD || foldersFromBD.length == 0)
				{
					createNewFolder("New folder");
					return;
				}
				
				for each (var folder : Object in foldersFromBD)
				{
					createNewFolder(folder.name);
				}
			}
			
			private function addFolder () : void
			{
				var newFolderName : String = createUniqueFolderName("New folder");
				
				createNewFolder(newFolderName);
				
				sqlProxy.addFolder(newFolderName);
			}
			
			private function createNewFolder( label : String) : TemplatesAccordionChild
			{
				sqlProxy.addFolder(label);
				
				var folder : TemplatesAccordionChild = new TemplatesAccordionChild();
				folder.label = label;
				
				var templatesArray : Array = sqlProxy.getTemplatesByFolderName(folder.label) as Array;
				folder.templates = new ArrayCollection(templatesArray);
				
				templatesAccordion.addChild(folder);

				folder.addEventListener( TemplatesAccordionEvent.SELECTED_TEMPLATE_CHANGED, selectedTemplateChanged);
				
				folder.addEventListener( TemplatesAccordionEvent.TEMPLATE_NEW_NAME_ENTERED, templateNewNameEnteredHandler);
				folder.addEventListener( TemplatesAccordionEvent.TEMPLATE_NEW_NAME_ACCEPTED, templateNewNameAcceptedHandler);
				
				folder.addEventListener( TemplatesAccordionEvent.FOLDER_REMOVE_CLICK, removeTemplatesFolderClickHander );
				
				folder.addEventListener( TemplatesAccordionEvent.FOLDER_NEW_LABEL_ENTERED, folderNewLabelEnteredHandler );
				folder.addEventListener( TemplatesAccordionEvent.FOLDER_NEW_LABEL_ACCEPTED, folderNewLabelAcceptedHandler );

				return folder;
			}
			
			private function createUniqueFolderName (folderName : String) : String
			{
				var index : int = 1;
				var isUniqueName : Boolean = true;
				var newName : String;
				
				do
				{
					newName = folderName + '-' + index;
					isUniqueName = isUniqueFolderName(newName, "");
					
					index++;
				} while ( !isUniqueName )
				
				return newName;
			}
			
			private function removeTemplatesFolderClickHander( event : TemplatesAccordionEvent ) : void
			{
				var accordChild : TemplatesAccordionChild = event.target as TemplatesAccordionChild;
				
				if ( accordChild.templates && accordChild.templates.length > 0 )
				{
					event.preventDefault();
					
					Alert.show( "You can't remove non empty folder." );
					return;
				}
				
				if (accordChild.parent.numChildren == 1)
				{
					event.preventDefault();
					
					Alert.show( "You can't remove the last category." );
					return;
				}
				
				var confirmRemoveMsg : String = "Are you sure you want to remove '"+ accordChild.label  +"' folder?"
				
				Alert.show(
					confirmRemoveMsg,
					"Confirmation:",
					Alert.YES | Alert.NO, null, deleteFolderAlertCloseHandler, null, Alert.YES );
				
				function deleteFolderAlertCloseHandler( event : CloseEvent ) : void
				{
					if ( event.detail == Alert.YES )
					{
						removeFolder (accordChild);
					}
				}
			}

			private function removeFolder (accordChild : TemplatesAccordionChild) : void
			{
				if (!accordChild)
					return;
				
				sqlProxy.removeFolder(accordChild.label);
				
				accordChild.parent.removeChild( accordChild );
			}
			
			private function folderNewLabelEnteredHandler( event : TemplatesAccordionEvent ) : void
			{
				if ( !event.templatesAccordionHeader )
				{
					throw Error( "Accordion header is undefined" );
					return;
				}
				
				var accordChild : TemplatesAccordionChild = event.target as TemplatesAccordionChild;
				var folderLabel : String = event.templatesAccordionHeader.newEnteredName;
				
				event.templatesAccordionHeader.uniqueFolderName = isUniqueFolderName( folderLabel, accordChild.label );
			}
			
			private function isUniqueFolderName( folderLabel : String, folderName : String = "" ) : Boolean
			{
				if ( !folderLabel )
					return false;
				
				for each ( var folder : TemplatesAccordionChild in templatesAccordion.getChildren() )
				{
					if ( folder.name == folderName )
						continue;
					
					if ( folder.label == folderLabel )
					{
						return false;
					}
				}
				
				return true;
			}
			
			private function folderNewLabelAcceptedHandler( event : TemplatesAccordionEvent ) : void
			{
				var folder : TemplatesAccordionChild = event.target as TemplatesAccordionChild;
				
				sqlProxy.updateFolderName(folder.oldFolderLabel, folder.label);
				
				folder.changeTemplatesFolder(folder.label);
				
			}
			
			private function templateNewNameEnteredHandler( event : TemplatesAccordionEvent ) : void
			{
				var folder : TemplatesAccordionChild = event.target as TemplatesAccordionChild;
				
				folder.uniqueTemplateName = isUniqueTemplateName( folder.newTemplateName, folder.oldTemplateName );
			}
 			
			private function isUniqueTemplateName(templateNewName:String, templateOldName:String = "") : Boolean
			{
				for each (var template : TemplateVO in allTemplates)
				{
					if (template.name == templateOldName)
						continue;
					
					if (template.name == templateNewName)
						return false;
				}
				
				return true;
			}
			
			private function templateNewNameAcceptedHandler( event : TemplatesAccordionEvent ) : void
			{
				var folder : TemplatesAccordionChild = event.target as TemplatesAccordionChild;
				
				sqlProxy.updateTemplateName(folder.oldTemplateName, folder.newTemplateName);
				
				refreshTemplatesContent(folder.oldTemplateName, folder.newTemplateName);
				refreshPagesContent(folder.oldTemplateName, folder.newTemplateName);
			}
			
			protected function addTemplate():void
			{
				if (!selectedFolder)
					return;
				
				var newTemplateName : String = createUniqueTemplateName("New template");
				
				var newTemplate : TemplateVO = selectedFolder.addTemplate(newTemplateName);
				
				sqlProxy.addTemplate(newTemplate.name, newTemplate.content, newTemplate.folder);
			}
			
			private function createUniqueTemplateName (templateName : String) : String
			{
				var index : int = 1;
				var isUniqueName : Boolean = true;
				var newName : String;
				
				do
				{
					newName = templateName + '-' + index;
					isUniqueName = isUniqueTemplateName(newName, "");
					
					index++;
				} while ( !isUniqueName )
				
				return newName;
			}
			
			private function askToRemoveTemplate () : void
			{
				if (!selectedFolder)
					return;
				
				if (selectedTemplate)
					Alert.show(AlertMessages.MSG_ASK_DELETE_TEMPLATE, AlertMessages.MSG_TYPE_DELETE, Alert.YES|Alert.NO, null, alertRemoveTemplateCloseHandler);
			}
			
			private function alertRemoveTemplateCloseHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
					removeTemplate();
			}
			
			protected function removeTemplate():void
			{
				if (!selectedFolder)
					return;
				
				var removedTemplate : TemplateVO = selectedFolder.removeSelectedtemplate();
				
				sqlProxy.removeTemplate(removedTemplate.name);
				
				var removingTemplateEditor : TemplateContentEditor = getContentEditorByTemplate(removedTemplate);
				if (removingTemplateEditor)
				{
					removingTemplateEditor.removeEventListener(TemplateContentEditorEvent.JUMP_TO_TEMPLATE, jumpToTemplateClick);
					
					vsTemplatesEditors.removeChild(removingTemplateEditor);
					removingTemplateEditor = null;
				}
				
				removedTemplate = null;
			}
			
			private function selectedTemplateChanged(event : TemplatesAccordionEvent) : void
			{
				if (!selectedTemplate)
					return;
				
				var contentEditor : TemplateContentEditor = getContentEditorByTemplate(selectedTemplate);
				if (!contentEditor)
					contentEditor = addNewTemplateEditor(selectedTemplate);
				
				vsTemplatesEditors.selectedChild = contentEditor;
				contentEditor.setFocus();
			}
			
			private function getContentEditorByTemplate(template : TemplateVO) : TemplateContentEditor
			{
				if (!template)
					return null;
				
				for each (var editor:TemplateContentEditor in vsTemplatesEditors.getChildren())
				{
					if (editor.template == template)
						return editor;
				}
				
				return null;
			}
			
			private function addNewTemplateEditor(template : TemplateVO) : TemplateContentEditor
			{
				var templateEditor : TemplateContentEditor;
				
				templateEditor = new TemplateContentEditor();
				templateEditor.percentWidth = 100;
				templateEditor.percentHeight = 100;
				
				templateEditor.template = template;
				
				templateEditor.addEventListener(TemplateContentEditorEvent.JUMP_TO_TEMPLATE, jumpToTemplateClick, true);
				
				vsTemplatesEditors.addChild(templateEditor);
				
				return templateEditor;
			}
			
			private function jumpToTemplateClick (event : TemplateContentEditorEvent) : void
			{
				var templateName : String = event.templateName;
				
				if (!templateName)
					return;
				
				var alertMsg : String = "Jump to template '" + templateName + "'?";
				Alert.show(alertMsg, "Confirmation: ", Alert.YES|Alert.NO, null, alertAskToJumpCloseHandler);
				
				function alertAskToJumpCloseHandler(event:CloseEvent):void
				{
					if (event.detail == Alert.YES)
						jumpToTemplate(templateName);
				}

			}
			
			private function jumpToTemplate (tplName : String) : void
			{
				for each ( var template : TemplateVO in allTemplates)
				{
					if ( template.name == tplName)
					{
						selectedTemplate = template;
						selectedTemplateChanged(null);
						return;
					}
				}
			}
			
			protected function templatesAccordion_changeHandler(event:IndexChangedEvent):void
			{
				if (selectedTemplate)
					selectedTemplateChanged(null);
			}
			
			public function saveTemplates () : void
			{
				for each (var folder : TemplatesAccordionChild in templatesAccordion.getChildren())
					for each (var template : TemplateVO in folder.templates)
						saveTemplate(template);
			}
			
			public function saveTemplate (template : TemplateVO) : void
			{
				if (!template)
					return;
				
				var templateContentEditor : TemplateContentEditor = getContentEditorByTemplate(template);
				
				if (!templateContentEditor)
					return;
				
				template.content = templateContentEditor.content;
				
				sqlProxy.updateTemplateContent(template.name, template.content);
			}
			
			// filter ...
			[Bindable]
			public var foundTemplates : ArrayCollection = new ArrayCollection();
			
			private var foundFolder : TemplatesAccordionChild;
			
			protected function filter_focusInHandler(event:FocusEvent):void
			{
				if ( filter.text == FILTER_DEF_TEXT )
					filter.text = "";
			}
			
			protected function filter_focusOutHandler(event:FocusEvent):void
			{
				if ( filter.text == "" )
					filter.text = FILTER_DEF_TEXT;
			}
			
			protected function filter_changeHandler(event:Event):void
			{
				if ( filter.text.length > 0 && filter.text != FILTER_DEF_TEXT )
				{
					filterTemplates();
				}
				else
				{
					cancelFilterTemplates();
				}
			}
			
			private function filterTemplates () : void
			{
				foundTemplates.removeAll(); 
				
				for each ( var template : TemplateVO in allTemplates)
				{
					if ( template.name.toLowerCase().indexOf(filter.text.toLowerCase()) >= 0)
						foundTemplates.addItem(template);
				}
				
				vsTemplatesEditors.selectedChild = emptyContentEditor; 
				
				accordionsViewStack.selectedChild = filteredTemplatesBox;
				
				lockButtons();
			}
			
			private function cancelFilterTemplates () : void
			{
				accordionsViewStack.selectedChild = normalTemplatesBox;
				
				if (foundFolder.selectedTemplate)
				{
					jumpToTemplate(foundFolder.selectedTemplate.name);
				}
				else
					selectedTemplateChanged(null);
				
				foundTemplates.removeAll();
					
				unlockButtons();
			}
			
			private function lockButtons () : void
			{
				btnAddFolder.enabled = false;
				btnAddTemplate.enabled = false;
				btnRemoveTemplate.enabled = false;
			}
			
			private function unlockButtons () : void
			{
				btnAddFolder.enabled = true;
				btnAddTemplate.enabled = true;
				btnRemoveTemplate.enabled = true;
			}
			
			protected function templatesFilteredAccordion_creationCompleteHandler(event:FlexEvent):void
			{
				foundFolder = new TemplatesAccordionChild();
				foundFolder.label = "Templates found";
				
				foundFolder.addEventListener(FlexEvent.CREATION_COMPLETE, folderCreationCompleteHandler);
				
				templatesFilteredAccordion.addChild( foundFolder );
				
				foundFolder.addEventListener( TemplatesAccordionEvent.SELECTED_TEMPLATE_CHANGED, selectedTemplateChanged);
				
				foundFolder.templates = foundTemplates;
				foundFolder.setStyle("headerRenderer", null);
				
				function folderCreationCompleteHandler (event : FlexEvent) : void
				{
					foundFolder.removeEventListener(FlexEvent.CREATION_COMPLETE, folderCreationCompleteHandler);
					
					foundFolder.templatesList.doubleClickEnabled = false;
				}
			}
			// .. filter
			
			private function refreshTemplatesContent (oldTemplateName:String, newTemplateName:String) : void
			{
				for each (var template : TemplateVO in allTemplates)
				{
					var templateContentEditor : TemplateContentEditor = getContentEditorByTemplate(template);
					
					if (templateContentEditor)
					{
						if (templateContentEditor.content.indexOf(oldTemplateName) >= 0)
							templateContentEditor.refreshTemplateLinks(oldTemplateName, newTemplateName);
					}
					
					template.content = PageUtils.getInstance().renameTemplateInPage(template.content, oldTemplateName, newTemplateName);
						
					sqlProxy.updateTemplateContent(template.name, template.content);
				}
			}
			
			private function refreshPagesContent (oldTemplateName:String, newTemplateName:String) : void
			{
				PageUtils.getInstance().renameTemplateInPages(oldTemplateName, newTemplateName);
				
				var renameEvent : TemplateRenameEvent = new TemplateRenameEvent(TemplateRenameEvent.TEMPLATE_RENAMED);
				renameEvent.oldTemplateName = oldTemplateName;
				renameEvent.newTemplateName = newTemplateName;
				
				dispatchEvent(renameEvent);
			}
			
			
		]]>
	</mx:Script>
	
	<mx:VBox width="170" height="100%">
	
		<mx:HBox width="100%" 
				 verticalAlign="middle" horizontalAlign="left">
			
			<mx:Spacer width="5"/>
			
			<components:BlackButton id="btnAddFolder"
					   toolTip="Add folder"
					   click="{addFolder()}"
					   icon="@Embed('icons/add_folder.png')"/>
			
			<components:BlackButton id="btnAddTemplate"
					   toolTip="Add template"
					   click="{addTemplate()}"
					   icon="@Embed('icons/add_template.png')"/>
			
			<components:BlackButton id="btnRemoveTemplate"
					   toolTip="Remove template"
					   click="{askToRemoveTemplate()}"
					   icon="@Embed('icons/delete_template.png')"/>
			
		</mx:HBox>
		
		<mx:VBox width="100%" height="100%" verticalGap="0">
			
			<mx:TextInput id="filter" width="100%" 
						  text="{FILTER_DEF_TEXT}" fontStyle="italic"
						  focusIn="filter_focusInHandler(event)" 
						  focusOut="filter_focusOutHandler(event)"
						  change="filter_changeHandler(event)"/>
			
			<mx:ViewStack id="accordionsViewStack" 
						  width="100%" height="100%">
				
				<mx:VBox width="100%" height="100%"
						 id="normalTemplatesBox">
					<mx:Accordion id="templatesAccordion"
								  headerRenderer="net.vdombox.helpeditor.view.components.TemplatesAccordionHeader"
								  fontFamily="Verdana" borderStyle="solid" 
								  width="100%" height="100%"
								  creationComplete="templatesAccordion_creationCompleteHandler(event)"
								  change="templatesAccordion_changeHandler(event)"/>
				</mx:VBox>
				
				<mx:VBox width="100%" height="100%"
						 id="filteredTemplatesBox">
					<mx:Accordion id="templatesFilteredAccordion"
								  width="100%" height="100%"
								  fontFamily="Verdana" borderStyle="solid"
								  creationComplete="templatesFilteredAccordion_creationCompleteHandler(event)"/>
				</mx:VBox>
				
			</mx:ViewStack>
			
			
		</mx:VBox>
			
	</mx:VBox>
	
	<mx:ViewStack id="vsTemplatesEditors" 
				  width="100%" height="100%"
				  backgroundColor="white">
		<components:TemplateContentEditor id="emptyContentEditor" enabled="false"/>
	</mx:ViewStack>
		
	
</mx:HBox>