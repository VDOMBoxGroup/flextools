<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" click="save()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.utils.Base64Decoder;
			import mx.utils.Base64Encoder;
			import mx.utils.UIDUtil;
			
			private var _data : XML;
			
			[Bindable]
			public var arResources:ArrayCollection = new ArrayCollection();
			
			public function set  dataProvader(xml:XML):void
			{
				this.enabled = true;
					
				_data =  xml.Resources[0];
				if (!_data) _data = new XML("<Resources/>");
				
				for each(var child:XML in _data.children())
				{
					var item:Object = {};
					
					item["ID"] = child.@ID;
					item["Name"] = child.@Name;
					item["Type"] = child.@Type;
					
					arResources.addItem(item);
				}	
			}
			
			private function addResource():void
			{
				var fileUpload:FileReference = new FileReference();
				fileUpload.addEventListener(Event.SELECT, fileSelected);
				
				fileUpload.browse();
				
				function fileSelected(event:Event):void
				{
					fileUpload.removeEventListener(Event.SELECT, fileSelected);
					fileUpload.addEventListener(Event.COMPLETE, fileDounloaded);
					fileUpload.load();
				}
				
				function fileDounloaded(event:Event):void
				{
					fileUpload.removeEventListener(Event.COMPLETE, fileDounloaded);
//					xmlObject = new XML(fileUpload.data.toString());

					var b64:Base64Encoder = new Base64Encoder();
					b64.encodeBytes(fileUpload.data);
					
					var xmlResource:XML = new XML("<Resource/>");
					xmlResource.@ID = UIDUtil.createUID().toLowerCase(); 
					xmlResource.@Name = fileUpload.name;
					xmlResource.@Type = fileUpload.extension;
					
					xmlResource.appendChild( XML("<![CDATA[" + b64.toString()  +"]" +"]" +">"))
					_data.appendChild(xmlResource);
						
					var item:Object = {};
					item["ID"] = xmlResource.@ID;
					item["Name"] = xmlResource.@Name;
					item["Type"] = xmlResource.@Type;
					arResources.addItem(item);
				}
			}
			
			private function changeResourcesContent():void
			{
				var fileUpload:FileReference = new FileReference();
				fileUpload.addEventListener(Event.SELECT, fileSelected);
				
				fileUpload.browse();
				
				function fileSelected(event:Event):void
				{
					fileUpload.removeEventListener(Event.SELECT, fileSelected);
					fileUpload.addEventListener(Event.COMPLETE, fileDounloaded);
					fileUpload.load();
				}
				
				function fileDounloaded(event:Event):void
				{
					fileUpload.removeEventListener(Event.COMPLETE, fileDounloaded);
					
					var b64:Base64Encoder = new Base64Encoder();
					b64.encodeBytes(fileUpload.data);
					
					var id:String = resources.selectedItem.ID;
					var xmlResource:XML = _data.Resource.(@ID == id)[0];
					
					xmlResource.appendChild( XML("<![CDATA[" + b64.toString()  +"]" +"]" +">"))
					delete xmlResource.children()[0];
					
					Alert.show("ID: " +id , "Content changed"); 
				}
			}
			
			private function deleteResource():void
			{
				Alert.show("Do You want to delete ?","Delete", 3, this, deleteResourceOk);
				
				function deleteResourceOk(event:CloseEvent):void
				{
					var selectedIndex:int  = resources.selectedIndex;
					
					if (event.detail==Alert.YES)
					{
						var id:String = resources.selectedItem.ID;
						delete _data.Resource.(@ID == id)[0];
						arResources.removeItemAt(arResources.getItemIndex(resources.selectedItem));
					}
					
					if (arResources.length)
					{
						if (selectedIndex == arResources.length )
							resources.selectedIndex = selectedIndex - 1;
						else
							resources.selectedIndex = selectedIndex;
					}
				}
					
			}
			
			private function save():void
			{
				if(dataChanged)
				{
					for (var i:String in arResources)
					{
						var objResource:Object = arResources[i];
						var xmlResource:XML = _data.Resource.(@ID == objResource["ID"])[0];
						
						xmlResource.@Name = objResource["Name"];
						xmlResource.@Type = objResource["Type"];
					}
				}
			}
			
			
			private function exportContent():void
			{
				var id:String = resources.selectedItem.ID;
				var xmlResource:XML =  _data.Resource.(@ID == id)[0];
				
				var b64:Base64Decoder = new Base64Decoder();
				b64.decode(xmlResource.toString());
				
				var fileUpload:FileReference = new FileReference();
				var ba:ByteArray =  b64.toByteArray();
				fileUpload.save( ba, xmlResource.@Name );
				
				fileUpload.addEventListener(Event.COMPLETE, fileDounloaded);
				
				function fileDounloaded(event:Event):void
				{
//					panel.title = "PageOne Migration - " + fileUpload.name;
				}
			}
			
			private var dataChanged:Boolean;
			protected function resources_itemEditEndHandler(event:DataGridEvent):void
			{
				// TODO Auto-generated method stub
				dataChanged = true;
			}

		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		
		<mx:DataGrid id="resources" color="0x323232" width="100%" height="100%" rowCount="3"   itemEditEnd="resources_itemEditEndHandler(event)"
					 editable="true" dataProvider="{arResources}">
			<mx:columns>
				<mx:DataGridColumn dataField="ID" dataTipField="ID" width="200" editable="false" />
				<mx:DataGridColumn dataField="Name" dataTipField="Name" width="150" />
				<mx:DataGridColumn dataField="Type" dataTipField="Type" width="100" />
			</mx:columns>
		</mx:DataGrid>
		<s:HGroup textAlign="right" width="100%"   paddingBottom="10" paddingRight="10">
			<s:HGroup width="100%"/>
			<s:Button label="Add" click="{addResource();}" />
			<s:Button label="Change content" click="{changeResourcesContent();}"  enabled="{resources.selectedIndex != -1}"/>
			<s:Button label="Export"  enabled="{resources.selectedIndex != -1}"
					  click="{exportContent()}"/>
			<s:Button label="Delete"  enabled="{resources.selectedIndex != -1}"
					  click="{deleteResource()}"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
