<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent	 xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"  
					 xmlns:ns="net.vdombox.object_editor.model.*"
					 xmlns:ns2="net.vdombox.object_editor.view.*"
					 label="Attributes">
	<fx:Declarations>		
				
		<mx:NumberValidator source="{minValue}" property="text" integerError="Enter Integer value"
			 domain="int" trigger="{minValue}" triggerEvent="change" minValue="{int.MIN_VALUE.toString()}"/>
		
		<mx:NumberValidator source="{maxValue}" property="text" integerError="Enter Integer value"
							domain="int" trigger="{maxValue}" triggerEvent="change" minValue="{int.MIN_VALUE.toString()}"/>
		
		<mx:NumberValidator source="{multiLineLength}" property="text" integerError="Enter Integer value"
							domain="int" trigger="{multiLineLength}" triggerEvent="change" minValue="{int.MIN_VALUE.toString()}"/>
		
		<mx:NumberValidator source="{multiLineLength}" property="text" integerError="Enter Integer value"
							domain="int" trigger="{multiLineLength}" triggerEvent="change" minValue="0"/>
		
		<mx:NumberValidator source="{fieldLength}" property="text" integerError="Enter Integer value"
							domain="int" trigger="{fieldLength}" triggerEvent="change" minValue="0" />
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.INavigatorContent;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.messaging.channels.StreamingAMFChannel;
			
			import net.vdombox.object_editor.view.AttributesListRenderer;
			
			private var DEFAULT_NUMBER_VALUE:String = int.MAX_VALUE.toString();
			public  var CodeInterfaceValue:String = "";
					
			[Bindable]
			public var currentAttribute:Object;
						
			public function clearAttributeFields():void
			{
				fname.text				= "";
				displayName.text		= "";
				errMessage.text			= "";//надо удалять содержимое?
				visibleAtr.selected		= false;
				help.clearTextArea();
				
				attributesList.dataProvider = null;
			}
			
			[Bindable]
			public var arInterfaceType:ArrayCollection = new ArrayCollection(
				[ 	{label:"Standard", 		data:0}, 
					{label:"RichText Editor",data:1}, 
					{label:"Text Editor", 	data:2}, 
					{label:"Picture", 		data:3}, 
					{label:"Special Table", data:4}]);	
			
			[Bindable]
			public var arColorGroup:ArrayCollection = new ArrayCollection(
				[ 	{label:"SELECT VALUE", 	data:0},
					{label:"Grey", 		 	data:1}, 
					{label:"Red", 			data:2}, 
					{label:"Green",			data:3}, 
					{label:"Blue", 			data:4}, 
				]);	

			[Bindable]
			public var arCodeInterface:ArrayCollection = new ArrayCollection(
				[ 	"TextField",					
					"Number1", 
					"MultiLine", 
					"!Font", 
					"DropDown", 
					"File", 
					"Color", 
					"PageLink", 
					"LinkedBase", 
					"ObjectList", 
					"ExternalEditor"
				]);	
/*[ 	{label:"TextField(Length)", 		 data:"TextField(Length)"},
					{label:"Number(minValue, maxValue)", data:"Number(minValue, maxValue)"}, 
					{label:"MultiLine(Length)", 		 data:"MultiLine(Length)"}, 
					{label:"!Font()", 					 data:"!Font()"}, 
					{label:"DropDown(Values)", 			 data:"DropDown(Values)"}, 
					{label:"File()", 					 data:"File()"}, 
					{label:"Color()", 					 data:"Color()"}, 
					{label:"PageLink()", 				 data:"PageLink()"}, 
					{label:"LinkedBase()",				 data:"LinkedBase()"}, 
					{label:"ObjectList()", 				 data:"ObjectList()"}, 
					{label:"ObjectList(type_id)", 		 data:"ObjectList(type_id)"}, 
					{label:"ExternalEditor(Title, Info)",data:"ExternalEditor(Title, Info)"}
				]);*/
								
			private function changeField():void
			{
				dispatchEvent(new Event( Event.CHANGE ));
			}					
			
			public function compliteCodeInterfaceField(value:String):void
			{
				CodeInterfaceValue = value;
				
				
				var ciparser:RegExp = /([^\(]+)\(([^\)]*)\)/;
				var parsed:Array = ciparser.exec(value);				
				var codeinterfaceLabel:String = parsed[1];
				var arguments:Array = parsed[2].split(",");
				
				
				
//				var num:int = CodeInterfaceValue.indexOf("(");
//							
//				var label:String = CodeInterfaceValue.slice(0,num); 
				codeInterface.selectedItem = codeinterfaceLabel;
				
				if( codeinterfaceLabel != "!Font" &&
					codeinterfaceLabel != "File" &&
					codeinterfaceLabel != "Color" &&
					codeinterfaceLabel != "PageLink" &&
					codeinterfaceLabel != "LinkedBase" )
				{
//					var num2:int;
					switch ( codeinterfaceLabel ) 
					{	
						case "TextField":
							CIViewStack.selectedIndex = 0;
							CIViewStack.validateNow();
							fieldLength.text = arguments[0];//CodeInterfaceValue.slice(num+1,CodeInterfaceValue.length-1);
							break;
						case "Number1":
							CIViewStack.selectedIndex = 1;
							CIViewStack.validateNow();
//							num2 = 			CodeInterfaceValue.indexOf(",");
							minValue.text = arguments[0];//CodeInterfaceValue.slice(num+1,num2);							
							maxValue.text = arguments[1];//CodeInterfaceValue.slice(num2+1,CodeInterfaceValue.length-1);
							break;
						case "MultiLine":
							CIViewStack.selectedIndex = 2;
							CIViewStack.validateNow();
							multiLineLength.text = arguments[0];//CodeInterfaceValue.slice(num+1,CodeInterfaceValue.length-1); 
							break;					
						case "DropDown":
							CIViewStack.selectedIndex = 3;
							CIViewStack.validateNow();
							var num:int = CodeInterfaceValue.indexOf("(");
							ddValues.text = CodeInterfaceValue.slice(num+1,CodeInterfaceValue.length-1); 
							break;					
						case "ObjectList":
							CIViewStack.selectedIndex = 4;
							CIViewStack.validateNow();
							typeId.text = arguments[0];//CodeInterfaceValue.slice(num+1,CodeInterfaceValue.length-1);
							break;
						case "ExternalEditor":
							CIViewStack.selectedIndex = 5;
							CIViewStack.validateNow();
//							num2 = 		 CodeInterfaceValue.indexOf(",");
							title.text = arguments[0];//CodeInterfaceValue.slice(num+1,num2);	
							info.text  = arguments[1];//CodeInterfaceValue.slice(num2+1,CodeInterfaceValue.length-1);
							break;
					}
				}
			}
			
			private function clearFields():void
			{
				var num:int 	 = CodeInterfaceValue.indexOf("(");				
				var label:String = CodeInterfaceValue.slice(0,num); 
				
				if( label != "!Font" &&
					label != "File" &&
					label != "Color" &&
					label != "PageLink" &&
					label != "LinkedBase" )
				{
					switch ( label ) 
					{	
						case "TextField":
							fieldLength.text = "";
							break;
						case "Number1":							
							minValue.text = "";							
							maxValue.text = "";
							break;
						case "MultiLine":
							multiLineLength.text = ""; 
							break;					
						case "DropDown":
							ddValues.text = ""; 
							break;					
						case "ObjectList":
							typeId.text = "";
							break;
						case "ExternalEditor":
							title.text = "";	
							info.text  = "";
							break;
					}
				}
			}
			
			private function changeStack(isChangeStack:Boolean):void
			{					
				if(isChangeStack)
				{
					clearFields();
				}
				var label:String = codeInterface.selectedItem;
				if( label != "!Font" &&
					label != "File"  &&
					label != "Color" &&
					label != "PageLink" &&
					label != "LinkedBase" )
				{
					var ch:* = CIViewStack.getChildByName(codeInterface.selectedItem);
					CIViewStack.selectedChild = ch;
					setData(label, isChangeStack);
				}	
				else
				{
					CIViewStack.selectedChild = notArguments;
					CodeInterfaceValue = label + "()";
				}
				dispatchEvent(new Event( Event.SELECT));
			}
			
			private function setData( label:String, isChangeStack:Boolean):void
			{	
				if(isChangeStack) 
					CodeInterfaceValue = label + "()";
				else
				{
					switch ( label ) 
					{	
						case "TextField":						
							CodeInterfaceValue = label + "(" + fieldLength.text +")";
							break;
						case "Number1":						
							CodeInterfaceValue = "Number1" + "(" + minValue.text + "," + maxValue.text + ")";
							break;
						case "MultiLine":						
							CodeInterfaceValue = label + "(" + multiLineLength.text + ")";
							break;					
						case "DropDown":
							CodeInterfaceValue = label + "("+ ddValues.text +")";
							break;					
						case "ObjectList":
							CodeInterfaceValue = label + "(" + typeId.text + ")";
							break;
						case "ExternalEditor":
							CodeInterfaceValue = label + "(" + title.text +","+ info.text + ")";
							break;
					}
				}
			}
						
		]]>
	</fx:Script>
	<s:Scroller width="{this.width}" height="{this.height}">
	<s:HGroup>
		<s:VGroup height="{300}">
			<s:List itemRenderer="net.vdombox.object_editor.view.AttributesListRenderer"  id="attributesList" height="{height- 50}" width="100%" dragMoveEnabled="true" dragEnabled="true" dropEnabled="true" change="this.currentAttribute=List(event.target).selectedItem"/>
			<s:HGroup>
				<s:Button id="addAttributeButton" label="Add"/>
				<s:Button id="deleteAttributeButton" label="Delete" enabled="{attributesList.selectedIndex != -1}"/>
			</s:HGroup>
		</s:VGroup>
		<mx:Form width="100%" color="0x323232" paddingTop="0">
			<mx:FormHeading fontSize="10"  label="Enter values into the form." paddingTop="0" />
			
			<mx:FormItem label="Name" toolTip="Имя объекта">
				<mx:TextInput id="fname" width="250" change="{changeField()}"/>
			</mx:FormItem>
			
			<mx:FormItem label="DisplayName" >
				<ns2:LangTextArea id="displayName" width="250" height="20" change="{changeField()}" />
			</mx:FormItem >
			
			<mx:FormItem label="DefaultValue" toolTip="Значение по умолчанию">
				<mx:TextInput id="defaultValue" width="250" change="{changeField()}"/>
			</mx:FormItem>
						
			<mx:FormItem label="RegExp" >
				<s:HGroup>
					<s:TextInput id="regExp" width="250"  change="{changeField()}"/>
					<!--s:Button label="..." width="30" click="{}" /-->
				</s:HGroup>
			</mx:FormItem>
			
			<mx:FormItem label="Error Validation Message">
				<!--s:TextArea id="fErrMessage" width="200" change="{viewChanged()}" height="40" verticalScrollPolicy="auto"/-->
				<ns2:LangTextArea id="errMessage" width="200" height="40" change="{changeField()}"/>
			</mx:FormItem>
			
			<mx:FormItem label="Visible" >
				<s:CheckBox id="visibleAtr" label="Visible atribute"  toolTip="Отображаемый в редакторе" change="{changeField()}"/>
			</mx:FormItem>
			
			<mx:FormItem  label="Help">
				<ns2:LangTextArea id="help" width="250" height="40" change="{changeField()}"/>
			</mx:FormItem >

			<mx:FormItem label="InterfaceType" 
						 toolTip="Значения: 1 - Standard, 2 - RichText Editor, 3 - Text Editor, 4 - Picture, 5 - Special Table">
				<s:ComboBox id="interfaceType" dataProvider="{arInterfaceType}" width="250" change="{changeField()}"/>
			</mx:FormItem>
			
			<mx:FormItem label="Colorgroup" 
						 toolTip="Цветовая группа атрибута, значения: 1 - Grey, 2 - Red, 3 - Green, 4 - Blue">
				<s:ComboBox id="colorgroup" dataProvider="{arColorGroup}" width="250" change="{changeField()}"/>
			</mx:FormItem>
			
			<mx:FormItem label="CodeInterface" >
				<s:HGroup>
					<s:ComboBox change="{changeStack(true)}" id="codeInterface" dataProvider="{arCodeInterface}" width="250"/>
				</s:HGroup>
				<mx:ViewStack id="CIViewStack" borderStyle="solid" width="250" height="120" color="0x323232">
					
					<s:NavigatorContent id="TextField" fontWeight="bold" >						
						<s:layout>
							<s:VerticalLayout horizontalAlign="center"  
											  paddingTop="5" paddingLeft="5" 
											  paddingRight="5" paddingBottom="5" />
						</s:layout>
						
						<s:HGroup>
							<s:Label 	 text="Length:"/>
							<s:TextInput id="fieldLength" width="180" change="changeStack(false)"/>							
						</s:HGroup>
					</s:NavigatorContent>
					
					<s:NavigatorContent id="Number1" fontWeight="bold" >						
						<s:layout>
							<s:VerticalLayout horizontalAlign="center"  
											  paddingTop="5" paddingLeft="5" 
											  paddingRight="5" paddingBottom="5" />
						</s:layout>
						
						<s:VGroup>
							<s:Label 	 text="min Value"/>
							<s:TextInput id="minValue" width="200" change="changeStack(false)" text="" />
							<s:Label 	 text="max Value"/>
							<s:TextInput id="maxValue" width="200" change="changeStack(false)" text="" />
						</s:VGroup>
					</s:NavigatorContent>
					
					<s:NavigatorContent id="MultiLine" fontWeight="bold" >
						<s:layout>
							<s:VerticalLayout horizontalAlign="center"  
											  paddingTop="5" paddingLeft="5" 
											  paddingRight="5" paddingBottom="5" />
						</s:layout>
						<s:HGroup>
							<s:Label 	 text="Length:"/>
							<s:TextInput id="multiLineLength" width="180" change="changeStack(false)" text=""/>
						</s:HGroup>
					</s:NavigatorContent>
					
					<s:NavigatorContent id="DropDown" fontWeight="bold" >
						<s:layout>
							<s:VerticalLayout horizontalAlign="center"  
											  paddingTop="5" paddingLeft="5" 
											  paddingRight="5" paddingBottom="5" />
						</s:layout>
						<s:HGroup>
							<s:Label 	 text="Values:"/>
							<s:TextInput id="ddValues" width="180" change="changeStack(false)" text="" />
						</s:HGroup>
					</s:NavigatorContent>
					
					<s:NavigatorContent id="ObjectList" fontWeight="bold" >
						<s:layout>
							<s:VerticalLayout horizontalAlign="center"  
											  paddingTop="5" paddingLeft="5" 
											  paddingRight="5" paddingBottom="5" />
						</s:layout>
						<s:HGroup>
							<s:Label		text="type id:"/>
							<s:TextInput id="typeId" width="180" change="changeStack(false)"  text=""/>
						</s:HGroup>
					</s:NavigatorContent>
					
					<s:NavigatorContent id="ExternalEditor" fontWeight="bold" >
						<s:layout>
							<s:VerticalLayout horizontalAlign="center"  
											  paddingTop="5" paddingLeft="5" 
											  paddingRight="5" paddingBottom="5" />
						</s:layout>
						<s:VGroup>
							<s:Label 		text="Title:"/>
							<s:TextInput	id="title" width="200" change="changeStack(false)" text=""/>
							<s:Label  		text="Info:"/>
							<s:TextInput 	id="info"  width="200" change="changeStack(false)" text=""/>
						</s:VGroup>
					</s:NavigatorContent>
					
					<s:NavigatorContent id="notArguments"/>								
				</mx:ViewStack>
			</mx:FormItem>
			
		</mx:Form>		
	</s:HGroup>
	</s:Scroller >
</s:NavigatorContent>
